<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.4.1" alternative="counterexamples" timelimit="5" steplimit="0" memlimit="1000"/>
<file>
<path name=".."/>
<path name="pps.mlw"/>
<theory name="Pps" proved="true">
 <goal name="VC pps" expl="VC for pps" proved="true">
 <transf name="compute_specified" proved="true" >
 </transf>
 </goal>
 <goal name="VC build_pps" expl="VC for build_pps" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC build_pps.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC build_pps.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="VC build_pps.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.45"/></proof>
  </goal>
  <goal name="VC build_pps.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC build_pps.3.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.77"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC build_pps.4.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="mod_eq">
    <goal name="VC build_pps.4.0.0" expl="apply premises" proved="true">
    <transf name="replace" proved="true" arg1="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; w then x @ i1 else 0)" arg2="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; w then x&#39; @ i1 else 0)">
     <goal name="VC build_pps.4.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; r then y @ i1 else 0)" arg2="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; r then y&#39; @ i1 else 0)">
      <goal name="VC build_pps.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC build_pps.4.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="1"><result status="valid" time="1.05"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC build_pps.4.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.75"/></proof>
     <proof prover="1"><result status="valid" time="0.93"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC build_pps.5.0" expl="precondition" proved="true">
   <transf name="replace" proved="true" arg1="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; r then y @ i1 else 0)" arg2="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; r then y&#39; @ i1 else 0)">
    <goal name="VC build_pps.5.0.0" expl="precondition" proved="true">
    <transf name="replace" proved="true" arg1="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; w then x @ i1 else 0)" arg2="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; w then x&#39; @ i1 else 0)">
     <goal name="VC build_pps.5.0.0.0" expl="precondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC build_pps.5.0.0.1" expl="equality hypothesis" proved="true">
     <proof prover="1"><result status="valid" time="0.86"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC build_pps.5.0.1" expl="equality hypothesis" proved="true">
    <proof prover="1"><result status="valid" time="0.86"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.39"/></proof>
  </goal>
  <goal name="VC build_pps.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.43"/></proof>
  </goal>
  <goal name="VC build_pps.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H7">
   <goal name="VC build_pps.8.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC build_pps.8.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mod_eq">
     <goal name="VC build_pps.8.0.0.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; w then getbv x @ i1 else 0)" arg2="(getbv x)">
      <goal name="VC build_pps.8.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; r then getbv y @ i1 else 0)" arg2="(getbv y)">
       <goal name="VC build_pps.8.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="VC build_pps.8.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_func">
        <goal name="VC build_pps.8.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC build_pps.8.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC build_pps.8.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.67"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC build_pps.8.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_func">
       <goal name="VC build_pps.8.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC build_pps.8.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC build_pps.8.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.74"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps.9" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC build_pps.9.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC build_pps.9.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; w then getbv x @ i1 else 0)" arg2="(getbv x)">
     <goal name="VC build_pps.9.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(fun (i1:int) -&gt; if 0 &lt;= i1 /\ i1 &lt; r then getbv y @ i1 else 0)" arg2="(getbv y)">
      <goal name="VC build_pps.9.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC build_pps.9.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_func">
       <goal name="VC build_pps.9.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC build_pps.9.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC build_pps.9.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.71"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC build_pps.9.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_func">
      <goal name="VC build_pps.9.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC build_pps.9.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC build_pps.9.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.74"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC build_pps_bv" expl="VC for build_pps_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC build_pps_bv.0" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC build_pps_bv.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC build_pps_bv.1.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.73"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps_bv.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.69"/></proof>
  </goal>
  <goal name="VC build_pps_bv.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC build_pps_bv.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC build_pps_bv.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps_bv.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.74"/></proof>
  </goal>
  <goal name="VC build_pps_bv.6" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC build_pps_bv.7" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC build_pps_bv.7.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.69"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps_bv.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.66"/></proof>
  </goal>
  <goal name="VC build_pps_bv.9" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC build_pps_bv.10" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC build_pps_bv.10.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.69"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps_bv.11" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.65"/></proof>
  </goal>
  <goal name="VC build_pps_bv.12" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC build_pps_bv.13" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.72"/></proof>
  </goal>
  <goal name="VC build_pps_bv.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.72"/></proof>
  </goal>
  <goal name="VC build_pps_bv.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.70"/></proof>
  </goal>
  <goal name="VC build_pps_bv.16" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H7">
   <goal name="VC build_pps_bv.16.0" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall i. 0&lt;=i &lt; 2 -&gt; mod i 2 = i)">
    <goal name="VC build_pps_bv.16.0.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.78"/></proof>
    </goal>
    <goal name="VC build_pps_bv.16.0.1" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="h">
     <goal name="VC build_pps_bv.16.0.1.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC build_pps_bv.16.0.1.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(make_bv (fun (i1:int) -&gt; mod (getbv x @ i1) 2) w)" arg2="x">
       <goal name="VC build_pps_bv.16.0.1.0.0.0" expl="postcondition" proved="true">
       <transf name="replace" proved="true" arg1="(make_bv (fun (i1:int) -&gt; mod (getbv y @ i1) 2) r)" arg2="y">
        <goal name="VC build_pps_bv.16.0.1.0.0.0.0" expl="postcondition" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
        <goal name="VC build_pps_bv.16.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_bv">
         <goal name="VC build_pps_bv.16.0.1.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length">
          <goal name="VC build_pps_bv.16.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="0.41"/></proof>
          </goal>
          <goal name="VC build_pps_bv.16.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC build_pps_bv.16.0.1.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC build_pps_bv.16.0.1.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.02"/></proof>
            </goal>
            <goal name="VC build_pps_bv.16.0.1.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="0.86"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC build_pps_bv.16.0.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="0.35"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
           <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="0.84"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="0.84"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
            <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="0.35"/></proof>
            </goal>
            <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
              <proof prover="1"><result status="valid" time="0.93"/></proof>
              </goal>
              <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.2.1.0.1" expl="rewrite premises" proved="true">
              <proof prover="1"><result status="valid" time="0.96"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC build_pps_bv.16.0.1.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.24" steps="216"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC build_pps_bv.16.0.1.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_bv">
        <goal name="VC build_pps_bv.16.0.1.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC build_pps_bv.16.0.1.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.40"/></proof>
         </goal>
         <goal name="VC build_pps_bv.16.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC build_pps_bv.16.0.1.0.0.1.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC build_pps_bv.16.0.1.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.97"/></proof>
           </goal>
           <goal name="VC build_pps_bv.16.0.1.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="1.01"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC build_pps_bv.16.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.42"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC build_pps_bv.16.0.1.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.97"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.95"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.2" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
           <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.40"/></proof>
           </goal>
           <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="0.94"/></proof>
             </goal>
             <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.2.1.0.1" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="0.93"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC build_pps_bv.16.0.1.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.26" steps="216"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC build_pps_bv.16.0.1.1" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC build_pps_bv.16.0.1.1.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.79"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC build_pps_bv.16.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.24" steps="212"/></proof>
   </goal>
   <goal name="VC build_pps_bv.16.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.24" steps="212"/></proof>
   </goal>
   <goal name="VC build_pps_bv.16.3" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.27" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC build_pps_bv.17" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC build_pps_bv.17.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC build_pps_bv.17.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(make_bv (fun (i1:int) -&gt; mod (getbv x @ i1) 2) w)" arg2="x">
     <goal name="VC build_pps_bv.17.0.0.0" expl="postcondition" proved="true">
     <transf name="replace" proved="true" arg1="(make_bv (fun (i1:int) -&gt; mod (getbv y @ i1) 2) r)" arg2="y">
      <goal name="VC build_pps_bv.17.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC build_pps_bv.17.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="set_equal_bv">
       <goal name="VC build_pps_bv.17.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC build_pps_bv.17.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.42"/></proof>
        </goal>
        <goal name="VC build_pps_bv.17.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC build_pps_bv.17.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC build_pps_bv.17.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="0.94"/></proof>
          </goal>
          <goal name="VC build_pps_bv.17.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="0.94"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC build_pps_bv.17.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="1"><result status="valid" time="0.40"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC build_pps_bv.17.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC build_pps_bv.17.0.0.0.1.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
         <goal name="VC build_pps_bv.17.0.0.0.1.1.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC build_pps_bv.17.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.00"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC build_pps_bv.17.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC build_pps_bv.17.0.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="1.00"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC build_pps_bv.17.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
          <goal name="VC build_pps_bv.17.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
          <proof prover="1"><result status="valid" time="0.39"/></proof>
          </goal>
          <goal name="VC build_pps_bv.17.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC build_pps_bv.17.0.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC build_pps_bv.17.0.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="0.93"/></proof>
            </goal>
            <goal name="VC build_pps_bv.17.0.0.0.1.1.0.2.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="0.98"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC build_pps_bv.17.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.26" steps="212"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC build_pps_bv.17.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="apply" proved="true" arg1="set_equal_bv">
      <goal name="VC build_pps_bv.17.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="make_bv_length">
       <goal name="VC build_pps_bv.17.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="0.40"/></proof>
       </goal>
       <goal name="VC build_pps_bv.17.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC build_pps_bv.17.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC build_pps_bv.17.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.96"/></proof>
         </goal>
         <goal name="VC build_pps_bv.17.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="1.00"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC build_pps_bv.17.0.0.1.0.2" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="0.40"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC build_pps_bv.17.0.0.1.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC build_pps_bv.17.0.0.1.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
        <goal name="VC build_pps_bv.17.0.0.1.1.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC build_pps_bv.17.0.0.1.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="0.94"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC build_pps_bv.17.0.0.1.1.0.1" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC build_pps_bv.17.0.0.1.1.0.1.0" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.96"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC build_pps_bv.17.0.0.1.1.0.2" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
         <goal name="VC build_pps_bv.17.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
         <proof prover="1"><result status="valid" time="0.39"/></proof>
         </goal>
         <goal name="VC build_pps_bv.17.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC build_pps_bv.17.0.0.1.1.0.2.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC build_pps_bv.17.0.0.1.1.0.2.1.0.0" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.95"/></proof>
           </goal>
           <goal name="VC build_pps_bv.17.0.0.1.1.0.2.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.96"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC build_pps_bv.17.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.26" steps="212"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC build_pps_bv.17.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.24" steps="208"/></proof>
   </goal>
   <goal name="VC build_pps_bv.17.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.23" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_basis_ket_bv" expl="VC for h_basis_ket_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC h_basis_ket_bv.0" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC h_basis_ket_bv.0.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC h_basis_ket_bv.0.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
     <goal name="VC h_basis_ket_bv.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC h_basis_ket_bv.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.34" steps="208"/></proof>
      </goal>
      <goal name="VC h_basis_ket_bv.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.26" steps="208"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC h_basis_ket_bv.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC h_basis_ket_bv.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.75" steps="208"/></proof>
      </goal>
      <goal name="VC h_basis_ket_bv.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.75" steps="208"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC h_basis_ket_bv.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC h_basis_ket_bv.0.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.25" steps="202"/></proof>
      </goal>
      <goal name="VC h_basis_ket_bv.0.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.26" steps="202"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC h_basis_ket_bv.0.1" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC h_basis_ket_bv.0.1.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
     <goal name="VC h_basis_ket_bv.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.79"/></proof>
     </goal>
     <goal name="VC h_basis_ket_bv.0.1.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="0.79"/></proof>
     </goal>
     <goal name="VC h_basis_ket_bv.0.1.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.26" steps="202"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC h_basis_ket_bv.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.66" steps="200"/></proof>
  </goal>
  <goal name="VC h_basis_ket_bv.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25" steps="200"/></proof>
  </goal>
  <goal name="VC h_basis_ket_bv.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.70" steps="206"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_ket_bound" expl="VC for pps_ket_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_ket_bound.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC pps_ket_bound.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_ket_bound.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
     <goal name="VC pps_ket_bound.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_ket_bound.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.75" steps="204"/></proof>
      </goal>
      <goal name="VC pps_ket_bound.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.78" steps="204"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_ket_bound.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_ket_bound.0.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.69" steps="204"/></proof>
      </goal>
      <goal name="VC pps_ket_bound.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.68" steps="204"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_ket_bound.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_ket_bound.0.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.25" steps="198"/></proof>
      </goal>
      <goal name="VC pps_ket_bound.0.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.35" steps="198"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_ket_bound.0.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_ket_bound.0.1.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
     <goal name="VC pps_ket_bound.0.1.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.65" steps="203"/></proof>
     </goal>
     <goal name="VC pps_ket_bound.0.1.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.65" steps="203"/></proof>
     </goal>
     <goal name="VC pps_ket_bound.0.1.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.23" steps="198"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC low_pps_ket_bound" expl="VC for low_pps_ket_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC low_pps_ket_bound.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC low_pps_ket_bound.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.68"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC high_pps_ket_bound" expl="VC for high_pps_ket_bound" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC high_pps_ket_bound.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC high_pps_ket_bound.0.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis" expl="VC for pps_apply_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis.0" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC pps_apply_basis.0.0" expl="VC for pps_apply_basis" proved="true">
   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
    <goal name="VC pps_apply_basis.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.83" steps="209"/></proof>
    </goal>
    <goal name="VC pps_apply_basis.0.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.82" steps="209"/></proof>
    </goal>
    <goal name="VC pps_apply_basis.0.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.24" steps="204"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis.0.1" expl="VC for pps_apply_basis" proved="true">
   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
    <goal name="VC pps_apply_basis.0.1.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.75" steps="209"/></proof>
    </goal>
    <goal name="VC pps_apply_basis.0.1.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.84" steps="209"/></proof>
    </goal>
    <goal name="VC pps_apply_basis.0.1.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.27" steps="204"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_basis.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.76" steps="202"/></proof>
  </goal>
  <goal name="VC pps_apply_basis.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.87" steps="198"/></proof>
  </goal>
  <goal name="VC pps_apply_basis.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.01" steps="201"/></proof>
  </goal>
  <goal name="VC pps_apply_basis.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.25" steps="210"/></proof>
  </goal>
  <goal name="VC pps_apply_basis.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="2.26" steps="218"/></proof>
  </goal>
  <goal name="VC pps_apply_basis.6" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC pps_apply_basis.6.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC pps_apply_basis.6.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="scalar_ket_value">
     <goal name="VC pps_apply_basis.6.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="VC pps_apply_basis.6.0.0.0.0" expl="postcondition" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_apply_basis.6.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="scalar_ket_value">
        <goal name="VC pps_apply_basis.6.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="mult_eq_t">
         <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="sum_eq">
          <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="mult_eq_t">
             <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.38" steps="240"/></proof>
             </goal>
             <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="get_ket_bv_to_ket_length">
              <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="4.28"/></proof>
              </goal>
              <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="0.39" steps="240"/></proof>
               </goal>
               <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
               <transf name="rewrite" proved="true" arg1="make_bv_length">
                <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="3.71"/></proof>
                </goal>
                <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1" expl="rewrite premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.0" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                   <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.0.0.0" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="4.00"/></proof>
                   </goal>
                   <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.0.0.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="4.03"/></proof>
                   </goal>
                   <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.0.0.2" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.37" steps="244"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.1.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                   <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.1.0.0" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="4.04"/></proof>
                   </goal>
                   <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.1.0.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="4.06"/></proof>
                   </goal>
                   <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.1.1.0.2" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.39" steps="244"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_apply_basis.6.0.0.0.0.0.0.1.0.0.0.1.1.1.2" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="3.45"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_basis.6.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="3.75"/></proof>
      </goal>
      <goal name="VC pps_apply_basis.6.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_apply_basis.6.0.0.0.2.0" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.38" steps="238"/></proof>
       </goal>
       <goal name="VC pps_apply_basis.6.0.0.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="2.83"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_decomp" expl="VC for pps_apply_basis_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_decomp.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_equal_ket_l">
   <goal name="VC pps_apply_basis_decomp.0.0" expl="apply premises" proved="true">
   <transf name="exists" proved="true" arg1="(h_width h)">
    <goal name="VC pps_apply_basis_decomp.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC pps_apply_basis_decomp.0.0.0.0" proved="true">
     <proof prover="2"><result status="valid" time="2.14" steps="198"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_decomp.0.0.0.1" proved="true">
     <proof prover="2"><result status="valid" time="1.84" steps="198"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis_decomp.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_apply_basis_decomp.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
     <goal name="VC pps_apply_basis_decomp.0.1.0.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC pps_apply_basis_decomp.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e1:bitvec) -&gt;
      get_ket
      ((pow_inv_sqrt_2 (h_range h)
        *. sum (n_bvs (h_range h))
           (fun (y:bitvec) -&gt;
             ang_exp ((h_angle h @ getbv x) @ getbv y)
             *. indic (h_basis_ket_bv h x y) e1))
       *.. ket (h_width h) (bv_to_int e1))
      i),(n_bvs (h_width h)),(int_to_bv  i (h_width h))">
        <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_ket_value">
           <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="pps_apply_basis_spec">
            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="mult_assoc1">
             <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="mult_eq_t">
              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.29" steps="200"/></proof>
              </goal>
              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="goal_comm">
               <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="mult_one_t">
                <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="sum_eq">
                 <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
                    <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="mult_eq_t">
                     <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.28" steps="202"/></proof>
                     </goal>
                     <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="get_indic">
                      <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="get_indic">
                       <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                       <transf name="eliminate_if" proved="true" >
                        <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.27" steps="206"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="H1" arg2="in" arg3="H">
                          <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv" arg2="in" arg3="H">
                           <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.27" steps="204"/></proof>
                           </goal>
                           <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.11" steps="209"/></proof>
                           </goal>
                           <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                           <transf name="replace" proved="true" arg1="(ket_length (pps_apply_basis h x1))" arg2="(h_width h)" arg3="in" arg4="H3">
                            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.27" steps="206"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.0.2.1" expl="equality hypothesis" proved="true">
                            <proof prover="5"><result status="valid" time="5.56"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
                         <transf name="replace" proved="true" arg1="i" arg2="(bv_to_int (make_bv ((h_basis_ket h @ getbv x1) @ getbv x) (h_width h)))" arg3="in" arg4="H1">
                          <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_" arg2="in" arg3="H1">
                           <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.27" steps="202"/></proof>
                           </goal>
                           <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.28" steps="209"/></proof>
                           </goal>
                           <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2" expl="rewrite premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="make_bv_length">
                            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.0" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.33" steps="206"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1" expl="rewrite premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1.0" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1.0.0" expl="apply premises" proved="true">
                              <proof prover="2"><result status="valid" time="2.28" steps="216"/></proof>
                              </goal>
                              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1.0.1" expl="apply premises" proved="true">
                              <proof prover="2"><result status="valid" time="1.88" steps="216"/></proof>
                              </goal>
                              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1.0.2" expl="apply premises" proved="true">
                              <proof prover="2"><result status="valid" time="0.25" steps="210"/></proof>
                              </goal>
                             </transf>
                             </goal>
                             <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1.1" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1.1.0" expl="apply premises" proved="true">
                              <proof prover="2"><result status="valid" time="1.84" steps="216"/></proof>
                              </goal>
                              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1.1.1" expl="apply premises" proved="true">
                              <proof prover="2"><result status="valid" time="1.89" steps="216"/></proof>
                              </goal>
                              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.1.1.2" expl="apply premises" proved="true">
                              <proof prover="2"><result status="valid" time="0.26" steps="210"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.2.2" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.20" steps="209"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.1" expl="equality hypothesis" proved="true">
                          <proof prover="2"><result status="valid" time="0.26" steps="206"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0.1.0.0.0.3" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.27" steps="206"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.27" steps="202"/></proof>
                    </goal>
                    <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.04" steps="205"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="get__ket_value">
                 <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
                  <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.29" steps="203"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.73" steps="203"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.0.2" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(ket_length (pps_apply_basis h x))" arg2="(h_width h)" arg3="in" arg4="H">
                   <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.25" steps="200"/></proof>
                   </goal>
                   <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.0.2.1" expl="equality hypothesis" proved="true">
                   <proof prover="5"><result status="valid" time="6.24"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.64" steps="203"/></proof>
                 </goal>
                 <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
                 <proof prover="1"><result status="valid" time="1.08"/></proof>
                 </goal>
                 <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.3" expl="rewrite premises" proved="true">
                 <transf name="replace" proved="true" arg1="(ket_length (pps_apply_basis h x))" arg2="(h_width h)" arg3="in" arg4="H">
                  <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.3.0" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.27" steps="200"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.0.0.1.0.1.3.1" expl="equality hypothesis" proved="true">
                  <proof prover="5"><result status="valid" time="5.45"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.28" steps="200"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(ket_length (pps_apply_basis h x))" arg2="(h_width h)" arg3="in" arg4="H">
             <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="1.02"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
             <proof prover="5"><result status="valid" time="5.53"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.05" steps="202"/></proof>
         </goal>
         <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
           <transf name="rewrite" proved="true" arg1="scalar_ket_value">
            <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="mult_zero_t">
             <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="get__ket_value">
              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="case" proved="true" arg1="(i =(bv_to_int k))">
               <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
               <proof prover="2"><result status="valid" time="1.96" steps="209"/></proof>
               </goal>
               <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
               <proof prover="2"><result status="valid" time="2.03" steps="209"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.84" steps="207"/></proof>
              </goal>
              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="1"><result status="valid" time="1.16"/></proof>
              </goal>
              <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0.3" expl="rewrite premises" proved="true">
              <transf name="replace" proved="true" arg1="(ket_length (pps_apply_basis h x))" arg2="(h_width h)" arg3="in" arg4="H2">
               <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0.3.0" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="0.29" steps="204"/></proof>
               </goal>
               <goal name="VC pps_apply_basis_decomp.0.1.0.0.0.0.0.2.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
               <proof prover="5"><result status="valid" time="5.47"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_basis_decomp.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.96" steps="202"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_decomp.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="5"><result status="valid" time="5.01"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_ket_l" expl="VC for pps_apply_basis_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_ket_l.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.90" steps="200"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_ket_length" expl="VC for pps_apply_basis_ket_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_ket_length.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC pps_apply_basis_ket_length.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_l_to_ket">
    <goal name="VC pps_apply_basis_ket_length.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.77" steps="200"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_bv" expl="VC for pps_apply_basis_bv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_bv.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
   <goal name="VC pps_apply_basis_bv.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="scalar_eq">
    <goal name="VC pps_apply_basis_bv.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq">
     <goal name="VC pps_apply_basis_bv.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.74" steps="198"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_bv.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.35" steps="196"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_bv.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_apply_basis_bv.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_apply_basis_bv.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="VC pps_apply_basis_bv.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.00"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_bv.0.0.0.2.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.76" steps="200"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis_bv.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.28" steps="196"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_value" expl="VC for pps_apply_basis_value" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_value.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC pps_apply_basis_value.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pps_apply_basis_spec">
    <goal name="VC pps_apply_basis_value.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="mult_eq_t">
     <goal name="VC pps_apply_basis_value.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.25" steps="200"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_value.0.0.0.1" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="sum_eq">
      <goal name="VC pps_apply_basis_value.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_apply_basis_value.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mult_eq_t">
         <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.09" steps="204"/></proof>
         </goal>
         <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="get_indic">
          <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="get_indic">
           <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.1.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.26" steps="206"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="1.06"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
             <proof prover="1"><result status="valid" time="1.05"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_value.0.0.0.1.0.0.0.1.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.27" steps="206"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_basis_value.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.26" steps="200"/></proof>
    </goal>
    <goal name="VC pps_apply_basis_value.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.26" steps="200"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply" expl="VC for pps_apply" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.25" steps="198"/></proof>
  </goal>
  <goal name="VC pps_apply.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.69" steps="198"/></proof>
  </goal>
  <goal name="VC pps_apply.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.93" steps="201"/></proof>
  </goal>
  <goal name="VC pps_apply.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.28" steps="208"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_pps_apply" expl="VC for get_pps_apply" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_pps_apply.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_def">
   <goal name="VC get_pps_apply.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
    <goal name="VC get_pps_apply.0.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="1.70" steps="198"/></proof>
    </goal>
    <goal name="VC get_pps_apply.0.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.34" steps="196"/></proof>
    </goal>
    <goal name="VC get_pps_apply.0.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.27" steps="196"/></proof>
    </goal>
    <goal name="VC get_pps_apply.0.0.3" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC get_pps_apply.0.0.3.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC get_pps_apply.0.0.3.0.0" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(length a = h_width h)">
       <goal name="VC get_pps_apply.0.0.3.0.0.0" expl="asserted formula" proved="true">
       <transf name="instantiate" proved="true" arg1="n_bvs_spec" arg2="(h_width h1)">
        <goal name="VC get_pps_apply.0.0.3.0.0.0.0" expl="asserted formula" proved="true">
        <proof prover="2"><result status="valid" time="1.80" steps="201"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC get_pps_apply.0.0.3.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.38" steps="200"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC get_pps_apply.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.27" steps="196"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC rewrite_pps_apply_basis" expl="VC for rewrite_pps_apply_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rewrite_pps_apply_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_pps_apply">
   <goal name="VC rewrite_pps_apply_basis.0.0" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(0=(h_width h))">
    <goal name="VC rewrite_pps_apply_basis.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC rewrite_pps_apply_basis.0.0.0.0" expl="true case (postcondition)" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0" expl="true case (postcondition)" proved="true">
      <transf name="replace" proved="true" arg1="(choose (n_bvs (h_width h1)))" arg2="(ket_to_bv x)">
       <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(get_ket x (bv_to_int (ket_to_bv x)))" arg2="c_one">
        <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.0" expl="true case (postcondition)" proved="true">
        <proof prover="2"><result status="valid" time="1.73" steps="202"/></proof>
        </goal>
        <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="ket_to_bv_def">
         <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
          <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="ket_to_int_spec1">
            <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="get__ket_value">
             <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="ket_to_int_ket">
              <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="1.80" steps="202"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.76" steps="202"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.0.2.0" proved="true">
               <transf name="apply" proved="true" arg1="ket_to_int_spec4">
                <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.39" steps="200"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.0.2.1" proved="true">
               <transf name="apply" proved="true" arg1="ket_to_int_spec3">
                <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.38" steps="200"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.72" steps="202"/></proof>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.2.0" proved="true">
              <proof prover="2"><result status="valid" time="1.76" steps="202"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.2.1" proved="true">
              <proof prover="2"><result status="valid" time="1.84" steps="202"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.3" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.3.0" proved="true">
              <proof prover="2"><result status="valid" time="1.78" steps="202"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.0.3.1" proved="true">
              <proof prover="0"><result status="valid" time="0.88"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.26" steps="200"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.75" steps="202"/></proof>
          </goal>
          <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.2.0" proved="true">
           <proof prover="2"><result status="valid" time="1.93" steps="202"/></proof>
           </goal>
           <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.0.2.1" proved="true">
           <proof prover="2"><result status="valid" time="1.80" steps="202"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.29" steps="200"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="assert" proved="true" arg1="(mem (ket_to_bv x) (n_bvs (h_width h1)))">
        <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.83"/></proof>
        </goal>
        <goal name="VC rewrite_pps_apply_basis.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="1"><result status="valid" time="1.08"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC rewrite_pps_apply_basis.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.26" steps="200"/></proof>
     </goal>
     <goal name="VC rewrite_pps_apply_basis.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.74" steps="202"/></proof>
     </goal>
     <goal name="VC rewrite_pps_apply_basis.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC rewrite_pps_apply_basis.0.0.0.3.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.84"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC rewrite_pps_apply_basis.0.0.1" expl="false case (postcondition)" proved="true">
    <transf name="instantiate" proved="true" arg1="ket_sum_l_null_but_maybe_one_elt" arg2="(fun (y:bitvec) -&gt; get_ket x (bv_to_int y) *.. pps_apply_basis h1 y),(n_bvs (h_width h1)),(ket_to_bv x),(h_width h1)
">
     <goal name="VC rewrite_pps_apply_basis.0.0.1.0" expl="false case (postcondition)" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0" expl="false case (postcondition)" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0" expl="false case (postcondition)" proved="true">
       <transf name="replace" proved="true" arg1="(get_ket x (bv_to_int (ket_to_bv x)))" arg2="c_one">
        <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.0" expl="false case (postcondition)" proved="true">
        <transf name="apply" proved="true" arg1="set_equal_ket_l">
         <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="exists" proved="true" arg1="(h_width h1)">
          <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.0.0.0.0" proved="true">
           <proof prover="2"><result status="valid" time="1.94" steps="203"/></proof>
           </goal>
           <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.0.0.0.1" proved="true">
           <proof prover="0"><result status="valid" time="0.74"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="3"><result status="valid" time="4.44"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="ket_to_bv_def">
         <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
          <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="ket_to_int_spec1">
            <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
            <transf name="rewrite" proved="true" arg1="get__ket_value">
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
             <transf name="rewrite" proved="true" arg1="ket_to_int_ket">
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.0.0" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="1.91" steps="203"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.82" steps="203"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.0.2.0" proved="true">
               <transf name="apply" proved="true" arg1="ket_to_int_spec4">
                <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.31" steps="200"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.0.2.1" proved="true">
               <transf name="apply" proved="true" arg1="ket_to_int_spec3">
                <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.29" steps="200"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="1.75" steps="203"/></proof>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.2.0" proved="true">
              <proof prover="2"><result status="valid" time="1.80" steps="203"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.2.1" proved="true">
              <proof prover="2"><result status="valid" time="1.76" steps="203"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.3" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.3.0" proved="true">
              <proof prover="2"><result status="valid" time="1.89" steps="203"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.0.3.1" proved="true">
              <proof prover="0"><result status="valid" time="0.71"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.29" steps="200"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.74" steps="203"/></proof>
          </goal>
          <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.2.0" proved="true">
           <proof prover="2"><result status="valid" time="1.81" steps="203"/></proof>
           </goal>
           <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.0.2.1" proved="true">
           <proof prover="2"><result status="valid" time="1.93" steps="203"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC rewrite_pps_apply_basis.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.30" steps="200"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC rewrite_pps_apply_basis.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.97" steps="202"/></proof>
      </goal>
      <goal name="VC rewrite_pps_apply_basis.0.0.1.0.2" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="n_bvs_card">
       <goal name="VC rewrite_pps_apply_basis.0.0.1.0.2.0" expl="rewrite premises" proved="true">
       <proof prover="1"><result status="valid" time="0.87"/></proof>
       </goal>
       <goal name="VC rewrite_pps_apply_basis.0.0.1.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.76" steps="202"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC rewrite_pps_apply_basis.0.0.1.0.3" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.74"/></proof>
      </goal>
      <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="get_ket_scalar">
         <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="zero_mult_t">
          <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="x" arg2="(ket (h_width h1)(ket_to_int x))">
           <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="get__ket_value">
            <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="case" proved="true" arg1="( (bv_to_int e&#39;) = (ket_to_int x))">
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
             <transf name="assert" proved="true" arg1="( e&#39; = ket_to_bv x)">
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
              <transf name="replace" proved="true" arg1="e&#39;" arg2="(int_to_bv (bv_to_int e&#39;) (h_width h3))">
               <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="0"><result status="valid" time="0.70"/></proof>
               </goal>
               <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="1.82" steps="213"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.0.0.1" expl="true case (apply premises)" proved="true">
              <proof prover="2"><result status="valid" time="0.25" steps="210"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
             <proof prover="2"><result status="valid" time="1.82" steps="213"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="1.78" steps="210"/></proof>
            </goal>
            <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <transf name="split_all_full" proved="true" >
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.2.0" proved="true">
             <proof prover="2"><result status="valid" time="1.94" steps="211"/></proof>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.2.1" proved="true">
             <transf name="replace" proved="true" arg1="(h_width h1)" arg2="(ket_length x)">
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.2.1.0" proved="true">
              <proof prover="2"><result status="valid" time="1.94" steps="211"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.2.1.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="1.89" steps="211"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.3" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(h_width h1)" arg2="(length e&#39;)">
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.76" steps="211"/></proof>
              </goal>
              <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.3.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.77" steps="211"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="1.75" steps="211"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC rewrite_pps_apply_basis.0.0.1.0.4.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="0.66"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC rewrite_pps_apply_basis.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.29" steps="198"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC rewrite_pps_apply_basis_rev" expl="VC for rewrite_pps_apply_basis_rev" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC rewrite_pps_apply_basis_rev.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="( pps_apply_basis h x)" arg2="( pps_apply_basis h (ket_to_bv(bv_to_ket x)))">
   <goal name="VC rewrite_pps_apply_basis_rev.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
    <goal name="VC rewrite_pps_apply_basis_rev.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC rewrite_pps_apply_basis_rev.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.72" steps="198"/></proof>
    </goal>
    <goal name="VC rewrite_pps_apply_basis_rev.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.71" steps="198"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC rewrite_pps_apply_basis_rev.0.1" expl="equality hypothesis" proved="true">
   <proof prover="1"><result status="valid" time="0.86"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_decomp" expl="VC for pps_apply_decomp" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_decomp.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_pps_apply">
   <goal name="VC pps_apply_decomp.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_ket_l">
    <goal name="VC pps_apply_decomp.0.0.0" expl="apply premises" proved="true">
    <transf name="exists" proved="true" arg1="(h_width h)">
     <goal name="VC pps_apply_decomp.0.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_apply_decomp.0.0.0.0.0" proved="true">
      <proof prover="2"><result status="valid" time="2.22" steps="198"/></proof>
      </goal>
      <goal name="VC pps_apply_decomp.0.0.0.0.1" proved="true">
      <proof prover="2"><result status="valid" time="2.23" steps="198"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_decomp.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC pps_apply_decomp.0.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
      <goal name="VC pps_apply_decomp.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="get_ket_sum_l_value">
       <goal name="VC pps_apply_decomp.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="sum_eq">
        <goal name="VC pps_apply_decomp.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_apply_decomp.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_decomp.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
           <goal name="VC pps_apply_decomp.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
            <goal name="VC pps_apply_decomp.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.32" steps="202"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_apply_decomp.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="2.08" steps="204"/></proof>
           </goal>
           <goal name="VC pps_apply_decomp.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="2.09" steps="204"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_decomp.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.76" steps="202"/></proof>
       </goal>
       <goal name="VC pps_apply_decomp.0.0.1.0.0.2" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_apply_decomp.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.36" steps="200"/></proof>
        </goal>
        <goal name="VC pps_apply_decomp.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.67"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_decomp.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.96" steps="202"/></proof>
      </goal>
      <goal name="VC pps_apply_decomp.0.0.1.0.2" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_apply_decomp.0.0.1.0.2.0" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.31" steps="200"/></proof>
       </goal>
       <goal name="VC pps_apply_decomp.0.0.1.0.2.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.83"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_decomp.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.27" steps="196"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_scal" expl="VC for pps_apply_scal" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_scal.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_pps_apply">
   <goal name="VC pps_apply_scal.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_pps_apply">
    <goal name="VC pps_apply_scal.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
     <goal name="VC pps_apply_scal.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_eq">
      <goal name="VC pps_apply_scal.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.01" steps="198"/></proof>
      </goal>
      <goal name="VC pps_apply_scal.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.40" steps="196"/></proof>
      </goal>
      <goal name="VC pps_apply_scal.0.0.0.0.2" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_apply_scal.0.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_apply_scal.0.0.0.0.2.0.0" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="0.90"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_scal.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.70" steps="198"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_scal.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.25" steps="196"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_scal.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.74" steps="198"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_add" expl="VC for pps_apply_add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_add.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_pps_apply">
   <goal name="VC pps_apply_add.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_pps_apply">
    <goal name="VC pps_apply_add.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="get_pps_apply">
     <goal name="VC pps_apply_add.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H">
      <goal name="VC pps_apply_add.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_comp_l_rev">
       <goal name="VC pps_apply_add.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq">
        <goal name="VC pps_apply_add.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.96" steps="202"/></proof>
        </goal>
        <goal name="VC pps_apply_add.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.31" steps="200"/></proof>
        </goal>
        <goal name="VC pps_apply_add.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_apply_add.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_add.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="add_ket_l_value">
           <goal name="VC pps_apply_add.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="1.91"/></proof>
           </goal>
           <goal name="VC pps_apply_add.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="1"><result status="valid" time="0.99"/></proof>
           </goal>
           <goal name="VC pps_apply_add.0.0.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.77" steps="204"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_add.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.79" steps="202"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_add.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.29" steps="200"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_add.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.27" steps="200"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_add.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.71"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_sum" expl="VC for pps_apply_sum" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_sum.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.25" steps="200"/></proof>
  </goal>
  <goal name="VC pps_apply_sum.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.84" steps="206"/></proof>
  </goal>
  <goal name="VC pps_apply_sum.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.81"/></proof>
  </goal>
  <goal name="VC pps_apply_sum.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="207"/></proof>
  </goal>
  <goal name="VC pps_apply_sum.4" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC pps_apply_sum.4.0" expl="variant decrease" proved="true">
   <proof prover="2"><result status="valid" time="0.29" steps="205"/></proof>
   </goal>
   <goal name="VC pps_apply_sum.4.1" expl="variant decrease" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_sum.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.83"/></proof>
  </goal>
  <goal name="VC pps_apply_sum.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.92" steps="212"/></proof>
  </goal>
  <goal name="VC pps_apply_sum.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="207"/></proof>
  </goal>
  <goal name="VC pps_apply_sum.8" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC pps_apply_sum.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
    <goal name="VC pps_apply_sum.8.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC pps_apply_sum.8.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC pps_apply_sum.8.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.18" steps="202"/></proof>
     </goal>
     <goal name="VC pps_apply_sum.8.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.30" steps="200"/></proof>
     </goal>
     <goal name="VC pps_apply_sum.8.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_apply_sum.8.0.0.3.0" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.83"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_sum.8.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.95" steps="202"/></proof>
    </goal>
    <goal name="VC pps_apply_sum.8.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.31" steps="200"/></proof>
    </goal>
    <goal name="VC pps_apply_sum.8.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="2.00" steps="202"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_sum.8.1" expl="postcondition" proved="true">
   <transf name="eliminate_let" proved="true" >
    <goal name="VC pps_apply_sum.8.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_apply_sum.8.1.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="ket_sum_l_plus_one" arg2="(remove (choose s) s),(choose s),(fun (e1:a) -&gt; pps_apply h (f @ e1)),l">
      <goal name="VC pps_apply_sum.8.1.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="s" arg2="(add (choose s) (remove (choose s) s))">
       <goal name="VC pps_apply_sum.8.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="H3">
        <goal name="VC pps_apply_sum.8.1.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_apply_add">
         <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="apply" proved="true" arg1="add_ket_l_eq">
           <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="2.02" steps="209"/></proof>
           </goal>
           <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="H">
           </transf>
           </goal>
           <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.91" steps="210"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.99" steps="209"/></proof>
          </goal>
          <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="1.04"/></proof>
          </goal>
          <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.29" steps="206"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.86"/></proof>
         </goal>
         <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.86"/></proof>
         </goal>
         <goal name="VC pps_apply_sum.8.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.29" steps="206"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_sum.8.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="0"><result status="valid" time="0.71"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_id" expl="VC for pps_id" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_id.0" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_id.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_id.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_id.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.71" steps="199"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_id.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_id.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.71" steps="200"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_id.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_id.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="198"/></proof>
  </goal>
  <goal name="VC pps_id.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27" steps="198"/></proof>
  </goal>
  <goal name="VC pps_id.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.75" steps="200"/></proof>
  </goal>
  <goal name="VC pps_id.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.72" steps="200"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_swap" expl="VC for pps_swap" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_swap.0" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_swap.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_swap.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_swap.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.91" steps="205"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_swap.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_swap.3.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.85"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_swap.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_swap.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.33" steps="202"/></proof>
  </goal>
  <goal name="VC pps_swap.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="202"/></proof>
  </goal>
  <goal name="VC pps_swap.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.77" steps="204"/></proof>
  </goal>
  <goal name="VC pps_swap.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.81" steps="204"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_phase" expl="VC for pps_phase" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_phase.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="204"/></proof>
  </goal>
  <goal name="VC pps_phase.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="204"/></proof>
  </goal>
  <goal name="VC pps_phase.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_phase.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_phase.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_phase.4.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.71" steps="207"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_phase.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_phase.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.78" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_phase.6" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_phase.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.34" steps="206"/></proof>
  </goal>
  <goal name="VC pps_phase.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="206"/></proof>
  </goal>
  <goal name="VC pps_phase.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.73" steps="208"/></proof>
  </goal>
  <goal name="VC pps_phase.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.68" steps="208"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_rz" expl="VC for pps_rz" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_rz.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.34" steps="206"/></proof>
  </goal>
  <goal name="VC pps_rz.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="206"/></proof>
  </goal>
  <goal name="VC pps_rz.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="202"/></proof>
  </goal>
  <goal name="VC pps_rz.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27" steps="202"/></proof>
  </goal>
  <goal name="VC pps_rz.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC pps_rz.4.0" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC pps_rz.4.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="1.80" steps="208"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_rz.4.1" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="VC pps_rz.4.1.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="2.05" steps="208"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_rz.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_rz.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.77" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_rz.6" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_rz.6.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.76"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_rz.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.33" steps="206"/></proof>
  </goal>
  <goal name="VC pps_rz.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.28" steps="206"/></proof>
  </goal>
  <goal name="VC pps_rz.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.69" steps="208"/></proof>
  </goal>
  <goal name="VC pps_rz.10" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.93" steps="209"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_hadamard" expl="VC for pps_hadamard" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_hadamard.0" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_hadamard.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_hadamard.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_hadamard.2.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.86" steps="207"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_hadamard.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_hadamard.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.77" steps="208"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_hadamard.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_hadamard.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_hadamard.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27" steps="206"/></proof>
  </goal>
  <goal name="VC pps_hadamard.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.26" steps="206"/></proof>
  </goal>
  <goal name="VC pps_hadamard.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.78" steps="208"/></proof>
  </goal>
  <goal name="VC pps_hadamard.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.72" steps="208"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_cnot" expl="VC for pps_cnot" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_cnot.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="208"/></proof>
  </goal>
  <goal name="VC pps_cnot.1" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_cnot.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_cnot.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_cnot.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="1.87" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_cnot.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_cnot.4.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_cnot.5" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC pps_cnot.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="210"/></proof>
  </goal>
  <goal name="VC pps_cnot.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27" steps="210"/></proof>
  </goal>
  <goal name="VC pps_cnot.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.87" steps="212"/></proof>
  </goal>
  <goal name="VC pps_cnot.9" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="1.65" steps="212"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_id_apply_basis" expl="VC for pps_id_apply_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_id_apply_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
   <goal name="VC pps_id_apply_basis.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
    <goal name="VC pps_id_apply_basis.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC pps_id_apply_basis.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_id_apply_basis.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
       <goal name="VC pps_id_apply_basis.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(make_bv
   ((h_basis_ket pps_id @ getbv x) @ getbv (choose (n_bvs (h_range pps_id))))
   (h_width pps_id))" arg2="x">
         <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <proof prover="2"><result status="valid" time="0.29" steps="212"/></proof>
         </goal>
         <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="set_equal_bv">
          <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.29" steps="212"/></proof>
           </goal>
           <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.95"/></proof>
           </goal>
           <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.30" steps="212"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
            <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.89" steps="218"/></proof>
            </goal>
            <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.00"/></proof>
            </goal>
            <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
             <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="216"/></proof>
             </goal>
             <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.09"/></proof>
             </goal>
             <goal name="VC pps_id_apply_basis.0.0.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.27" steps="216"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_id_apply_basis.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.79" steps="214"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_id_apply_basis.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.26" steps="212"/></proof>
     </goal>
     <goal name="VC pps_id_apply_basis.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.74" steps="214"/></proof>
     </goal>
     <goal name="VC pps_id_apply_basis.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_id_apply_basis.0.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC pps_id_apply_basis.0.0.0.3.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.83"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_id_apply_basis.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="1.40"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_id_apply_basis.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.28" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_swap_apply_basis" expl="VC for pps_swap_apply_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_swap_apply_basis.0" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="x" arg2="(int_to_bv (bv_to_int x) 2)">
   <goal name="VC pps_swap_apply_basis.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_value">
    <goal name="VC pps_swap_apply_basis.0.0.0" expl="assertion" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC pps_swap_apply_basis.0.0.0.0" expl="VC for pps_swap_apply_basis" proved="true">
     <proof prover="1"><result status="valid" time="0.88"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_swap_apply_basis.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.30" steps="212"/></proof>
    </goal>
    <goal name="VC pps_swap_apply_basis.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.88"/></proof>
    </goal>
    <goal name="VC pps_swap_apply_basis.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.28" steps="212"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_swap_apply_basis.0.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="1.79" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_swap_apply_basis.1" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="x" arg2="(int_to_bv (bv_to_int x) 2)">
   <goal name="VC pps_swap_apply_basis.1.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_value">
    <goal name="VC pps_swap_apply_basis.1.0.0" expl="assertion" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC pps_swap_apply_basis.1.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(power 2 ((2 - 1) - 1))" arg2="1">
      <goal name="VC pps_swap_apply_basis.1.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="0.90"/></proof>
      </goal>
      <goal name="VC pps_swap_apply_basis.1.0.0.0.1" expl="equality hypothesis" proved="true">
      <proof prover="2"><result status="valid" time="1.87" steps="217"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_swap_apply_basis.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.34" steps="212"/></proof>
    </goal>
    <goal name="VC pps_swap_apply_basis.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.79"/></proof>
    </goal>
    <goal name="VC pps_swap_apply_basis.1.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.35" steps="212"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_swap_apply_basis.1.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="1.99" steps="217"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_swap_apply_basis.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
   <goal name="VC pps_swap_apply_basis.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
    <goal name="VC pps_swap_apply_basis.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC pps_swap_apply_basis.2.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_swap_apply_basis.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
       <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
          <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="ket_eq">
            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.40" steps="230"/></proof>
            </goal>
            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
            </goal>
            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
               <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="ind_isum_one">
                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                    <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="pps_swap_def1">
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="pps_swap_def1">
                      <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="replace" proved="true" arg1="(power 2 (h_width pps_swap - 1))" arg2="2">
                       <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="H1">
                        <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="H">
                         <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="eliminate_if" proved="true" >
                          <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.38" steps="239"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.40" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.41" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.42" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.43" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.42" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.41" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.40" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.42" steps="235"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.9" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.39" steps="240"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.10" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.40" steps="239"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11" expl="apply premises" proved="true">
                           <transf name="replace" proved="true" arg1="((getbv x @ 1) * power 2 ((h_width pps_swap - 1) - 1))" arg2="1">
                            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.0" expl="apply premises" proved="true">
                            <transf name="replace" proved="true" arg1="(h_width pps_swap - 1)" arg2="1">
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.0.0" expl="apply premises" proved="true">
                             <transf name="rewrite" proved="true" arg1="one_mult_int">
                              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.0.0.0" expl="apply premises" proved="true">
                              <transf name="rewrite" proved="true" arg1="mult_one_int">
                               <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.0.0.0.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.42" steps="240"/></proof>
                               </goal>
                               <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.0.0.0.1" expl="rewrite premises" proved="true">
                               <proof prover="1"><result status="valid" time="0.97"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.0.0.1" expl="rewrite premises" proved="true">
                              <proof prover="2"><result status="valid" time="0.40" steps="238"/></proof>
                              </goal>
                             </transf>
                             </goal>
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.0.1" expl="equality hypothesis" proved="true">
                             <proof prover="2"><result status="valid" time="0.41" steps="238"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.1" expl="equality hypothesis" proved="true">
                            <transf name="replace" proved="true" arg1="((h_width pps_swap - 1) - 1)" arg2="0">
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.1.0" expl="equality hypothesis" proved="true">
                             <transf name="rewrite" proved="true" arg1="mult_one_int">
                              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.1.0.0" expl="equality hypothesis" proved="true">
                              <proof prover="2"><result status="valid" time="0.41" steps="240"/></proof>
                              </goal>
                              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.1.0.1" expl="rewrite premises" proved="true">
                              <proof prover="1"><result status="valid" time="1.15"/></proof>
                              </goal>
                             </transf>
                             </goal>
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.11.1.1" expl="equality hypothesis" proved="true">
                             <proof prover="2"><result status="valid" time="0.38" steps="238"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.12" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.41" steps="236"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.13" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.54" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.14" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.44" steps="240"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.15" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.43" steps="240"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.16" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.40" steps="232"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.17" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.42" steps="236"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.18" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.43" steps="237"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.19" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.42" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.20" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.43" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.21" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.38" steps="236"/></proof>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.22" expl="apply premises" proved="true">
                           <transf name="replace" proved="true" arg1="((getbv x @ (1 - 0)) * 2)" arg2="0">
                            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.22.0" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="mult_one_int">
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.22.0.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.40" steps="238"/></proof>
                             </goal>
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.22.0.1" expl="rewrite premises" proved="true">
                             <proof prover="1"><result status="valid" time="1.28"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.22.1" expl="equality hypothesis" proved="true">
                            <proof prover="2"><result status="valid" time="0.40" steps="236"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23" expl="apply premises" proved="true">
                           <transf name="replace" proved="true" arg1="((getbv x @ (1 - 0)) * 2)" arg2="2">
                            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.0" expl="apply premises" proved="true">
                            <transf name="rewrite" proved="true" arg1="mult_one_int">
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.0.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.41" steps="238"/></proof>
                             </goal>
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.0.1" expl="rewrite premises" proved="true">
                             <proof prover="1"><result status="valid" time="1.26"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1" expl="equality hypothesis" proved="true">
                            <transf name="rewrite" proved="true" arg1="one_mult_int">
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.0" expl="equality hypothesis" proved="true">
                             <proof prover="2"><result status="valid" time="0.39" steps="236"/></proof>
                             </goal>
                             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.1" expl="rewrite premises" proved="true">
                             <transf name="replace" proved="true" arg1="(1-0)" arg2="1">
                              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.1.0" expl="rewrite premises" proved="true">
                              <transf name="rewrite" proved="true" arg1="H5">
                               <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.1.0.0" expl="rewrite premises" proved="true">
                               <transf name="replace" proved="true" arg1="(bv_to_int x)" arg2="3">
                                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.1.0.0.0" expl="rewrite premises" proved="true">
                                <proof prover="2"><result status="valid" time="0.37" steps="236"/></proof>
                                </goal>
                                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.1.0.0.1" expl="equality hypothesis" proved="true">
                                <transf name="assert" proved="true" arg1="(0&lt;= bv_to_int x&lt; power_ 2 2)">
                                 <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.1.0.0.1.0" expl="asserted formula" proved="true">
                                 <proof prover="1"><result status="valid" time="1.22"/></proof>
                                 </goal>
                                 <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.1.0.0.1.1" expl="equality hypothesis" proved="true">
                                 <proof prover="1"><result status="valid" time="1.21"/></proof>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.23.1.1.1" expl="equality hypothesis" proved="true">
                              <proof prover="2"><result status="valid" time="0.44" steps="236"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                       <proof prover="1"><result status="valid" time="1.13"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.46" steps="252"/></proof>
                      </goal>
                      <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
                      </goal>
                      <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.44" steps="252"/></proof>
                      </goal>
                      <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                      </goal>
                      <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.57" steps="252"/></proof>
                     </goal>
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                     </goal>
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.44" steps="252"/></proof>
                     </goal>
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                     </goal>
                     <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.41" steps="234"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.42" steps="252"/></proof>
                </goal>
                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                </goal>
                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.0.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.47" steps="252"/></proof>
                </goal>
                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.1.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
                </goal>
                <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.1.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant3">
             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.45" steps="252"/></proof>
             </goal>
             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
             </goal>
             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant2">
             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.48" steps="252"/></proof>
             </goal>
             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
             </goal>
             <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_swap_apply_basis.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_swap_apply_basis.2.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.03" steps="219"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_swap_apply_basis.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.29" steps="214"/></proof>
     </goal>
     <goal name="VC pps_swap_apply_basis.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.87" steps="219"/></proof>
     </goal>
     <goal name="VC pps_swap_apply_basis.2.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_swap_apply_basis.2.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
        <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.28" steps="214"/></proof>
         </goal>
         <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
            <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.32" steps="236"/></proof>
            </goal>
            <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.28" steps="218"/></proof>
            </goal>
            <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.0.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="218"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
            <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.32" steps="236"/></proof>
            </goal>
            <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.1.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="218"/></proof>
            </goal>
            <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.1.1.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.29" steps="218"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_swap_apply_basis.2.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.28" steps="214"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_swap_apply_basis.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="1.31"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_swap_apply_basis.2.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.28" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_cnot_apply_basis" expl="VC for pps_cnot_apply_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_cnot_apply_basis.0" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="x" arg2="(int_to_bv (bv_to_int x) 2)">
   <goal name="VC pps_cnot_apply_basis.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_value">
    <goal name="VC pps_cnot_apply_basis.0.0.0" expl="assertion" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC pps_cnot_apply_basis.0.0.0.0" expl="VC for pps_cnot_apply_basis" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_cnot_apply_basis.0.0.0.0.0" expl="assertion" proved="true">
      <proof prover="1"><result status="valid" time="0.87"/></proof>
      </goal>
      <goal name="VC pps_cnot_apply_basis.0.0.0.0.1" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(div (bv_to_int x) (power 2 ((2 - 0) - 1)))" arg2="1">
       <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.0" expl="assertion" proved="true">
       <proof prover="2"><result status="valid" time="0.27" steps="212"/></proof>
       </goal>
       <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
       <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv" arg2="in" arg3="H">
        <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
        <transf name="replace" proved="true" arg1="(power 2 ((2 - 0) - 1))" arg2="2">
         <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0" expl="equality hypothesis" proved="true">
         <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="(bv_to_int x),2,1,(mod (bv_to_int x) 2)">
          <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0" expl="equality hypothesis" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0" expl="equality hypothesis" proved="true">
           <transf name="rewrite" proved="true" arg1="Hinst1">
            <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0.0" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="212"/></proof>
            </goal>
            <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="212"/></proof>
            </goal>
            <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
            <transf name="assert" proved="true" arg1="(2&lt;= bv_to_int x &lt;4)">
             <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0.2.0" expl="asserted formula" proved="true">
             <transf name="replace" proved="true" arg1="4" arg2="(power_ 2 2)">
              <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
              <proof prover="1"><result status="valid" time="1.07"/></proof>
              </goal>
              <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="1.97" steps="216"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.29" steps="216"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.0.0.0.3" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.29" steps="212"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="1.76" steps="215"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.28" steps="212"/></proof>
        </goal>
        <goal name="VC pps_cnot_apply_basis.0.0.0.0.1.1.2" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.79"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_cnot_apply_basis.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.31" steps="212"/></proof>
    </goal>
    <goal name="VC pps_cnot_apply_basis.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.69"/></proof>
    </goal>
    <goal name="VC pps_cnot_apply_basis.0.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.26" steps="212"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_cnot_apply_basis.0.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="1.76" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_cnot_apply_basis.1" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="x" arg2="(int_to_bv (bv_to_int x) 2)">
   <goal name="VC pps_cnot_apply_basis.1.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="int_to_bv_value">
    <goal name="VC pps_cnot_apply_basis.1.0.0" expl="assertion" proved="true">
    <transf name="eliminate_if" proved="true" >
     <goal name="VC pps_cnot_apply_basis.1.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="bv_to_int_to_bv">
      <goal name="VC pps_cnot_apply_basis.1.0.0.0.0" expl="assertion" proved="true">
      <transf name="replace" proved="true" arg1="(power 2 ((2 - 1) - 1))" arg2="1">
       <goal name="VC pps_cnot_apply_basis.1.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="2"><result status="valid" time="0.29" steps="212"/></proof>
       </goal>
       <goal name="VC pps_cnot_apply_basis.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="1.83" steps="217"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_cnot_apply_basis.1.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.28" steps="212"/></proof>
      </goal>
      <goal name="VC pps_cnot_apply_basis.1.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.84"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_cnot_apply_basis.1.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.27" steps="212"/></proof>
    </goal>
    <goal name="VC pps_cnot_apply_basis.1.0.2" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.66"/></proof>
    </goal>
    <goal name="VC pps_cnot_apply_basis.1.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.26" steps="212"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_cnot_apply_basis.1.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="1.83" steps="217"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_cnot_apply_basis.2" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
   <goal name="VC pps_cnot_apply_basis.2.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
    <goal name="VC pps_cnot_apply_basis.2.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC pps_cnot_apply_basis.2.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_cnot_apply_basis.2.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
       <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="eliminate_definition" proved="true" >
         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
          <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length">
           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="ket_eq">
            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
            </goal>
            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
            </goal>
            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ind_isum_plus_one">
               <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="ind_isum_one">
                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="split_all_full" proved="true" >
                  <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                   <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                    <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="pps_cnot_def1">
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="pps_cnot_def1">
                      <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="replace" proved="true" arg1="(power 2 (h_width pps_swap - 1))" arg2="2">
                       <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="eliminate_if" proved="true" >
                        <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.41" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.40" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.42" steps="237"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="zero_mult_int">
                          <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.5.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="one_mult_int">
                           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.5.0.0" expl="apply premises" proved="true">
                           <proof prover="1"><result status="valid" time="1.16"/></proof>
                           </goal>
                           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.5.0.1" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.40" steps="239"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.5.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.40" steps="239"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.6" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="one_mult_int">
                          <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="apply premises" proved="true">
                          <transf name="replace" proved="true" arg1="(power 2 (h_width pps_cnot - 1))" arg2="2">
                           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.6.0.0" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="mult_one_int">
                            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.6.0.0.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.40" steps="239"/></proof>
                            </goal>
                            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.6.0.0.1" expl="rewrite premises" proved="true">
                            <proof prover="1"><result status="valid" time="1.14"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.6.0.1" expl="equality hypothesis" proved="true">
                           <proof prover="1"><result status="valid" time="0.99"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.37" steps="237"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="one_mult_int">
                          <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="zero_mult_int">
                           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.0" expl="apply premises" proved="true">
                           <proof prover="1"><result status="valid" time="1.16"/></proof>
                           </goal>
                           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1" expl="rewrite premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="H6">
                            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0" expl="rewrite premises" proved="true">
                            <transf name="assert" proved="true" arg1="(forall b. b= 1 -&gt; mod (1+b) 2 = 0)">
                             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.0" expl="asserted formula" proved="true">
                             <proof prover="2"><result status="valid" time="0.39" steps="239"/></proof>
                             </goal>
                             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="h">
                              <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0" expl="apply premises" proved="true">
                              <transf name="replace" proved="true" arg1="x" arg2="(int_to_bv (bv_to_int x) 2)">
                               <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0" expl="apply premises" proved="true">
                               <transf name="rewrite" proved="true" arg1="int_to_bv_value">
                                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                                <transf name="replace" proved="true" arg1="(bv_to_int x )" arg2="3">
                                 <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                                 <transf name="assert" proved="true" arg1="(forall b. b= 1 -&gt; mod (div 3 b)2 = 1)">
                                  <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
                                  <transf name="split_vc" proved="true" >
                                   <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.0.0.0" expl="asserted formula" proved="true">
                                   <proof prover="2"><result status="valid" time="0.35" steps="240"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                                  <transf name="apply" proved="true" arg1="h">
                                   <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                                   <proof prover="1"><result status="valid" time="0.96"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                 <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
                                 <transf name="assert" proved="true" arg1="( 0 &lt;= bv_to_int x &lt; 4)">
                                  <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.1.0" expl="asserted formula" proved="true">
                                  <transf name="replace" proved="true" arg1="4" arg2="(power_ 2 2)">
                                   <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.1.0.0" expl="asserted formula" proved="true">
                                   <proof prover="1"><result status="valid" time="1.17"/></proof>
                                   </goal>
                                   <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                                   <proof prover="1"><result status="valid" time="1.19"/></proof>
                                   </goal>
                                  </transf>
                                  </goal>
                                  <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
                                  <proof prover="2"><result status="valid" time="0.38" steps="242"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                                <proof prover="2"><result status="valid" time="0.37" steps="238"/></proof>
                                </goal>
                                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                                <proof prover="1"><result status="valid" time="1.04"/></proof>
                                </goal>
                                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.0.3" expl="rewrite premises" proved="true">
                                <proof prover="2"><result status="valid" time="0.38" steps="238"/></proof>
                                </goal>
                               </transf>
                               </goal>
                               <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.0.1.0.1" expl="equality hypothesis" proved="true">
                               <proof prover="1"><result status="valid" time="1.23"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.0.1.1" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.38" steps="237"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.7.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.38" steps="237"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.8" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.9" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.10" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.11" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.12" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.13" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.14" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.40" steps="230"/></proof>
                         </goal>
                         <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.15" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                       <proof prover="1"><result status="valid" time="1.31"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.44" steps="252"/></proof>
                      </goal>
                      <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                      </goal>
                      <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.42" steps="252"/></proof>
                      </goal>
                      <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
                      </goal>
                      <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.50" steps="230"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.43" steps="252"/></proof>
                     </goal>
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
                     </goal>
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.45" steps="252"/></proof>
                     </goal>
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
                     </goal>
                     <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.40" steps="230"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="0.41" steps="230"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.45" steps="252"/></proof>
                </goal>
                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.41" steps="234"/></proof>
                </goal>
                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.0.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.42" steps="234"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.46" steps="252"/></proof>
                </goal>
                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.1.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                </goal>
                <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.1.1.2" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant3">
             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.46" steps="252"/></proof>
             </goal>
             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
             </goal>
             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant2">
             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.45" steps="252"/></proof>
             </goal>
             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.41" steps="234"/></proof>
             </goal>
             <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_cnot_apply_basis.2.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="2.26" steps="219"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_cnot_apply_basis.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.30" steps="214"/></proof>
     </goal>
     <goal name="VC pps_cnot_apply_basis.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.86" steps="219"/></proof>
     </goal>
     <goal name="VC pps_cnot_apply_basis.2.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_cnot_apply_basis.2.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
        <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.29" steps="214"/></proof>
         </goal>
         <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
            <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.32" steps="236"/></proof>
            </goal>
            <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="218"/></proof>
            </goal>
            <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.0.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.29" steps="218"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.1.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
            <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.33" steps="236"/></proof>
            </goal>
            <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.1.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="218"/></proof>
            </goal>
            <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.1.1.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.31" steps="218"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_cnot_apply_basis.2.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.30" steps="214"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_cnot_apply_basis.2.0.1" expl="rewrite premises" proved="true">
    <proof prover="3"><result status="valid" time="1.30"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_cnot_apply_basis.2.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.30" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_phase_apply_basis" expl="VC for pps_phase_apply_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_phase_apply_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
   <goal name="VC pps_phase_apply_basis.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
    <goal name="VC pps_phase_apply_basis.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC pps_phase_apply_basis.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_phase_apply_basis.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="scalar_eq_gen">
       <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="bv_to_ket_eq">
        <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.72" steps="214"/></proof>
         </goal>
         <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.84"/></proof>
         </goal>
         <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.72" steps="214"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.83" steps="218"/></proof>
          </goal>
          <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.87"/></proof>
          </goal>
          <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
           <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.29" steps="216"/></proof>
           </goal>
           <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.90"/></proof>
           </goal>
           <goal name="VC pps_phase_apply_basis.0.0.0.0.0.0.1.0.2.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.75" steps="218"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_phase_apply_basis.0.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.79" steps="214"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_phase_apply_basis.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.82" steps="214"/></proof>
     </goal>
     <goal name="VC pps_phase_apply_basis.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.72"/></proof>
     </goal>
     <goal name="VC pps_phase_apply_basis.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_phase_apply_basis.0.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC pps_phase_apply_basis.0.0.0.3.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.84"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_phase_apply_basis.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.69"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_phase_apply_basis.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.57" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_rz_apply_basis" expl="VC for pps_rz_apply_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_rz_apply_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
   <goal name="VC pps_rz_apply_basis.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
    <goal name="VC pps_rz_apply_basis.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="ket_sum_l_cardone">
     <goal name="VC pps_rz_apply_basis.0.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_rz_apply_basis.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(make_bv
        ((h_basis_ket (pps_rz k) @ getbv x)
         @ getbv (choose (n_bvs (h_range (pps_rz k)))))
        (h_width (pps_rz k)))" arg2="x">
       <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0" expl="VC for pps_rz_apply_basis" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="scalar_c_one_gen">
          <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.84" steps="216"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0.1" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="scalar_eq_gen">
          <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.28" steps="216"/></proof>
          </goal>
          <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.82" steps="218"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0.2" expl="postcondition" proved="true">
         <transf name="apply" proved="true" arg1="scalar_eq_gen">
          <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.27" steps="216"/></proof>
          </goal>
          <goal name="VC pps_rz_apply_basis.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.82" steps="218"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_bv">
        <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.71" steps="214"/></proof>
         </goal>
         <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.80"/></proof>
         </goal>
         <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.69" steps="214"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.80" steps="218"/></proof>
          </goal>
          <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.87"/></proof>
          </goal>
          <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.1.0.2" expl="rewrite premises" proved="true">
          <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
           <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.1.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.27" steps="216"/></proof>
           </goal>
           <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.1.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.85"/></proof>
           </goal>
           <goal name="VC pps_rz_apply_basis.0.0.0.0.0.1.1.0.2.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.78" steps="218"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_rz_apply_basis.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.69" steps="214"/></proof>
     </goal>
     <goal name="VC pps_rz_apply_basis.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.71"/></proof>
     </goal>
     <goal name="VC pps_rz_apply_basis.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_rz_apply_basis.0.0.0.3.0" expl="rewrite premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_ket_l">
       <goal name="VC pps_rz_apply_basis.0.0.0.3.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.84"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_rz_apply_basis.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.64"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_rz_apply_basis.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.57" steps="214"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_hadamard_apply_basis" expl="VC for pps_hadamard_apply_basis" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_hadamard_apply_basis.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
   <goal name="VC pps_hadamard_apply_basis.0.0" expl="postcondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC pps_hadamard_apply_basis.0.0.0" expl="VC for pps_hadamard_apply_basis" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC pps_hadamard_apply_basis.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="scalar_eq_gen">
      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(h_range pps_hadamard)" arg2="1">
       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(h_range pps_hadamard)" arg2="1">
         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(h_width pps_hadamard)" arg2="1">
           <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="eliminate_definition" proved="true" >
            <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
             <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="make_bv_length">
              <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="add_ket_l_eq">
               <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
               </goal>
               <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
                <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="ket_eq">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="ind_isum_one">
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="zero_mult_int">
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="1"><result status="valid" time="1.16"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="1"><result status="valid" time="1.33"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.35" steps="230"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="make_bv_length">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.0" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1" expl="rewrite premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.0" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.0.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.41" steps="238"/></proof>
                       </goal>
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.0.0.1" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="4.31"/></proof>
                       </goal>
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.0.0.2" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.1.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.38" steps="238"/></proof>
                       </goal>
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.1.0.1" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="4.46"/></proof>
                       </goal>
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.1.1.0.2" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.2.0.1.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.35" steps="230"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                <proof prover="1"><result status="valid" time="1.31"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
                <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="make_bv_length">
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="ket_eq">
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.36" steps="230"/></proof>
                   </goal>
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.36" steps="230"/></proof>
                   </goal>
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="ind_isum_one">
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="mult_one_int">
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.19"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="0"><result status="valid" time="3.88"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.36" steps="230"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="make_bv_length">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.06"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
                        <transf name="split_all_full" proved="true" >
                         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                           <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.36" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                           <proof prover="1"><result status="valid" time="1.41"/></proof>
                           </goal>
                           <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                           <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.38" steps="238"/></proof>
                           </goal>
                           <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1.0.1" expl="apply premises" proved="true">
                           <proof prover="1"><result status="valid" time="1.65"/></proof>
                           </goal>
                           <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1.0.2" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1" expl="rewrite premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.38" steps="238"/></proof>
                         </goal>
                         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0.0.1" expl="apply premises" proved="true">
                         <proof prover="1"><result status="valid" time="1.42"/></proof>
                         </goal>
                         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0.0.2" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1" expl="rewrite premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1.0" expl="rewrite premises" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.40" steps="238"/></proof>
                         </goal>
                         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1.0.1" expl="apply premises" proved="true">
                         <proof prover="1"><result status="valid" time="1.42"/></proof>
                         </goal>
                         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1.0.2" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.0.2.0.1.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.0.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.39" steps="238"/></proof>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.0.0.1" expl="apply premises" proved="true">
                     <proof prover="1"><result status="valid" time="1.42"/></proof>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.0.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.1.0" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.1.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.38" steps="238"/></proof>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.1.0.1" expl="apply premises" proved="true">
                     <proof prover="1"><result status="valid" time="1.43"/></proof>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.1.1.0.2" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                <proof prover="0"><result status="valid" time="3.88"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.40" steps="238"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="4.73"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.41" steps="234"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.40" steps="238"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                 <proof prover="0"><result status="valid" time="3.98"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.43" steps="234"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.44" steps="230"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="2"><result status="valid" time="0.35" steps="214"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="0.32" steps="214"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.28" steps="214"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_hadamard_apply_basis.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="0.30" steps="214"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_hadamard_apply_basis.0.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.29" steps="214"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_hadamard_apply_basis.0.0.0.1" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="scalar_eq_gen">
      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(h_range pps_hadamard)" arg2="1">
       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="ket_sum_bitvec_one">
        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(h_range pps_hadamard)" arg2="1">
         <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(h_width pps_hadamard)" arg2="1">
           <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="add_ket_l_eq">
            <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.27" steps="214"/></proof>
            </goal>
            <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="scalar_c_one_gen">
             <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
               <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="ket_eq">
                <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.07"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.61"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="3.62"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.22"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.54" steps="230"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="3.67"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.41"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.43"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.1.0.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="3.95"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.1.1.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.38" steps="234"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.1.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.40" steps="230"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="ind_isum_one">
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="mult_one_int">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="3.85"/></proof>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.33"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.01"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.27"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.64"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.36" steps="230"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length">
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
                     <proof prover="1"><result status="valid" time="0.90"/></proof>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="3.92"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.54"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.81"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.1.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.67"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.1.1.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                   </goal>
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.0.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.0.0.0" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="4.81"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.0.0.1" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="4.33"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.0.0.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.40" steps="234"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.1" expl="rewrite premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.1.0.0" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="4.37"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.1.0.1" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="4.66"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.1.1.0.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.0.0.0.2.0.1.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="0.81"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_eq_gen">
             <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
             <transf name="eliminate_definition" proved="true" >
              <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
               <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="ket_eq">
                <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.44"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.87"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                    <proof prover="1"><result status="valid" time="1.36"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                    <proof prover="1"><result status="valid" time="1.62"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="make_bv_length">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.39" steps="230"/></proof>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                    <proof prover="1"><result status="valid" time="1.30"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.74"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.21"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.1.0.1" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="4.98"/></proof>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.1.1.0.2" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.35" steps="234"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                 <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="ind_isum_one">
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="mult_one_int">
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="3.54"/></proof>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="3.96"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.45"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.43"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.70"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.40" steps="230"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length">
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
                     <proof prover="1"><result status="valid" time="0.93"/></proof>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.33"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.45"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.39" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.41"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="4.47"/></proof>
                        </goal>
                        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.1.1.0.2" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.36" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.0.0.1.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1" expl="rewrite premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.0" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.37" steps="230"/></proof>
                   </goal>
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1" expl="rewrite premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0" expl="rewrite premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0.0.0" expl="apply premises" proved="true">
                      <proof prover="1"><result status="valid" time="1.42"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0.0.1" expl="apply premises" proved="true">
                      <proof prover="1"><result status="valid" time="1.50"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.0.0.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1" expl="rewrite premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1.0.0" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="4.37"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1.0.1" expl="apply premises" proved="true">
                      <proof prover="0"><result status="valid" time="3.64"/></proof>
                      </goal>
                      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.1.1.0.2" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.37" steps="234"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.0.0.0.2.0.1.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.38" steps="230"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.94"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="2"><result status="valid" time="0.30" steps="214"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="0.28" steps="214"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.28" steps="214"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_hadamard_apply_basis.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
       <proof prover="2"><result status="valid" time="0.27" steps="214"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_hadamard_apply_basis.0.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.28" steps="214"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_hadamard_apply_basis.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.27" steps="212"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_seq" expl="VC for pps_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_seq.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.78" steps="214"/></proof>
  </goal>
  <goal name="VC pps_seq.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.71"/></proof>
  </goal>
  <goal name="VC pps_seq.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_seq.2.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_seq.2.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_seq.2.0.0.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="pps&#39;invariant3">
      <goal name="VC pps_seq.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_seq.2.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
        <goal name="VC pps_seq.2.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.80" steps="229"/></proof>
        </goal>
        <goal name="VC pps_seq.2.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.89"/></proof>
        </goal>
        <goal name="VC pps_seq.2.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_seq.2.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
        <goal name="VC pps_seq.2.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.95"/></proof>
        </goal>
        <goal name="VC pps_seq.2.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.97"/></proof>
        </goal>
        <goal name="VC pps_seq.2.0.0.0.0.1.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.29" steps="224"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_seq.2.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_seq.2.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_seq.2.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.93"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_seq.2.0.0.0.1.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_seq.2.0.0.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.91"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_seq.2.0.0.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_seq.2.0.1" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_seq.2.0.1.0" expl="precondition" proved="true">
     <transf name="apply" proved="true" arg1="pps&#39;invariant2">
      <goal name="VC pps_seq.2.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_seq.2.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
        <goal name="VC pps_seq.2.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.91" steps="229"/></proof>
        </goal>
        <goal name="VC pps_seq.2.0.1.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.95"/></proof>
        </goal>
        <goal name="VC pps_seq.2.0.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_seq.2.0.1.0.0.1" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
        <goal name="VC pps_seq.2.0.1.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.79" steps="229"/></proof>
        </goal>
        <goal name="VC pps_seq.2.0.1.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.92"/></proof>
        </goal>
        <goal name="VC pps_seq.2.0.1.0.0.1.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_seq.2.0.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_seq.2.0.1.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_seq.2.0.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.96"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_seq.2.0.1.0.1.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_seq.2.0.1.0.1.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.89"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_seq.2.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_seq.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_seq.3.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_seq.3.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant1">
     <goal name="VC pps_seq.3.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_seq.3.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant1">
       <goal name="VC pps_seq.3.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.83" steps="230"/></proof>
       </goal>
       <goal name="VC pps_seq.3.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.78"/></proof>
       </goal>
       <goal name="VC pps_seq.3.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_seq.3.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_seq.3.0.0.1.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_seq.3.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H4">
        <goal name="VC pps_seq.3.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_seq.3.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.11" steps="226"/></proof>
         </goal>
         <goal name="VC pps_seq.3.0.0.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.31" steps="224"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_seq.3.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_seq.3.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.43" steps="220"/></proof>
      </goal>
      <goal name="VC pps_seq.3.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.47" steps="220"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_seq.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_seq.4.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="ang_add_eq">
    <goal name="VC pps_seq.4.0.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_seq.4.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="pps&#39;invariant">
      <goal name="VC pps_seq.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.00" steps="222"/></proof>
      </goal>
      <goal name="VC pps_seq.4.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.89"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_seq.4.0.1" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_seq.4.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="pps&#39;invariant">
      <goal name="VC pps_seq.4.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_seq.4.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant1">
        <goal name="VC pps_seq.4.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_seq.4.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.89" steps="226"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_seq.4.0.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_seq.4.0.1.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.82"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_seq.4.0.1.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_seq.4.0.1.0.0.0.2.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.32" steps="220"/></proof>
         </goal>
         <goal name="VC pps_seq.4.0.1.0.0.0.2.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_seq.4.0.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_seq.4.0.1.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_seq.4.0.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.90"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_seq.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.27" steps="216"/></proof>
  </goal>
  <goal name="VC pps_seq.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
  </goal>
  <goal name="VC pps_seq.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC pps_seq.7.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_seq.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC pps_seq.8.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_basis_ket_bv_seq" expl="VC for h_basis_ket_bv_seq" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="VC h_basis_ket_bv_seq.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC h_basis_ket_bv_seq.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_bv">
    <goal name="VC h_basis_ket_bv_seq.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec1">
     <goal name="VC h_basis_ket_bv_seq.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec1">
      <goal name="VC h_basis_ket_bv_seq.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="0"><result status="valid" time="0.97"/></proof>
      </goal>
      <goal name="VC h_basis_ket_bv_seq.0.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec1">
       <goal name="VC h_basis_ket_bv_seq.0.0.0.0.1.0" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.33" steps="216"/></proof>
       </goal>
       <goal name="VC h_basis_ket_bv_seq.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.36" steps="216"/></proof>
       </goal>
       <goal name="VC h_basis_ket_bv_seq.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.85" steps="218"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC h_basis_ket_bv_seq.0.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.87"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC h_basis_ket_bv_seq.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.77" steps="218"/></proof>
     </goal>
     <goal name="VC h_basis_ket_bv_seq.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.82" steps="218"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC h_basis_ket_bv_seq.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC h_basis_ket_bv_seq.0.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec">
      <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec">
       <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="pps_seq_spec1">
        <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="pps&#39;invariant1">
         <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec">
           <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant1">
            <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
            </goal>
            <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.89" steps="230"/></proof>
            </goal>
            <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="224"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.82" steps="226"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.29" steps="224"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.92"/></proof>
         </goal>
         <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.86"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.26" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.75" steps="222"/></proof>
       </goal>
       <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.80"/></proof>
       </goal>
       <goal name="VC h_basis_ket_bv_seq.0.0.1.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="1.00"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC h_basis_ket_bv_seq.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.80" steps="222"/></proof>
      </goal>
      <goal name="VC h_basis_ket_bv_seq.0.0.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.79" steps="222"/></proof>
      </goal>
      <goal name="VC h_basis_ket_bv_seq.0.0.1.0.3" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.75"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_angle_bv_seq" expl="VC for h_angle_bv_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC h_angle_bv_seq.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="h_angle_bv_def">
   <goal name="VC h_angle_bv_seq.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC h_angle_bv_seq.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_seq_spec">
     <goal name="VC h_angle_bv_seq.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ang_add_eq">
      <goal name="VC h_angle_bv_seq.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="h_angle_bv_def">
       <goal name="VC h_angle_bv_seq.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant">
        <goal name="VC h_angle_bv_seq.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.28" steps="216"/></proof>
        </goal>
        <goal name="VC h_angle_bv_seq.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.89" steps="222"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_angle_bv_seq.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.27" steps="216"/></proof>
       </goal>
       <goal name="VC h_angle_bv_seq.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.78" steps="218"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC h_angle_bv_seq.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="h_angle_bv_def">
       <goal name="VC h_angle_bv_seq.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant">
        <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
          <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
           <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant1">
            <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.28" steps="220"/></proof>
            </goal>
            <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.85" steps="226"/></proof>
            </goal>
            <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.28" steps="220"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant3">
             <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.96" steps="229"/></proof>
             </goal>
             <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.08" steps="229"/></proof>
             </goal>
             <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.32" steps="224"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant2">
             <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.12" steps="229"/></proof>
             </goal>
             <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1.1.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.81" steps="229"/></proof>
             </goal>
             <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.1.1.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.28" steps="220"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
          </goal>
          <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="2.01" steps="222"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC h_angle_bv_seq.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.94"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_angle_bv_seq.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.81" steps="218"/></proof>
       </goal>
       <goal name="VC h_angle_bv_seq.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.75"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC h_angle_bv_seq.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.28" steps="216"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC h_angle_bv_seq.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.89" steps="218"/></proof>
   </goal>
   <goal name="VC h_angle_bv_seq.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.85" steps="218"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_par" expl="VC for pps_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_par.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.87"/></proof>
  </goal>
  <goal name="VC pps_par.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.87"/></proof>
  </goal>
  <goal name="VC pps_par.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_par.2.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC pps_par.2.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_par.2.0.0.0" expl="VC for pps_par" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_par.2.0.0.0.0" expl="VC for pps_par" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
       <goal name="VC pps_par.2.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.87"/></proof>
       </goal>
       <goal name="VC pps_par.2.0.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.02"/></proof>
       </goal>
       <goal name="VC pps_par.2.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.27" steps="220"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_par.2.0.0.1" expl="VC for pps_par" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_par.2.0.0.1.0" expl="VC for pps_par" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
       <goal name="VC pps_par.2.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_par.2.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_par.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.95"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_par.2.0.0.1.0.0.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_par.2.0.0.1.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.95"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_par.2.0.0.1.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_par.2.0.0.1.0.1.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_par.2.0.0.1.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.99"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_par.2.0.0.1.0.1.1" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_par.2.0.0.1.0.1.1.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.99"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_par.2.0.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.27" steps="220"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_par.2.0.0.2" expl="VC for pps_par" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_par.2.0.0.2.0" expl="VC for pps_par" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
       <goal name="VC pps_par.2.0.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.98"/></proof>
       </goal>
       <goal name="VC pps_par.2.0.0.2.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.93"/></proof>
       </goal>
       <goal name="VC pps_par.2.0.0.2.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_par.2.0.0.3" expl="VC for pps_par" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_par.2.0.0.3.0" expl="VC for pps_par" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
       <goal name="VC pps_par.2.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_par.2.0.0.3.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.91"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_par.2.0.0.3.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_par.2.0.0.3.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.97"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_par.2.0.0.3.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_par.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_par.3.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC pps_par.3.0.0" expl="VC for pps_par" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC pps_par.3.0.0.0" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC pps_par.3.0.0.0.0" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant1">
       <goal name="VC pps_par.3.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_par.3.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.04"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_par.3.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_par.3.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.00"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_par.3.0.0.0.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_par.3.0.0.0.0.2.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.28" steps="220"/></proof>
        </goal>
        <goal name="VC pps_par.3.0.0.0.0.2.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_par.3.0.0.1" expl="precondition" proved="true">
     <proof prover="2"><result status="valid" time="0.31" steps="220"/></proof>
     </goal>
     <goal name="VC pps_par.3.0.0.2" expl="precondition" proved="true">
     <proof prover="2"><result status="valid" time="0.32" steps="220"/></proof>
     </goal>
     <goal name="VC pps_par.3.0.0.3" expl="precondition" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC pps_par.3.0.0.3.0" expl="precondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant1">
       <goal name="VC pps_par.3.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_par.3.0.0.3.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.93"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_par.3.0.0.3.0.1" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_par.3.0.0.3.0.1.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.96"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_par.3.0.0.3.0.2" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_par.3.0.0.3.0.2.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
        </goal>
        <goal name="VC pps_par.3.0.0.3.0.2.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_par.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_par.4.0" expl="precondition" proved="true">
   <transf name="apply" proved="true" arg1="ang_add_eq">
    <goal name="VC pps_par.4.0.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_par.4.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="pps&#39;invariant">
      <goal name="VC pps_par.4.0.0.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_par.4.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.03"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_par.4.0.0.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_par.4.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.01"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_par.4.0.1" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_par.4.0.1.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="pps&#39;invariant">
      <goal name="VC pps_par.4.0.1.0.0" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_par.4.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_par.4.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="H3">
         <goal name="VC pps_par.4.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.92" steps="220"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_par.4.0.1.0.1" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_par.4.0.1.0.1.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_par.4.0.1.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.02"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_par.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.28" steps="214"/></proof>
  </goal>
  <goal name="VC pps_par.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31" steps="214"/></proof>
  </goal>
  <goal name="VC pps_par.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC pps_par.7.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_par.8" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC pps_par.8.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_basis_ket_bv_par" expl="VC for h_basis_ket_bv_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC h_basis_ket_bv_par.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
   <goal name="VC h_basis_ket_bv_par.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_equal_bv">
    <goal name="VC h_basis_ket_bv_par.0.0.0" expl="apply premises" proved="true">
    <proof prover="0"><result status="valid" time="1.15"/></proof>
    </goal>
    <goal name="VC h_basis_ket_bv_par.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC h_basis_ket_bv_par.0.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="concat_value">
      <goal name="VC h_basis_ket_bv_par.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="eliminate_if" proved="true" >
       <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
         <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec1">
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec">
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="pps_par_spec1">
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="pps&#39;invariant1">
              <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.04"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.01"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
               <proof prover="0"><result status="valid" time="1.09"/></proof>
               </goal>
               <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
               <proof prover="1"><result status="valid" time="1.30"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="1.02"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.15"/></proof>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.17"/></proof>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.48"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="2.10" steps="224"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="2.11" steps="224"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.97" steps="232"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.92" steps="232"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.94" steps="232"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.19" steps="232"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.2.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.30" steps="226"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.0.0.2.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="226"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.05" steps="232"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.02" steps="232"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.00" steps="232"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.1.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.02" steps="232"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.2.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="226"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.1.1.0.2.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.30" steps="226"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.97"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
         <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec">
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="pps_par_spec2">
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant1">
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="2.27" steps="227"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="1.95" steps="227"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.0.2" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.0.2.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
              </goal>
              <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.0.2.1" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="1.18"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="1.19"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.87" steps="223"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.86" steps="223"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.0.0.3" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.94"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.90" steps="231"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.86" steps="231"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.88" steps="231"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.1.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.93" steps="231"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.2.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.0.0.2.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.91" steps="231"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.90" steps="231"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.90" steps="231"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.1.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.89" steps="231"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.2" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.2.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.1.1.0.2.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.30" steps="224"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.1.2" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.83"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC h_basis_ket_bv_par.0.0.1.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.04"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC h_basis_ket_bv_par.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.83" steps="216"/></proof>
   </goal>
   <goal name="VC h_basis_ket_bv_par.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.79" steps="216"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_angle_bv_par" expl="VC for h_angle_bv_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC h_angle_bv_par.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="h_angle_bv_def">
   <goal name="VC h_angle_bv_par.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC h_angle_bv_par.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_par_spec">
     <goal name="VC h_angle_bv_par.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="ang_add_eq">
      <goal name="VC h_angle_bv_par.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="h_angle_bv_def">
       <goal name="VC h_angle_bv_par.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant">
        <goal name="VC h_angle_bv_par.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.83" steps="220"/></proof>
        </goal>
        <goal name="VC h_angle_bv_par.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.18" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_angle_bv_par.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.94" steps="216"/></proof>
       </goal>
       <goal name="VC h_angle_bv_par.0.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.89" steps="216"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC h_angle_bv_par.0.0.0.0.1" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="h_angle_bv_def">
       <goal name="VC h_angle_bv_par.0.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps&#39;invariant">
        <goal name="VC h_angle_bv_par.0.0.0.0.1.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.02"/></proof>
        </goal>
        <goal name="VC h_angle_bv_par.0.0.0.0.1.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="1.00"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_angle_bv_par.0.0.0.0.1.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.77"/></proof>
       </goal>
       <goal name="VC h_angle_bv_par.0.0.0.0.1.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.81"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC h_angle_bv_par.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.86" steps="216"/></proof>
   </goal>
   <goal name="VC h_angle_bv_par.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.98" steps="216"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC kron_to_ket_l" expl="VC for kron_to_ket_l" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC kron_to_ket_l.0" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="1.89" steps="216"/></proof>
  </goal>
  <goal name="VC kron_to_ket_l.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="1.10"/></proof>
  </goal>
  <goal name="VC kron_to_ket_l.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="218"/></proof>
  </goal>
  <goal name="VC kron_to_ket_l.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="228"/></proof>
  </goal>
  <goal name="VC kron_to_ket_l.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.42" steps="230"/></proof>
  </goal>
  <goal name="VC kron_to_ket_l.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="230"/></proof>
  </goal>
  <goal name="VC kron_to_ket_l.6" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(rows x *2 = power 2 l *2)">
   <goal name="VC kron_to_ket_l.6.0" expl="asserted formula" proved="true">
   <transf name="replace" proved="true" arg1="(rows (ket 1 0))" arg2="2" arg3="in" arg4="H2">
    <goal name="VC kron_to_ket_l.6.0.0" expl="asserted formula" proved="true">
    <proof prover="0"><result status="valid" time="0.75"/></proof>
    </goal>
    <goal name="VC kron_to_ket_l.6.0.1" expl="equality hypothesis" proved="true">
    <proof prover="2"><result status="valid" time="2.00" steps="234"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC kron_to_ket_l.6.1" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.31" steps="233"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC kron_to_ket_l.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30" steps="232"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_anc" expl="VC for pps_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_anc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.28" steps="212"/></proof>
  </goal>
  <goal name="VC pps_anc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.96" steps="215"/></proof>
  </goal>
  <goal name="VC pps_anc.2" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_anc.2.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_anc.2.0.0" expl="VC for pps_anc" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant3">
     <goal name="VC pps_anc.2.0.0.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_anc.2.0.0.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_anc.2.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.87" steps="227"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_anc.2.0.0.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_anc.2.0.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.84" steps="227"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_anc.2.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_anc.2.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.83" steps="225"/></proof>
      </goal>
      <goal name="VC pps_anc.2.0.0.1.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.83" steps="225"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_anc.2.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_anc.2.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.32" steps="219"/></proof>
      </goal>
      <goal name="VC pps_anc.2.0.0.2.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.29" steps="219"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_anc.2.0.1" expl="VC for pps_anc" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant2">
     <goal name="VC pps_anc.2.0.1.0" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_anc.2.0.1.0.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_anc.2.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.82" steps="227"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_anc.2.0.1.0.1" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_anc.2.0.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.92" steps="227"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_anc.2.0.1.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.84" steps="224"/></proof>
     </goal>
     <goal name="VC pps_anc.2.0.1.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.29" steps="219"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_anc.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_anc.3.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_anc.3.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant1">
     <goal name="VC pps_anc.3.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_anc.3.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.77" steps="227"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_anc.3.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.84" steps="225"/></proof>
     </goal>
     <goal name="VC pps_anc.3.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.30" steps="219"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_anc.4" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_anc.4.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_anc.4.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="pps&#39;invariant">
     <goal name="VC pps_anc.4.0.0.0" expl="apply premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_anc.4.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.74" steps="223"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_anc.4.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.73" steps="221"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_anc.5" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="216"/></proof>
  </goal>
  <goal name="VC pps_anc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="216"/></proof>
  </goal>
  <goal name="VC pps_anc.7" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H3">
   <goal name="VC pps_anc.7.0" expl="postcondition" proved="true">
   <transf name="compute_specified" proved="true" >
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_anc.8" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC pps_anc.8.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H3">
    <goal name="VC pps_anc.8.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_basis_ket_bv_anc" expl="VC for h_basis_ket_bv_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC h_basis_ket_bv_anc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
   <goal name="VC h_basis_ket_bv_anc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
    <goal name="VC h_basis_ket_bv_anc.0.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_bv">
     <goal name="VC h_basis_ket_bv_anc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="hpart_spec4">
       <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length">
        <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.82" steps="218"/></proof>
        </goal>
        <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="pps&#39;invariant3">
          <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.83" steps="226"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.98" steps="226"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.93" steps="226"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.91" steps="226"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.0.2.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="pps&#39;invariant2">
          <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.84" steps="225"/></proof>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.1.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.93" steps="225"/></proof>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.1.1.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.77" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_basis_ket_bv_anc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.33" steps="216"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC h_basis_ket_bv_anc.0.0.0.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
       <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="hpart_value">
        <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
         <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="pps_anc_spec1">
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="case" proved="true" arg1="(0 &lt;= i /\ i &lt; (h_width h - 1))">
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
            <transf name="replace" proved="true" arg1="(if 0 &lt;= i /\ i &lt; (h_width h1 - 1)
     then ((h_basis_ket h1 @ getbv (concat x (make_bv (fun (i1:int) -&gt; 0) 1)))
           @ getbv y)
          @ i
     else 0)" arg2="(((h_basis_ket h1 @ getbv (concat x (make_bv (fun (i1:int) -&gt; 0) 1)))
           @ getbv y)
          @ i)">
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="true case (apply premises)" proved="true">
              <transf name="apply" proved="true" arg1="pps&#39;invariant1">
               <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="concat_value">
                  <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="make_bv_length">
                   <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="assert_make_bv">
                    <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.16" steps="237"/></proof>
                    </goal>
                    <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="0"><result status="valid" time="0.96"/></proof>
                    </goal>
                    <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.31" steps="226"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                   </transf>
                   </goal>
                   <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.29" steps="226"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.29" steps="222"/></proof>
               </goal>
               <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.30" steps="222"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
             <transf name="eliminate_if" proved="true" >
              <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.1.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
               <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="0.31" steps="222"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1" expl="false case (apply premises)" proved="true">
            <transf name="eliminate_if" proved="true" >
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.0" expl="false case (apply premises)" proved="true">
              <proof prover="2"><result status="valid" time="0.30" steps="222"/></proof>
              </goal>
              <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1" expl="false case (apply premises)" proved="true">
              <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H1">
               <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.0" expl="false case (apply premises)" proved="true">
               <proof prover="0"><result status="valid" time="0.94"/></proof>
               </goal>
               <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                  <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.96" steps="231"/></proof>
                  </goal>
                  <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.0.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.13" steps="231"/></proof>
                  </goal>
                  <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.0.0.2" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.28" steps="226"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.1" expl="rewrite premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.1.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                  <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.1.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.97" steps="231"/></proof>
                  </goal>
                  <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.1.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.00" steps="231"/></proof>
                  </goal>
                  <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.1.1.0.2" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.30" steps="226"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.0.1.0.1.2" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="2.13" steps="224"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.00" steps="229"/></proof>
            </goal>
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.89" steps="229"/></proof>
            </goal>
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.0.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="224"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.1.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.00" steps="229"/></proof>
            </goal>
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.1.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.20" steps="229"/></proof>
            </goal>
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.1.1.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.37" steps="224"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.0.0" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.31" steps="220"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.82"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.0" expl="rewrite premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.0.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant3">
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.06" steps="229"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.02" steps="229"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.0.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.1" expl="rewrite premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.1.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="pps&#39;invariant2">
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.1.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.88" steps="229"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.1.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.87" steps="229"/></proof>
             </goal>
             <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.1.1.0.2" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.28" steps="224"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.0.2.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="2.15" steps="222"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="pps&#39;invariant3">
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.89" steps="229"/></proof>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.86" steps="229"/></proof>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.42" steps="224"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="pps&#39;invariant2">
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.15" steps="229"/></proof>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.02" steps="229"/></proof>
          </goal>
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.1.1.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.30" steps="224"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2" expl="rewrite premises" proved="true">
       <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
        <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
        </goal>
        <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.0.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="pps&#39;invariant3">
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="2.06" steps="229"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.99" steps="229"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.27" steps="224"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.1" expl="rewrite premises" proved="true">
         <transf name="split_all_full" proved="true" >
          <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.1.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="pps&#39;invariant2">
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.1.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.82" steps="229"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.1.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.83" steps="229"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.1.1.0.2" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.29" steps="224"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC h_basis_ket_bv_anc.0.0.0.1.0.2.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.79" steps="222"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC h_basis_ket_bv_anc.0.0.1" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="concat_length">
     <goal name="VC h_basis_ket_bv_anc.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_length">
      <goal name="VC h_basis_ket_bv_anc.0.0.1.0.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.43" steps="216"/></proof>
      </goal>
      <goal name="VC h_basis_ket_bv_anc.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.82"/></proof>
      </goal>
      <goal name="VC h_basis_ket_bv_anc.0.0.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.26" steps="216"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC h_basis_ket_bv_anc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.29" steps="216"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC h_basis_ket_bv_anc.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.82" steps="218"/></proof>
   </goal>
   <goal name="VC h_basis_ket_bv_anc.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.80" steps="218"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_basis_ket_bv_anc_" expl="VC for h_basis_ket_bv_anc_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC h_basis_ket_bv_anc_.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_anc">
   <goal name="VC h_basis_ket_bv_anc_.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(concat (hpart x l) (make_bv (fun (i:int) -&gt; 0) 1))" arg2="x">
    <goal name="VC h_basis_ket_bv_anc_.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC h_basis_ket_bv_anc_.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_bv">
     <goal name="VC h_basis_ket_bv_anc_.0.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="concat_length">
      <goal name="VC h_basis_ket_bv_anc_.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="make_bv_length">
       <goal name="VC h_basis_ket_bv_anc_.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.80" steps="222"/></proof>
       </goal>
       <goal name="VC h_basis_ket_bv_anc_.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.88"/></proof>
       </goal>
       <goal name="VC h_basis_ket_bv_anc_.0.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC h_basis_ket_bv_anc_.0.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="concat_value">
       <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.81"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.96"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.99"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.28" steps="228"/></proof>
           </goal>
           <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.79"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.87"/></proof>
         </goal>
         <goal name="VC h_basis_ket_bv_anc_.0.0.1.1.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.75"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC h_basis_ket_bv_anc_.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
   </goal>
   <goal name="VC h_basis_ket_bv_anc_.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.99" steps="222"/></proof>
   </goal>
   <goal name="VC h_basis_ket_bv_anc_.0.3" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.28" steps="220"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_angle_bv_anc" expl="VC for h_angle_bv_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC h_angle_bv_anc.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="h_angle_bv_def">
   <goal name="VC h_angle_bv_anc.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="h_angle_bv_def">
    <goal name="VC h_angle_bv_anc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC h_angle_bv_anc.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_anc_spec">
      <goal name="VC h_angle_bv_anc.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="pps&#39;invariant">
       <goal name="VC h_angle_bv_anc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="concat_value">
          <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="eliminate_if" proved="true" >
           <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
             <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.95" steps="227"/></proof>
             </goal>
             <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="0.93"/></proof>
              </goal>
              <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="0.93"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.39" steps="225"/></proof>
              </goal>
              <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.29" steps="225"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.29" steps="224"/></proof>
            </goal>
            <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.31" steps="225"/></proof>
            </goal>
            <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.32" steps="222"/></proof>
            </goal>
            <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.4" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="224"/></proof>
            </goal>
            <goal name="VC h_angle_bv_anc.0.0.0.0.0.0.0.0.0.0.5" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="223"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC h_angle_bv_anc.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC h_angle_bv_anc.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC h_angle_bv_anc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.28" steps="216"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC h_angle_bv_anc.0.0.1" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="concat_length">
     <goal name="VC h_angle_bv_anc.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="make_bv_length">
      <goal name="VC h_angle_bv_anc.0.0.1.0.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.27" steps="216"/></proof>
      </goal>
      <goal name="VC h_angle_bv_anc.0.0.1.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.88"/></proof>
      </goal>
      <goal name="VC h_angle_bv_anc.0.0.1.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.32" steps="216"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC h_angle_bv_anc.0.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.32" steps="216"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC h_angle_bv_anc.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.92" steps="218"/></proof>
   </goal>
   <goal name="VC h_angle_bv_anc.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.69" steps="218"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC h_angle_bv_anc_" expl="VC for h_angle_bv_anc_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC h_angle_bv_anc_.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="h_angle_bv_anc">
   <goal name="VC h_angle_bv_anc_.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(concat (hpart x l) (make_bv (fun (i:int) -&gt; 0) 1))" arg2="x">
    <goal name="VC h_angle_bv_anc_.0.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC h_angle_bv_anc_.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="set_equal_bv">
     <goal name="VC h_angle_bv_anc_.0.0.1.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="concat_length">
      <goal name="VC h_angle_bv_anc_.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="make_bv_length">
       <goal name="VC h_angle_bv_anc_.0.0.1.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.84" steps="222"/></proof>
       </goal>
       <goal name="VC h_angle_bv_anc_.0.0.1.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.87"/></proof>
       </goal>
       <goal name="VC h_angle_bv_anc_.0.0.1.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC h_angle_bv_anc_.0.0.1.1" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC h_angle_bv_anc_.0.0.1.1.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="concat_value">
       <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0" expl="apply premises" proved="true">
       <transf name="eliminate_if" proved="true" >
        <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
          <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.83"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0.1.0" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.01"/></proof>
           </goal>
           <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0.1.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.05"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0.2" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0.2.0" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.30" steps="228"/></proof>
           </goal>
           <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.0.2.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="0.87"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.78"/></proof>
         </goal>
         <goal name="VC h_angle_bv_anc_.0.0.1.1.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.77"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC h_angle_bv_anc_.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.28" steps="220"/></proof>
   </goal>
   <goal name="VC h_angle_bv_anc_.0.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.71" steps="222"/></proof>
   </goal>
   <goal name="VC h_angle_bv_anc_.0.3" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.32" steps="220"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_pps_apply_equiv" expl="VC for set_pps_apply_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_pps_apply_equiv.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC set_pps_apply_equiv.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pps_apply_equiv_def">
    <goal name="VC set_pps_apply_equiv.0.0.0" expl="VC for set_pps_apply_equiv" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC set_pps_apply_equiv.0.0.0.0" expl="VC for set_pps_apply_equiv" proved="true">
     <proof prover="2"><result status="valid" time="0.41" steps="228"/></proof>
     </goal>
     <goal name="VC set_pps_apply_equiv.0.0.0.1" expl="VC for set_pps_apply_equiv" proved="true">
     <transf name="rewrite" proved="true" arg1="get_pps_apply">
      <goal name="VC set_pps_apply_equiv.0.0.0.1.0" expl="VC for set_pps_apply_equiv" proved="true">
      <transf name="rewrite" proved="true" arg1="get_pps_apply">
       <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0" expl="VC for set_pps_apply_equiv" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
        <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="4.11"/></proof>
        </goal>
        <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.43" steps="230"/></proof>
        </goal>
        <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.41" steps="230"/></proof>
        </goal>
        <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0.3" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0.3.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_eq_gen">
           <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0.3.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="4.38"/></proof>
           </goal>
           <goal name="VC set_pps_apply_equiv.0.0.0.1.0.0.3.0.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.38" steps="232"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC set_pps_apply_equiv.0.0.0.1.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.40" steps="230"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_pps_apply_equiv.0.0.0.1.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.42" steps="230"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC set_pps_apply_equiv_sim" expl="VC for set_pps_apply_equiv_sim" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC set_pps_apply_equiv_sim.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_pps_apply_equiv">
   <goal name="VC set_pps_apply_equiv_sim.0.0" expl="apply premises" proved="true">
   <proof prover="2"><result status="valid" time="0.34" steps="214"/></proof>
   </goal>
   <goal name="VC set_pps_apply_equiv_sim.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC set_pps_apply_equiv_sim.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
     <goal name="VC set_pps_apply_equiv_sim.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
      <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_eq_gen">
       <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
        <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.85" steps="218"/></proof>
        </goal>
        <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.33" steps="216"/></proof>
        </goal>
        <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.30" steps="216"/></proof>
        </goal>
        <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_eq_gen">
           <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="bv_to_ket_eq">
            <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.90"/></proof>
            </goal>
            <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
              <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
               <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="H5">
                <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.86" steps="227"/></proof>
                </goal>
                <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="1.88" steps="227"/></proof>
                </goal>
                <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.0.2" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="0.78"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
               <transf name="split_all_full" proved="true" >
                <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.87" steps="232"/></proof>
                   </goal>
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="2.12" steps="232"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.89" steps="232"/></proof>
                   </goal>
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.90" steps="232"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.2.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.30" steps="226"/></proof>
                   </goal>
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.0.0.2.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.31" steps="226"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="2.01" steps="232"/></proof>
                   </goal>
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.85" steps="232"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.93" steps="232"/></proof>
                   </goal>
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.1.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.98" steps="232"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.2" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.2.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.31" steps="226"/></proof>
                   </goal>
                   <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.1.1.0.2.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.32" steps="226"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="0.90"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1" expl="rewrite premises" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                 <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.87" steps="232"/></proof>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.07" steps="232"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.61" steps="232"/></proof>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.86" steps="232"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.2.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.52" steps="226"/></proof>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.0.0.2.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.48" steps="226"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                 <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.37" steps="232"/></proof>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.38" steps="232"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.1.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.16" steps="232"/></proof>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.1.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.89" steps="232"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.2" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.2.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.32" steps="226"/></proof>
                  </goal>
                  <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.1.1.0.2.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.0.1.0.2" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="0.89"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="H2">
            <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
            </transf>
            </goal>
            <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.1.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="1.93" steps="223"/></proof>
            </goal>
            <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.0.3.0.0.1.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="2.00" steps="223"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.30" steps="216"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC set_pps_apply_equiv_sim.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.33" steps="216"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC set_pps_apply_equiv_sim.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.30" steps="216"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_pps_apply_equiv" expl="VC for get_pps_apply_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_pps_apply_equiv.0" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC get_pps_apply_equiv.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pps_apply_equiv_def" arg2="in" arg3="H1">
    <goal name="VC get_pps_apply_equiv.0.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC get_pps_apply_equiv.0.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="H1">
      <goal name="VC get_pps_apply_equiv.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC get_pps_apply_basis_equiv" expl="VC for get_pps_apply_basis_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC get_pps_apply_basis_equiv.0" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(pps_apply_basis h1 x)" arg2="(pps_apply h1 (bv_to_ket x))">
   <goal name="VC get_pps_apply_basis_equiv.0.0" expl="postcondition" proved="true">
   <transf name="replace" proved="true" arg1="(pps_apply_basis h2 x)" arg2="(pps_apply h2 (bv_to_ket x))">
    <goal name="VC get_pps_apply_basis_equiv.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.77"/></proof>
    </goal>
    <goal name="VC get_pps_apply_basis_equiv.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
     <goal name="VC get_pps_apply_basis_equiv.0.0.1.0" expl="equality hypothesis" proved="true">
     <proof prover="0"><result status="valid" time="0.81"/></proof>
     </goal>
     <goal name="VC get_pps_apply_basis_equiv.0.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.83" steps="218"/></proof>
     </goal>
     <goal name="VC get_pps_apply_basis_equiv.0.0.1.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.82" steps="218"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC get_pps_apply_basis_equiv.0.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
    <goal name="VC get_pps_apply_basis_equiv.0.1.0" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.81"/></proof>
    </goal>
    <goal name="VC get_pps_apply_basis_equiv.0.1.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.81" steps="218"/></proof>
    </goal>
    <goal name="VC get_pps_apply_basis_equiv.0.1.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.77" steps="218"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC reflexive_pps_apply_equiv" expl="VC for reflexive_pps_apply_equiv" proved="true">
 <proof prover="2"><result status="valid" time="0.40" steps="210"/></proof>
 </goal>
 <goal name="VC commut_pps_apply_equiv" expl="VC for commut_pps_apply_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC commut_pps_apply_equiv.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.78" steps="214"/></proof>
  </goal>
  <goal name="VC commut_pps_apply_equiv.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.81" steps="218"/></proof>
  </goal>
  <goal name="VC commut_pps_apply_equiv.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.36" steps="214"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC transitive_pps_apply_equiv" expl="VC for transitive_pps_apply_equiv" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC transitive_pps_apply_equiv.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.76"/></proof>
  </goal>
  <goal name="VC transitive_pps_apply_equiv.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.87"/></proof>
  </goal>
  <goal name="VC transitive_pps_apply_equiv.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30" steps="216"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_seq" expl="VC for pps_apply_basis_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_seq.0" expl="assertion" proved="true">
  <transf name="instantiate" proved="true" arg1="pps_apply_basis_bv" arg2="h1,x">
   <goal name="VC pps_apply_basis_seq.0.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="Hinst">
    <goal name="VC pps_apply_basis_seq.0.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_apply_scal">
     <goal name="VC pps_apply_basis_seq.0.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_sum">
      <goal name="VC pps_apply_basis_seq.0.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
       <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0" expl="assertion" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq">
        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.10" steps="218"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.32" steps="216"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="scalar_assoc_rev">
           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_eq">
            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="pps_apply_scal">
             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="scalar_eq">
              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="pps_apply_basis_def">
                <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="scalar_eq">
                 <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                  <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.03" steps="220"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.32" steps="218"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.45" steps="218"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
                     <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="scalar_eq_gen">
                      <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="bv_to_ket_eq">
                       <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="make_bv_length">
                        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="split_all_full" proved="true" >
                         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec1">
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.35" steps="220"/></proof>
                          </goal>
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.89" steps="222"/></proof>
                          </goal>
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.84" steps="222"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <transf name="split_all_full" proved="true" >
                         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="1.86" steps="230"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="1.86" steps="230"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="1.86" steps="230"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="1.84" steps="230"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.2.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.43" steps="224"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.0.0.2.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.23" steps="230"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.24" steps="230"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.36" steps="230"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.1.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.37" steps="230"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.31" steps="224"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1.1.0.2.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.90" steps="222"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                         <proof prover="1"><result status="valid" time="1.35"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                         <transf name="split_all_full" proved="true" >
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.0.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.23" steps="234"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.0.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.43" steps="234"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.1.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.36" steps="234"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.1.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.00" steps="234"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.2.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.38" steps="228"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.0.0.2.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.0.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="1.98" steps="234"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.0.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="1.99" steps="234"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.1.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.03" steps="234"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.1.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="1.99" steps="234"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.2" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.2.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.29" steps="228"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1.1.0.2.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.45" steps="228"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.0" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.31" steps="224"/></proof>
                          </goal>
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.0" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
                           </goal>
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1" expl="rewrite premises" proved="true">
                           <transf name="split_all_full" proved="true" >
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0" expl="rewrite premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.0" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.0.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.01" steps="234"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.0.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.01" steps="234"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.1" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.1.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.16" steps="234"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.1.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.87" steps="234"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.2" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.2.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.0.0.2.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.35" steps="228"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1" expl="rewrite premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.0" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.0.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.04" steps="234"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.0.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.03" steps="234"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.1" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.1.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.13" steps="234"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.1.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.15" steps="234"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.2" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.2.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.1.1.0.2.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2.1.2" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.94" steps="226"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="apply premises" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0" expl="apply premises" proved="true">
                       <transf name="replace" proved="true" arg1="((h_angle h2
    @ getbv (make_bv ((h_basis_ket h1 @ getbv x) @ getbv a1) (h_width h1)))
   @ getbv a)" arg2="((h_angle h2 @ ((h_basis_ket h1 @ getbv x) @ getbv a1)) @ getbv a)">
                        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.0" expl="apply premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.29"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                        <transf name="apply" proved="true" arg1="pps&#39;invariant">
                         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
                           </goal>
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1" expl="rewrite premises" proved="true">
                           <transf name="split_all_full" proved="true" >
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0" expl="rewrite premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.0" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.92" steps="234"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.0.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.19" steps="234"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.1" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.91" steps="234"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.1.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.91" steps="234"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.2" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.2.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.31" steps="228"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.0.0.2.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.31" steps="228"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0" expl="rewrite premises" proved="true">
                             <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.0" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.17" steps="234"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="2.19" steps="234"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.1" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.98" steps="234"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.1.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="1.94" steps="234"/></proof>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.2" expl="apply premises" proved="true">
                              <transf name="split_vc" proved="true" >
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.2.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.31" steps="228"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.1.1.0.2.1" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.31" steps="228"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.0.0.2" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.34" steps="224"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.0.0.3.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.38" steps="220"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
                 <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.14" steps="220"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <transf name="split_all_full" proved="true" >
                 <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec1">
                  <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.34" steps="218"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.48" steps="218"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.04" steps="220"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="2.19" steps="220"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.1" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
              <goal name="VC pps_apply_basis_seq.0.0.0.0.0.0.2.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="1.85" steps="220"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_basis_seq.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.86" steps="218"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_seq.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="3.34" steps="218"/></proof>
      </goal>
      <goal name="VC pps_apply_basis_seq.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_apply_basis_seq.0.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_apply_basis_seq.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
        <transf name="apply" proved="true" arg1="scalar_ket_l">
         <goal name="VC pps_apply_basis_seq.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
          <goal name="VC pps_apply_basis_seq.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC pps_apply_basis_seq.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_spec1">
            <goal name="VC pps_apply_basis_seq.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.75" steps="218"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_seq.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.46" steps="218"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_seq.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="3.20" steps="220"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_seq.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.62" steps="216"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_basis_seq.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.99" steps="218"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_basis_seq.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_basis_seq.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_bv">
   <goal name="VC pps_apply_basis_seq.1.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_apply_basis_seq.1.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_seq_spec2">
     <goal name="VC pps_apply_basis_seq.1.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="ket_sum_bin_comp_rev" arg2="(fun h t -&gt;
     ang_exp ( ang_add (h_angle_bv h1 x h) (h_angle_bv h2 (h_basis_ket_bv h1 x h) t))
      *.. bv_to_ket (
              h_basis_ket_bv h2 (h_basis_ket_bv h1 x h) t)),(h_width (pps_seq h1 h2)),(h_range h2),(h_range h1)
">
      <goal name="VC pps_apply_basis_seq.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="H">
       <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
        <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs (h_range h1 + h_range h2))
       (fun (y:bitvec) -&gt;
         ang_exp (h_angle_bv (pps_seq h1 h2) x y)
         *.. bv_to_ket (h_basis_ket_bv (pps_seq h1 h2) x y))
       (h_width (pps_seq h1 h2)))" arg2="(ket_sum_l (n_bvs (h_range h2 + h_range h1))
  (fun (bv:bitvec) -&gt;
    ang_exp
    (ang_add (h_angle_bv h1 x (hpart bv (h_range h1)))
     (h_angle_bv h2 (h_basis_ket_bv h1 x (hpart bv (h_range h1)))
      (tpart bv (h_range h1))))
    *.. bv_to_ket
        (h_basis_ket_bv h2 (h_basis_ket_bv h1 x (hpart bv (h_range h1)))
         (tpart bv (h_range h1))))
  (h_width (pps_seq h1 h2)))">
         <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="Hinst">
          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
           <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
            <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="3.83" steps="218"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.86" steps="216"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.62" steps="219"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
               <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
                <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
                 <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                  <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.87" steps="220"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.30" steps="218"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.2" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.08" steps="221"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="scalar_assoc">
                     <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="scalar_assoc">
                      <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="scalar_assoc">
                       <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="scalar_eq_gen">
                        <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.32" steps="220"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
                        <transf name="replace" proved="true" arg1="(pow_inv_sqrt_2 (h_range h1 + h_range h2))" arg2="(pow_inv_sqrt_2 (h_range h1 )*. pow_inv_sqrt_2 ( h_range h2))">
                         <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="ang_exp_add">
                          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.47" steps="220"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.3.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                         <proof prover="2"><result status="valid" time="3.03" steps="223"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="3.65" steps="221"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
                <proof prover="2"><result status="valid" time="3.52" steps="221"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="3.15" steps="220"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="2.98" steps="218"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="3.31" steps="218"/></proof>
          </goal>
          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="4.20" steps="218"/></proof>
          </goal>
          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="3.97" steps="218"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.91" steps="218"/></proof>
          </goal>
          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.58" steps="216"/></proof>
          </goal>
          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.32" steps="216"/></proof>
          </goal>
          <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1.3.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1.3.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_eq_gen">
             <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1.3.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.16"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_seq.1.0.0.0.0.0.0.1.3.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="1.37"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_basis_seq.1.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.42" steps="216"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis_seq.1.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="2.13" steps="218"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_seq" expl="VC for pps_apply_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_seq.0" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="get_pps_apply">
   <goal name="VC pps_apply_seq.0.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="get_pps_apply" arg2="h1,x">
    <goal name="VC pps_apply_seq.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC pps_apply_seq.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_sum">
      <goal name="VC pps_apply_seq.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="VC pps_apply_seq.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="2.22" steps="218"/></proof>
       </goal>
       <goal name="VC pps_apply_seq.0.0.0.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(h_width (pps_seq h1 h2))" arg2="(h_width h1)">
        <goal name="VC pps_apply_seq.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
        </goal>
        <goal name="VC pps_apply_seq.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="1.81" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_seq.0.0.0.0.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.81" steps="218"/></proof>
       </goal>
       <goal name="VC pps_apply_seq.0.0.0.0.0.3" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_apply_seq.0.0.0.0.0.3.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="pps_apply_basis_seq">
          <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="pps_apply_scal">
           <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
           </transf>
           </goal>
           <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="split_all_full" proved="true" >
            <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.0.1.0" expl="rewrite premises" proved="true">
            <transf name="replace" proved="true" arg1="(h_width h2)" arg2="(h_width h1)">
             <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.0.1.0.0" expl="rewrite premises" proved="true">
             <transf name="apply" proved="true" arg1="pps_apply_basis_spec1">
              <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.0.1.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.90"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="0.31" steps="218"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="0.85"/></proof>
          </goal>
          <goal name="VC pps_apply_seq.0.0.0.0.0.3.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="0.32" steps="218"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_seq.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.10" steps="218"/></proof>
      </goal>
      <goal name="VC pps_apply_seq.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_apply_seq.0.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_apply_seq.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
        <proof prover="5"><result status="valid" time="1.20"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_seq.0.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_seq.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.32" steps="216"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_seq.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.71"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_seq_pred" expl="VC for pps_seq_pred" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_seq_pred.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.29" steps="216"/></proof>
  </goal>
  <goal name="VC pps_seq_pred.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30" steps="220"/></proof>
  </goal>
  <goal name="VC pps_seq_pred.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30" steps="221"/></proof>
  </goal>
  <goal name="VC pps_seq_pred.3" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H11">
   <goal name="VC pps_seq_pred.3.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H7">
    <goal name="VC pps_seq_pred.3.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_seq_pred.3.1" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_seq_pred.3.1.0" expl="rewrite premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_seq_pred.3.1.0.0" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.94" steps="232"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_seq_pred.3.1.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.92" steps="232"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_seq_pred.3.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_seq_pred.3.2.0" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="2.25" steps="232"/></proof>
    </goal>
    <goal name="VC pps_seq_pred.3.2.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.95"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_seq_pred.3.3" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.39" steps="226"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_seq_pred.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H9">
   <goal name="VC pps_seq_pred.4.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H5">
    <goal name="VC pps_seq_pred.4.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_seq_pred.4.1" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_seq_pred.4.1.0" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.90"/></proof>
    </goal>
    <goal name="VC pps_seq_pred.4.1.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.93"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_seq_pred.4.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_seq_pred.4.2.0" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.83" steps="228"/></proof>
    </goal>
    <goal name="VC pps_seq_pred.4.2.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.77" steps="228"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_seq_pred.5" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC pps_seq_pred.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pps_apply_equiv_def" arg2="in" arg3="H1">
    <goal name="VC pps_seq_pred.5.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_seq_pred.5.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="H1">
      <goal name="VC pps_seq_pred.5.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="1"><result status="valid" time="1.19"/></proof>
      </goal>
      <goal name="VC pps_seq_pred.5.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.43" steps="239"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_par" expl="VC for pps_apply_basis_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_par.0" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_bv">
   <goal name="VC pps_apply_basis_par.0.0" expl="assertion" proved="true">
   <transf name="apply" proved="true" arg1="scalar_eq">
    <goal name="VC pps_apply_basis_par.0.0.0" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq">
     <goal name="VC pps_apply_basis_par.0.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="1.83" steps="214"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_par.0.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.45" steps="212"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_par.0.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_apply_basis_par.0.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_apply_basis_par.0.0.0.2.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="VC pps_apply_basis_par.0.0.0.2.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.91"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_par.0.0.0.2.0.0.1" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.85"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis_par.0.1" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.80"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_basis_par.1" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_bv">
   <goal name="VC pps_apply_basis_par.1.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="ket_sum_bin_comp_rev" arg2="(fun h t -&gt; ang_exp (ang_add (h_angle_bv h1 (hpart x (h_width h1)) h) (h_angle_bv h2 (tpart x (h_width h1))  t))
                       *.. bv_to_ket (concat (h_basis_ket_bv h1   (hpart x (h_width h1)) h)
                                                      (h_basis_ket_bv h2   (tpart x (h_width h1)) t))),(h_width h1 + h_width h2),(h_range h2),(h_range h1)
">
    <goal name="VC pps_apply_basis_par.1.0.0" expl="postcondition" proved="true">
    <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs (h_range (pps_par h1 h2)))
       (fun (y:bitvec) -&gt;
         ang_exp (h_angle_bv (pps_par h1 h2) x y)
         *.. bv_to_ket (h_basis_ket_bv (pps_par h1 h2) x y))
       (h_width (pps_par h1 h2)))" arg2="( ket_sum_l (n_bvs (h_range h2 + h_range h1))
  (fun (bv:bitvec) -&gt;
    ((fun (h:bitvec) (t:bitvec) -&gt;
       ang_exp
       (ang_add (h_angle_bv h1 (hpart x (h_width h1)) h)
        (h_angle_bv h2 (tpart x (h_width h1)) t))
       *.. bv_to_ket
           (concat (h_basis_ket_bv h1 (hpart x (h_width h1)) h)
            (h_basis_ket_bv h2 (tpart x (h_width h1)) t)))
     @ hpart bv (h_range h1))
    @ tpart bv (h_range h1))
  (h_width h1 + h_width h2))">
     <goal name="VC pps_apply_basis_par.1.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst">
      <goal name="VC pps_apply_basis_par.1.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_apply_basis_bv">
       <goal name="VC pps_apply_basis_par.1.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
        <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
         <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
          <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
          <transf name="rewrite" proved="true" arg1="ket_sum_scalar_rev_l">
           <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0" expl="postcondition" proved="true">
           <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
            <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.91"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.30" steps="214"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="add_eq">
             <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.30" steps="214"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
             <transf name="assert" proved="true" arg1="(is_a_ket_l (pps_apply_basis h2 (tpart x (h_width h1))) (h_width h2))">
              <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.2.1.0" expl="asserted formula" proved="true">
              <transf name="split_all_full" proved="true" >
               <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.2.1.0.0" expl="asserted formula" proved="true">
               <transf name="apply" proved="true" arg1="pps_apply_basis_spec1">
                <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="1.20"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.2.1.1" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="0.81"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_apply_basis_bv">
               <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
               <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr_r">
                <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_r_rew">
                 <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="scalar_assoc">
                  <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="scalar_eq_gen">
                   <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
                    <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.95" steps="218"/></proof>
                    </goal>
                    <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.37" steps="216"/></proof>
                    </goal>
                    <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                    <transf name="replace" proved="true" arg1="(h_width h1 + h_width h2)" arg2="(h_width h2 + h_width h1)">
                     <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="add_eq">
                      <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.41" steps="216"/></proof>
                      </goal>
                      <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.0.1" expl="apply premises" proved="true">
                      <transf name="assert" proved="true" arg1="(is_a_ket_l (ang_exp (h_angle_bv h1 (hpart x (h_width h1)) a)
     *.. bv_to_ket (h_basis_ket_bv h1 (hpart x (h_width h1)) a)) (h_width h1))">
                       <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.0.1.0" expl="asserted formula" proved="true">
                       <transf name="apply" proved="true" arg1="scalar_ket_l">
                        <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                         <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.0.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.88" steps="219"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.0.1.1" expl="apply premises" proved="true">
                       <proof prover="0"><result status="valid" time="0.95"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
                     <proof prover="2"><result status="valid" time="0.33" steps="216"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
                       <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr_r">
                        <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="scalar_assoc">
                         <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="apply" proved="true" arg1="scalar_eq_gen">
                          <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.31" steps="221"/></proof>
                          </goal>
                          <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.47" steps="221"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                   <proof prover="0"><result status="valid" time="0.81"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                   <transf name="apply" proved="true" arg1="scalar_ket_l">
                    <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                     <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="1"><result status="valid" time="1.35"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <transf name="assert" proved="true" arg1="(is_a_ket_l (ang_exp (h_angle_bv h1 (hpart x (h_width h1)) a)
   *.. bv_to_ket (h_basis_ket_bv h1 (hpart x (h_width h1)) a)) (h_width h1))">
                  <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.2.0" expl="asserted formula" proved="true">
                  <transf name="apply" proved="true" arg1="scalar_ket_l">
                   <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                    <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                    <transf name="split_all_full" proved="true" >
                     <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.22" steps="219"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.20" steps="221"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.0.0.3" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.15" steps="219"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.0.3.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="1"><result status="valid" time="1.01"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(ket_length (pps_apply_basis h2 (tpart x (h_width h1))))" arg2="(h_width h2)">
            <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="2.29" steps="216"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
            <transf name="assert" proved="true" arg1="(is_a_ket_l  (pps_apply_basis h2 (tpart x (h_width h1)))  (h_width h2))">
             <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
              <transf name="apply" proved="true" arg1="pps_apply_basis_spec1">
               <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
               <proof prover="1"><result status="valid" time="1.49"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="2.20" steps="219"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.97" steps="216"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_ket_l">
            <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.95" steps="219"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="assert" proved="true" arg1="(is_a_ket_l (pps_apply_basis h2 (tpart x (h_width h1))) (h_width h2))">
          <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.2.0" expl="asserted formula" proved="true">
          <transf name="split_all_full" proved="true" >
           <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
           <transf name="apply" proved="true" arg1="pps_apply_basis_spec1">
            <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="1"><result status="valid" time="1.18"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="2.24" steps="219"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_par.1.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.90" steps="217"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_basis_par.1.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="1.92" steps="217"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_par.1.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.13" steps="216"/></proof>
      </goal>
      <goal name="VC pps_apply_basis_par.1.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.16" steps="216"/></proof>
      </goal>
      <goal name="VC pps_apply_basis_par.1.0.0.0.3" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="2.16" steps="216"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_basis_par.1.0.0.1" expl="equality hypothesis" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_apply_basis_par.1.0.0.1.0" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
       <goal name="VC pps_apply_basis_par.1.0.0.1.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="2.01" steps="217"/></proof>
       </goal>
       <goal name="VC pps_apply_basis_par.1.0.0.1.0.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="0.75"/></proof>
       </goal>
       <goal name="VC pps_apply_basis_par.1.0.0.1.0.2" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="2.04" steps="217"/></proof>
       </goal>
       <goal name="VC pps_apply_basis_par.1.0.0.1.0.3" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_apply_basis_par.1.0.0.1.0.3.0" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_apply_basis_par.1.0.0.1.0.3.0.0" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.13"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis_par.1.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.70" steps="216"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_par" expl="VC for pps_apply_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_par.0" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_sum_bin_comp" arg2="(fun (x1 y1:bitvec) -&gt;    get_ket (kronecker x y) ( bv_to_int x1 * (power_ 2 (h_width h2)) + bv_to_int y1 )
    *.. pps_apply_basis (pps_par h1 h2) (concat x1 y1)),(h_width h1 + h_width h2),(h_width h2),(h_width h1)">
   <goal name="VC pps_apply_par.0.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="get_pps_apply">
    <goal name="VC pps_apply_par.0.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="get_pps_apply">
     <goal name="VC pps_apply_par.0.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="get_pps_apply">
      <goal name="VC pps_apply_par.0.0.0.0.0" expl="postcondition" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker
    (ket_sum_l (n_bvs (h_width h1))
     (fun (y1:bitvec) -&gt; get_ket x (bv_to_int y1) *.. pps_apply_basis h1 y1)
     (h_width h1))
    (ket_sum_l (n_bvs (h_width h2))
     (fun (y1:bitvec) -&gt; get_ket y (bv_to_int y1) *.. pps_apply_basis h2 y1)
     (h_width h2)))" arg2="( ket_sum_l (n_bvs (h_width h1))
  (fun (bvy:bitvec) -&gt;
    ket_sum_l (n_bvs (h_width h2))
    (fun (bvx:bitvec) -&gt;
      ((fun (x1:bitvec) (y1:bitvec) -&gt;
         get_ket (kronecker x y)
         ((bv_to_int x1 * power_ 2 (h_width h2)) + bv_to_int y1)
         *.. pps_apply_basis (pps_par h1 h2) (concat x1 y1))
       @ bvy)
      @ bvx)
    (h_width h1 + h_width h2))
  (h_width h1 + h_width h2))">
       <goal name="VC pps_apply_par.0.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="rewrite" proved="true" arg1="Hinst">
        <goal name="VC pps_apply_par.0.0.0.0.0.0.0" expl="postcondition" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
         <goal name="VC pps_apply_par.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.17" steps="217"/></proof>
         </goal>
         <goal name="VC pps_apply_par.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.94"/></proof>
         </goal>
         <goal name="VC pps_apply_par.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.81" steps="217"/></proof>
         </goal>
         <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="assert" proved="true" arg1="(a = (concat (hpart a (h_width h1)) (tpart a (h_width h1))))">
            <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.0" expl="asserted formula" proved="true">
            <transf name="rewrite" proved="true" arg1="concat_and_rec">
             <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.0.0" expl="asserted formula" proved="true">
             <proof prover="2"><result status="valid" time="0.46" steps="216"/></proof>
             </goal>
             <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="0.89"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_eq_gen">
             <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.45" steps="218"/></proof>
             </goal>
             <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="bv_to_int_hpart">
              <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="bv_to_int_tpart">
               <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(length a - h_width h1)" arg2="(h_width h2)">
                <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                <transf name="instantiate" proved="true" arg1="decomp" arg2="(bv_to_int a),(power 2 (h_width h2))">
                 <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="power_no_">
                  <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="replace" proved="true" arg1="((div (bv_to_int a) (power 2 (h_width h2)) * power 2 (h_width h2))
     + mod (bv_to_int a) (power 2 (h_width h2)))" arg2="(bv_to_int a)">
                   <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.46" steps="218"/></proof>
                   </goal>
                   <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="valid" time="2.00" steps="223"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.28" steps="221"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.0.1" expl="equality hypothesis" proved="true">
                <proof prover="0"><result status="valid" time="0.96"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.0.1" expl="rewrite premises" proved="true">
               <proof prover="0"><result status="valid" time="0.86"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_apply_par.0.0.0.0.0.0.0.3.0.0.1.1.1" expl="rewrite premises" proved="true">
              <proof prover="0"><result status="valid" time="0.86"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_par.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.12" steps="216"/></proof>
        </goal>
        <goal name="VC pps_apply_par.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.86" steps="216"/></proof>
        </goal>
        <goal name="VC pps_apply_par.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="0.76"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_par.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_apply_par.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.02"/></proof>
          </goal>
          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.31" steps="214"/></proof>
          </goal>
          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.13" steps="217"/></proof>
          </goal>
          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_r_rew">
             <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
              <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.0" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(forall a b. 0 &lt;= a -&gt; 0 &lt;= b -&gt; 0&lt;= a+b)">
               <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.0.0" expl="asserted formula" proved="true">
               <proof prover="2"><result status="valid" time="0.31" steps="220"/></proof>
               </goal>
               <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="h">
                <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="2.12" steps="218"/></proof>
                </goal>
                <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.0.1.1" expl="apply premises" proved="true">
                <transf name="assert" proved="true" arg1="(is_a_ket_l (get_ket x (bv_to_int a) *.. pps_apply_basis h1 a) (h_width h1))">
                 <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.0.1.1.0" expl="asserted formula" proved="true">
                 <transf name="apply" proved="true" arg1="scalar_ket_l">
                  <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="1.96" steps="219"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                 <proof prover="1"><result status="valid" time="1.18"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.1" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
              </goal>
              <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.2" expl="apply premises" proved="true">
              <transf name="assert" proved="true" arg1="(is_a_ket_l (get_ket x (bv_to_int a) *.. pps_apply_basis h1 a) (h_width h1))">
               <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.2.0" expl="asserted formula" proved="true">
               <proof prover="2"><result status="valid" time="2.08" steps="219"/></proof>
               </goal>
               <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.2.1" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="2.15" steps="221"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
                 <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr_r">
                  <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="scalar_assoc">
                   <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="scalar_eq_gen">
                    <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <proof prover="0"><result status="valid" time="0.88"/></proof>
                    </goal>
                    <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="ket_kronecker_values">
                     <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(power_ 2 (h_width h2))" arg2="(rows y)">
                      <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                      <transf name="instantiate" proved="true" arg1="unicity_div_mod" arg2="((bv_to_int a1 * rows y) + bv_to_int a),(rows y),(bv_to_int a1),(bv_to_int a)">
                       <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                       <transf name="split_all_full" proved="true" >
                        <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="replace" proved="true" arg1="(div ((bv_to_int a1 * rows y) + bv_to_int a) (rows y))" arg2="(bv_to_int a1)">
                         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="replace" proved="true" arg1="(mod ((bv_to_int a1 * rows y) + bv_to_int a) (rows y))" arg2="(bv_to_int a)">
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.34" steps="218"/></proof>
                          </goal>
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                          <proof prover="1"><result status="valid" time="1.13"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
                         <proof prover="1"><result status="valid" time="1.13"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                      <proof prover="0"><result status="valid" time="1.06"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.25" steps="221"/></proof>
                     </goal>
                     <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="1.87" steps="221"/></proof>
                     </goal>
                     <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0" expl="rewrite premises" proved="true">
                      <transf name="assert" proved="true" arg1="(forall a b. 0 &lt;= a -&gt; 0 &lt;= b -&gt; 0&lt;= a+b)">
                       <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.0" expl="asserted formula" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.0.0" expl="asserted formula" proved="true">
                        <proof prover="2"><result status="valid" time="0.44" steps="222"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.1" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="h">
                        <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.1.0" expl="apply premises" proved="true">
                        <transf name="assert" proved="true" arg1="(forall a b. 0 &lt;= a -&gt; 0 &lt;= b -&gt; 0&lt;= a*b)">
                         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.1.0.0" expl="asserted formula" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.1.0.0.0" expl="asserted formula" proved="true">
                          <proof prover="2"><result status="valid" time="0.31" steps="222"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.1.0.1" expl="apply premises" proved="true">
                         <transf name="apply" proved="true" arg1="h">
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.1.0.1.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.10" steps="221"/></proof>
                          </goal>
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.1.0.1.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="1.92" steps="221"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.0.1.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.93" steps="221"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1" expl="rewrite premises" proved="true">
                      <transf name="assert" proved="true" arg1="((bv_to_int a1 * power_ 2 (h_width h2)) &lt;= (rows x -1) * rows y )">
                       <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0" expl="asserted formula" proved="true">
                       <transf name="assert" proved="true" arg1="(bv_to_int a1  &lt;= (rows x -1)  )">
                        <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.0" expl="asserted formula" proved="true">
                        <proof prover="1"><result status="valid" time="1.02"/></proof>
                        </goal>
                        <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1" expl="asserted formula" proved="true">
                        <transf name="replace" proved="true" arg1="(power_ 2 (h_width h2))" arg2="(rows y)">
                         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.0" expl="asserted formula" proved="true">
                         <transf name="assert" proved="true" arg1="(forall a b c. 0 &lt;= b -&gt; 0 &lt;= b -&gt; 0 &lt;= c -&gt; a&lt;= b -&gt; a*c&lt;=b*c)">
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.0.0" expl="asserted formula" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.0.0.0" expl="asserted formula" proved="true">
                           <proof prover="2"><result status="valid" time="1.91" steps="229"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.0.1" expl="asserted formula" proved="true">
                          <transf name="apply" proved="true" arg1="h1">
                           <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.0.1.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.13" steps="223"/></proof>
                           </goal>
                           <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.0.1.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.18" steps="223"/></proof>
                           </goal>
                           <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.0.1.2" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="1.81" steps="223"/></proof>
                           </goal>
                           <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.0.1.3" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.34" steps="220"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.0.1.1" expl="equality hypothesis" proved="true">
                         <proof prover="0"><result status="valid" time="0.89"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.1" expl="rewrite premises" proved="true">
                       <transf name="assert" proved="true" arg1="(bv_to_int a &lt; rows y)">
                        <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.1.0" expl="asserted formula" proved="true">
                        <transf name="instantiate" proved="true" arg1="bv_to_int_bound" arg2="a">
                         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.1.0.0" expl="asserted formula" proved="true">
                         <transf name="replace" proved="true" arg1="(length a)" arg2="(h_width h2)" arg3="in" arg4="Hinst">
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.1.0.0.0" expl="asserted formula" proved="true">
                          <proof prover="1"><result status="valid" time="1.17"/></proof>
                          </goal>
                          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.1.0.0.1" expl="equality hypothesis" proved="true">
                          <proof prover="2"><result status="valid" time="1.96" steps="224"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.0.3.0.0.0.0.0.1.3.1.1.1" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.29" steps="222"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.1" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.1.0" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.1.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="scalar_ket_l">
                <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="2.02" steps="221"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.2" expl="rewrite premises" proved="true">
             <transf name="split_all_full" proved="true" >
              <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.2.0" expl="rewrite premises" proved="true">
              <transf name="apply" proved="true" arg1="ket_l_to_ket_gen">
               <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.2.0.0" expl="apply premises" proved="true">
               <transf name="exists" proved="true" arg1="(h_width h1)">
                <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.2.0.0.0" proved="true">
                <transf name="apply" proved="true" arg1="scalar_ket_l">
                 <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="1.86" steps="219"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.3" expl="rewrite premises" proved="true">
             <transf name="rewrite" proved="true" arg1="n_bvs_card">
              <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.3.0" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="1.92" steps="219"/></proof>
              </goal>
              <goal name="VC pps_apply_par.0.0.0.0.0.1.0.0.3.0.0.3.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="2.13" steps="218"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_par.0.0.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_apply_par.0.0.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_ket_l">
            <goal name="VC pps_apply_par.0.0.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.14" steps="219"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.85" steps="217"/></proof>
         </goal>
         <goal name="VC pps_apply_par.0.0.0.0.0.1.0.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.23" steps="217"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_par.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.32" steps="214"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_par.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.31" steps="214"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_par.0.0.1" expl="rewrite premises" proved="true">
    <transf name="replace" proved="true" arg1="(h_width (pps_par h1 h2))" arg2="(h_width h1 + h_width h2)">
     <goal name="VC pps_apply_par.0.0.1.0" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="kronecker_ket_l">
      <goal name="VC pps_apply_par.0.0.1.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.88" steps="216"/></proof>
      </goal>
      <goal name="VC pps_apply_par.0.0.1.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="1.86" steps="216"/></proof>
      </goal>
      <goal name="VC pps_apply_par.0.0.1.0.2" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.30" steps="214"/></proof>
      </goal>
      <goal name="VC pps_apply_par.0.0.1.0.3" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.46" steps="214"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_par.0.0.1.1" expl="equality hypothesis" proved="true">
     <proof prover="2"><result status="valid" time="1.89" steps="217"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_par_pred" expl="VC for pps_par_pred" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_par_pred.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47" steps="218"/></proof>
  </goal>
  <goal name="VC pps_par_pred.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.45" steps="219"/></proof>
  </goal>
  <goal name="VC pps_par_pred.2" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H11">
   <goal name="VC pps_par_pred.2.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H7">
    <goal name="VC pps_par_pred.2.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_par_pred.2.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="2.07" steps="229"/></proof>
   </goal>
   <goal name="VC pps_par_pred.2.2" expl="rewrite premises" proved="true">
   <proof prover="0"><result status="valid" time="0.95"/></proof>
   </goal>
   <goal name="VC pps_par_pred.2.3" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.36" steps="224"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_par_pred.3" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H9">
   <goal name="VC pps_par_pred.3.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H5">
    <goal name="VC pps_par_pred.3.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_par_pred.3.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.94" steps="225"/></proof>
   </goal>
   <goal name="VC pps_par_pred.3.2" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="1.94" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_par_pred.4" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker (pps_apply h1 x) (pps_apply h2 y))" arg2="(pps_apply (pps_par h1 h2) (kronecker x y))">
   <goal name="VC pps_par_pred.4.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="get_pps_apply_equiv">
    <goal name="VC pps_par_pred.4.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.31" steps="224"/></proof>
    </goal>
    <goal name="VC pps_par_pred.4.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.48" steps="224"/></proof>
    </goal>
    <goal name="VC pps_par_pred.4.0.2" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="2.06" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_par_pred.4.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="2.05" steps="226"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_anc" expl="VC for pps_apply_basis_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_anc.0" expl="assertion" proved="true">
  <transf name="rewrite" proved="true" arg1="pps_apply_basis_bv" arg2="in" arg3="H1">
   <goal name="VC pps_apply_basis_anc.0.0" expl="assertion" proved="true">
   <transf name="replace" proved="true" arg1="(ket_sum_l (n_bvs (h_range h))
       (fun (y1:bitvec) -&gt;
         ang_exp (h_angle_bv h x y1) *.. bv_to_ket (h_basis_ket_bv h x y1))
       (h_width h))
" arg2="(ket_sum_l (n_bvs (h_range h))
       (fun (y1:bitvec) -&gt;
         ang_exp (h_angle_bv h x y1) *.. bv_to_ket (concat (hpart (h_basis_ket_bv h x y1) (h_width h-1))  (tpart (h_basis_ket_bv h x y1) (h_width h-1)) ))
       (h_width h))
" arg3="in" arg4="H1">
    <goal name="VC pps_apply_basis_anc.0.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="ket_sum_partition_filter" arg2="(n_bvs (h_range h)),(fun (y1:bitvec) -&gt;
         ang_exp (h_angle_bv h x y1)
         *.. bv_to_ket
             (concat (hpart (h_basis_ket_bv h x y1) (h_width h - 1))
              (tpart (h_basis_ket_bv h x y1) (h_width h - 1)))),(fun x1 -&gt; getbv (h_basis_ket_bv h x x1) (h_width h-1) = 0),(fun x1 -&gt; getbv (h_basis_ket_bv h x x1) (h_width h-1) = 1),(h_width h)
">
     <goal name="VC pps_apply_basis_anc.0.0.0.0" expl="assertion" proved="true">
     <transf name="rewrite" proved="true" arg1="Hinst" arg2="in" arg3="H1">
      <goal name="VC pps_apply_basis_anc.0.0.0.0.0" expl="assertion" proved="true">
      <transf name="rewrite" proved="true" arg1="H1">
       <goal name="VC pps_apply_basis_anc.0.0.0.0.0.0" expl="assertion" proved="true">
       <proof prover="2"><result status="valid" time="0.32" steps="220"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_anc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.32" steps="220"/></proof>
      </goal>
      <goal name="VC pps_apply_basis_anc.0.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_apply_basis_anc.0.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_apply_basis_anc.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
        <proof prover="0"><result status="valid" time="1.18"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_basis_anc.0.0.1" expl="equality hypothesis" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
     <goal name="VC pps_apply_basis_anc.0.0.1.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.29" steps="220"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc.0.0.1.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.35" steps="220"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc.0.0.1.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.35" steps="220"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc.0.0.1.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_apply_basis_anc.0.0.1.3.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq_gen">
        <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="bv_to_ket_eq">
         <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="concat_length">
          <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0" expl="apply premises" proved="true">
          <transf name="replace" proved="true" arg1="(length (hpart (h_basis_ket_bv h x a) (h_width h - 1)))" arg2="(h_width h - 1)">
           <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="tpart_length">
            <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="0.32" steps="222"/></proof>
            </goal>
            <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.41" steps="222"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
             <transf name="replace" proved="true" arg1="(length (h_basis_ket_bv h x a))" arg2="(h_width h)">
              <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="0.51" steps="222"/></proof>
              </goal>
              <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
              <proof prover="2"><result status="valid" time="2.17" steps="224"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
           <proof prover="2"><result status="valid" time="2.23" steps="224"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="1.27"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_basis_anc.0.0.1.3.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.32" steps="222"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis_anc.0.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="0.45" steps="220"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_basis_anc.1" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="( kronecker y (ket 1 0))" arg2="(pow_inv_sqrt_2 (h_range h)
   *.. add_ket_l
       (ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 0))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket
              (concat (hpart (h_basis_ket_bv h x y1) (h_width h - 1))
               (tpart (h_basis_ket_bv h x y1) (h_width h - 1))))
        (h_width h))
       (ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 1))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket
              (concat (hpart (h_basis_ket_bv h x y1) (h_width h - 1))
               (tpart (h_basis_ket_bv h x y1) (h_width h - 1))))
        (h_width h))
       (h_width h))">
   <goal name="VC pps_apply_basis_anc.1.0" expl="assertion" proved="true">
   <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
    <goal name="VC pps_apply_basis_anc.1.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="add_ket_l_scal_rev">
     <goal name="VC pps_apply_basis_anc.1.0.0.0" expl="assertion" proved="true">
     <transf name="apply" proved="true" arg1="add_ket_l_eq">
      <goal name="VC pps_apply_basis_anc.1.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.35" steps="222"/></proof>
      </goal>
      <goal name="VC pps_apply_basis_anc.1.0.0.0.1" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="scalar_eq">
       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew_">
        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.99" steps="224"/></proof>
         </goal>
         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.2" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.35" steps="224"/></proof>
         </goal>
         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_eq">
             <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="ket_to_bv_concat">
              <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="kronecker_eq">
               <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="0.32" steps="224"/></proof>
               </goal>
               <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="set_equal_ket">
                <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="2.12" steps="226"/></proof>
                </goal>
                <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="2.13" steps="226"/></proof>
                </goal>
                <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
                 <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="bv_to_ket_length">
                  <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0" expl="apply premises" proved="true">
                  <transf name="split_all_full" proved="true" >
                   <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="tpart_spec2">
                    <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length">
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="0"><result status="valid" time="0.84"/></proof>
                     </goal>
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="0.90"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.04"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.09"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.12" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.30" steps="228"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.2.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.34" steps="228"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.11" steps="234"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.97" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.96" steps="234"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.1.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.05"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.2.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.2.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.31" steps="228"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.32" steps="224"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
                    </goal>
                    <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="make_bv_length">
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.0" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.32" steps="224"/></proof>
                     </goal>
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1" expl="rewrite premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.06"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.0.1" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="1.08"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.1.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.03" steps="234"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.1.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.98" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.2" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.2.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.2.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1" expl="rewrite premises" proved="true">
                      <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.00" steps="234"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.04" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.1" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.1.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.97" steps="234"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.1.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.09" steps="234"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.2" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.2.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.46" steps="228"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.2.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.36" steps="228"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.0.0.0.2.2" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.34" steps="224"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.1" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.37" steps="224"/></proof>
                 </goal>
                 <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.2" expl="rewrite premises" proved="true">
                 <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                  <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.2.0" expl="asserted formula" proved="true">
                  <proof prover="2"><result status="valid" time="2.14" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.2.2.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.09" steps="228"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0" expl="apply premises" proved="true">
                 <transf name="eliminate_definition" proved="true" >
                  <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
                   <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                    <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="replace" proved="true" arg1="(length (tpart (h_basis_ket_bv h x a) (h_width h - 1)))" arg2="1">
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="ind_isum_one">
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="rewrite" proved="true" arg1="tpart_value">
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="mult_one">
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="0"><result status="valid" time="4.49"/></proof>
                          </goal>
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                          <proof prover="1"><result status="valid" time="1.19"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.41" steps="244"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.44" steps="244"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
                     <transf name="split_all_full" proved="true" >
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                      <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
                       <transf name="rewrite" proved="true" arg1="tpart_spec2">
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
                        <transf name="rewrite" proved="true" arg1="make_bv_length">
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
                         <proof prover="2"><result status="valid" time="0.42" steps="244"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="3.86"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.40"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.38"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.42"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.40" steps="248"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.2.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.58" steps="248"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.52"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.63"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.1" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.1.0" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.59"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.1.1" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.09"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.2" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.2.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.43" steps="248"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.2.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.44" steps="248"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.42" steps="244"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.43" steps="244"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="make_bv_length">
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.55" steps="244"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.39"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.0.1" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.50"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.1" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.1.0" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.62"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.1.1" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.68"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.2" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.2.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.40" steps="248"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.2.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.43" steps="248"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1" expl="rewrite premises" proved="true">
                          <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.0" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.0.0" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.63"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.0.1" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.06"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.1" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.1.0" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.70"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.1.1" expl="apply premises" proved="true">
                            <proof prover="0"><result status="valid" time="4.65"/></proof>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.2" expl="apply premises" proved="true">
                           <transf name="split_vc" proved="true" >
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.2.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.40" steps="248"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.2.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.42" steps="248"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.2" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.43" steps="244"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.43" steps="244"/></proof>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                       <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.2.0" expl="asserted formula" proved="true">
                        <proof prover="0"><result status="valid" time="4.61"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
                        <proof prover="1"><result status="valid" time="1.27"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.1" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.1.0" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
          <transf name="apply" proved="true" arg1="scalar_ket_l">
           <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="2.18" steps="226"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.88" steps="224"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.1.0.0.0.1.0.3" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="0.32" steps="222"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_anc.1.0.0.0.2" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_eq">
        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew_">
         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.04" steps="224"/></proof>
          </goal>
          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.04" steps="224"/></proof>
          </goal>
          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="scalar_eq">
              <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="ket_to_bv_concat">
               <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="kronecker_eq">
                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.32" steps="224"/></proof>
                </goal>
                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="set_equal_ket">
                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.01" steps="226"/></proof>
                 </goal>
                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.17" steps="226"/></proof>
                 </goal>
                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="bv_to_ket_length">
                   <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0" expl="apply premises" proved="true">
                   <transf name="split_all_full" proved="true" >
                    <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="tpart_spec2">
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="1.98" steps="226"/></proof>
                      </goal>
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.00" steps="234"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.27" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.25" steps="234"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.10" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.34" steps="228"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.0.2.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.06" steps="234"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.05" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.1" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.16" steps="234"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.1.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.15" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.2" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.2.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.34" steps="228"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.1.1.2.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.31" steps="224"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="2"><result status="valid" time="0.32" steps="224"/></proof>
                     </goal>
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2" expl="rewrite premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="make_bv_length">
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.0" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.44" steps="224"/></proof>
                      </goal>
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.15" steps="234"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.17" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.1" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.1.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.94" steps="234"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.1.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="1.92" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.2" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.2.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.30" steps="228"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.0.2.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.37" steps="228"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1" expl="rewrite premises" proved="true">
                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.35" steps="234"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.25" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.1" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.1.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.01" steps="234"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.1.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.27" steps="234"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.2" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.2.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.34" steps="228"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.1.1.2.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.32" steps="228"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.0.0.0.2.2" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.34" steps="224"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.34" steps="224"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.2" expl="rewrite premises" proved="true">
                  <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                   <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.2.0" expl="asserted formula" proved="true">
                   <proof prover="2"><result status="valid" time="2.13" steps="226"/></proof>
                   </goal>
                   <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.2.2.1" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="2.17" steps="228"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0" expl="apply premises" proved="true">
                  <transf name="eliminate_definition" proved="true" >
                   <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0" expl="apply premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
                    <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(length (tpart (h_basis_ket_bv h x a) (h_width h - 1)))" arg2="1">
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="ind_isum_one">
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="tpart_value">
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="mult_one">
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                            <transf name="eliminate_if" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
                             <transf name="split_vc" proved="true" >
                              <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                              <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                               <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                               <transf name="replace" proved="true" arg1="(((h_basis_ket h @ getbv x) @ getbv a) @ (0 + (h_width h - 1)))" arg2="1">
                                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                                <proof prover="2"><result status="valid" time="0.49" steps="246"/></proof>
                                </goal>
                                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                                <transf name="instantiate" proved="true" arg1="in_my_filter_filter" arg2="(n_bvs (h_range h)),(fun (x1:bitvec) -&gt; (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 1),a">
                                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                                 <transf name="compute_hyp_specified" proved="true" arg1="in" arg2="Hinst">
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
                                  <transf name="destruct" proved="true" arg1="Hinst">
                                   <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="destruct premise" proved="true">
                                   <transf name="apply" proved="true" arg1="H3">
                                   </transf>
                                   </goal>
                                   <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                                   <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def" arg2="in" arg3="Hinst">
                                    <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
                                    <transf name="rewrite" proved="true" arg1="assert_make_bv_b" arg2="in" arg3="Hinst">
                                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.0" expl="equality hypothesis" proved="true">
                                     <proof prover="2"><result status="valid" time="0.50" steps="248"/></proof>
                                     </goal>
                                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1" expl="rewrite premises" proved="true">
                                     <transf name="split_vc" proved="true" >
                                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.0" expl="rewrite premises" proved="true">
                                      <transf name="split_all_full" proved="true" >
                                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.0.0" expl="rewrite premises" proved="true">
                                       <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.0.0.0" expl="apply premises" proved="true">
                                        <proof prover="1"><result status="valid" time="1.53"/></proof>
                                        </goal>
                                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.0.0.1" expl="apply premises" proved="true">
                                        <proof prover="1"><result status="valid" time="1.48"/></proof>
                                        </goal>
                                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.0.0.2" expl="apply premises" proved="true">
                                        <proof prover="2"><result status="valid" time="0.44" steps="252"/></proof>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.1" expl="rewrite premises" proved="true">
                                      <transf name="split_all_full" proved="true" >
                                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.1.0" expl="rewrite premises" proved="true">
                                       <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.1.0.0" expl="apply premises" proved="true">
                                        <proof prover="1"><result status="valid" time="1.57"/></proof>
                                        </goal>
                                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.1.0.1" expl="apply premises" proved="true">
                                        <proof prover="1"><result status="valid" time="1.62"/></proof>
                                        </goal>
                                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.1.1.0.2" expl="apply premises" proved="true">
                                        <proof prover="2"><result status="valid" time="0.42" steps="252"/></proof>
                                        </goal>
                                       </transf>
                                       </goal>
                                      </transf>
                                      </goal>
                                     </transf>
                                     </goal>
                                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0.2" expl="rewrite premises" proved="true">
                                     <proof prover="2"><result status="valid" time="0.43" steps="248"/></proof>
                                     </goal>
                                    </transf>
                                    </goal>
                                    <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                                    <proof prover="2"><result status="valid" time="0.57" steps="248"/></proof>
                                    </goal>
                                    <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.2" expl="rewrite premises" proved="true">
                                    <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.2.0" expl="asserted formula" proved="true">
                                     <proof prover="0"><result status="valid" time="4.63"/></proof>
                                     </goal>
                                     <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.2.1" expl="rewrite premises" proved="true">
                                     <proof prover="1"><result status="valid" time="1.27"/></proof>
                                     </goal>
                                    </transf>
                                    </goal>
                                   </transf>
                                   </goal>
                                  </transf>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                               <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                               <transf name="split_vc" proved="true" >
                                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                                <transf name="split_all_full" proved="true" >
                                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
                                 <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                                  <proof prover="1"><result status="valid" time="1.47"/></proof>
                                  </goal>
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                                  <proof prover="1"><result status="valid" time="1.40"/></proof>
                                  </goal>
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
                                  <proof prover="2"><result status="valid" time="0.40" steps="250"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                                <transf name="split_all_full" proved="true" >
                                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                                 <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                                  <proof prover="1"><result status="valid" time="1.54"/></proof>
                                  </goal>
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                                  <proof prover="1"><result status="valid" time="1.40"/></proof>
                                  </goal>
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.2" expl="apply premises" proved="true">
                                  <proof prover="2"><result status="valid" time="0.41" steps="250"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                               <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                               <transf name="split_vc" proved="true" >
                                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                                <proof prover="2"><result status="valid" time="0.41" steps="246"/></proof>
                                </goal>
                                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises" proved="true">
                                <proof prover="2"><result status="valid" time="0.43" steps="246"/></proof>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                              <transf name="rewrite" proved="true" arg1="make_bv_length" arg2="in" arg3="H">
                               <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.42" steps="244"/></proof>
                               </goal>
                               <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                               <transf name="split_vc" proved="true" >
                                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises" proved="true">
                                <transf name="split_all_full" proved="true" >
                                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
                                 <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
                                  <proof prover="1"><result status="valid" time="1.55"/></proof>
                                  </goal>
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0.1" expl="apply premises" proved="true">
                                  <proof prover="1"><result status="valid" time="1.39"/></proof>
                                  </goal>
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.0.0.2" expl="apply premises" proved="true">
                                  <proof prover="2"><result status="valid" time="0.39" steps="250"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                                <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
                                <transf name="split_all_full" proved="true" >
                                 <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.1.0" expl="rewrite premises" proved="true">
                                 <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.1.0.0" expl="apply premises" proved="true">
                                  <proof prover="1"><result status="valid" time="1.41"/></proof>
                                  </goal>
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.1.0.1" expl="apply premises" proved="true">
                                  <proof prover="1"><result status="valid" time="1.53"/></proof>
                                  </goal>
                                  <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.1.1.0.2" expl="apply premises" proved="true">
                                  <proof prover="2"><result status="valid" time="0.41" steps="250"/></proof>
                                  </goal>
                                 </transf>
                                 </goal>
                                </transf>
                                </goal>
                               </transf>
                               </goal>
                               <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                               <proof prover="2"><result status="valid" time="0.41" steps="246"/></proof>
                               </goal>
                              </transf>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.40" steps="244"/></proof>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                            <transf name="eliminate_if" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                             <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                              <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.2.0.0" expl="asserted formula" proved="true">
                              <proof prover="0"><result status="valid" time="3.84"/></proof>
                              </goal>
                              <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
                              <proof prover="1"><result status="valid" time="1.20"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                           <proof prover="1"><result status="valid" time="1.05"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.39" steps="244"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.40" steps="244"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
                      <transf name="split_all_full" proved="true" >
                       <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                       <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_def">
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
                        <transf name="rewrite" proved="true" arg1="tpart_spec2">
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
                         <transf name="rewrite" proved="true" arg1="make_bv_length">
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
                          <proof prover="2"><result status="valid" time="0.55" steps="244"/></proof>
                          </goal>
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.0.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.01"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.0.1" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.55"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.1.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.88"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.1.1" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.49"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.2.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.40" steps="248"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.0.2.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.41" steps="248"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.0" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.0.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="5.02"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.0.1" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.67"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.1" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.1.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.05"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.1.1" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="5.08"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.2" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.2.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.40" steps="248"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.1.1.2.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.41" steps="248"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.42" steps="244"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.57" steps="244"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="make_bv_length">
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.39" steps="244"/></proof>
                          </goal>
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1" expl="rewrite premises" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant3">
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.0" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.0.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.73"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.0.1" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.73"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.1" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.1.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.56"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.1.1" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.52"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.2" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.2.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.41" steps="248"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.0.2.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.44" steps="248"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1" expl="rewrite premises" proved="true">
                           <transf name="apply" proved="true" arg1="pps&#39;invariant2">
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.0" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.0.0" expl="apply premises" proved="true">
                             <proof prover="0"><result status="valid" time="4.65"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.0.1" expl="apply premises" proved="true">
                             <proof prover="1"><result status="valid" time="1.36"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.1" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.1.0" expl="apply premises" proved="true">
                             <proof prover="1"><result status="valid" time="1.43"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.1.1" expl="apply premises" proved="true">
                             <proof prover="1"><result status="valid" time="1.36"/></proof>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.2" expl="apply premises" proved="true">
                            <transf name="split_vc" proved="true" >
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.2.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.49" steps="248"/></proof>
                             </goal>
                             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.1.1.2.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.52" steps="248"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.0.2.2" expl="rewrite premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.57" steps="244"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.1" expl="rewrite premises" proved="true">
                        <proof prover="2"><result status="valid" time="0.52" steps="244"/></proof>
                        </goal>
                        <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.2" expl="rewrite premises" proved="true">
                        <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.2.0" expl="asserted formula" proved="true">
                         <proof prover="1"><result status="valid" time="1.70"/></proof>
                         </goal>
                         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.0.3.0.0.0.0.0.1.3.0.0.0.0.1.0.2.1" expl="rewrite premises" proved="true">
                         <proof prover="1"><result status="valid" time="1.45"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.1.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.1.0.0" expl="rewrite premises" proved="true">
           <transf name="apply" proved="true" arg1="scalar_ket_l">
            <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.1.0.0.0" expl="apply premises" proved="true">
            <transf name="replace" proved="true" arg1="(h_width h - 1)" arg2="(length (hpart (h_basis_ket_bv h x e) (h_width h - 1)))">
             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.02" steps="226"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
             <proof prover="2"><result status="valid" time="2.01" steps="226"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.28" steps="224"/></proof>
         </goal>
         <goal name="VC pps_apply_basis_anc.1.0.0.0.2.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.31" steps="222"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_basis_anc.1.0.0.1" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_ket_l">
      <goal name="VC pps_apply_basis_anc.1.0.0.1.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.31" steps="222"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_basis_anc.1.0.0.2" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="ket_sum_ket_l">
      <goal name="VC pps_apply_basis_anc.1.0.0.2.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="0.34" steps="222"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis_anc.1.1" expl="equality hypothesis" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC pps_apply_basis_anc.1.1.0" expl="equality hypothesis" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_basis_anc.2" expl="assertion" proved="true">
  <transf name="replace" proved="true" arg1="(kronecker
   (pow_inv_sqrt_2 (h_range h)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 1))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h x y1) (h_width h - 1)))
        (h_width h - 1))
   (ket 1 1))" arg2="(kronecker
   (pow_inv_sqrt_2 (h_range h)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 1))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h x y1) (h_width h - 1)))
        (h_width h - 1))
   (ket 1 0))" arg3="in" arg4="H">
   <goal name="VC pps_apply_basis_anc.2.0" expl="assertion" proved="true">
   <transf name="instantiate" proved="true" arg1="kronecker_ket_add_distr_r" arg2="(pow_inv_sqrt_2 (h_range h)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 0))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h x y1) (h_width h - 1)))
        (h_width h - 1)),(pow_inv_sqrt_2 (h_range h)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 1))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h x y1) (h_width h - 1)))
        (h_width h - 1)),(ket 1 0),(h_width h),(h_width h-1),1">
    <goal name="VC pps_apply_basis_anc.2.0.0" expl="assertion" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst" arg2="in" arg3="H">
     <goal name="VC pps_apply_basis_anc.2.0.0.0" expl="assertion" proved="true">
     <transf name="replace" proved="true" arg1="(pps_apply_basis (pps_anc h) (hpart x (h_width h - 1)))" arg2="(add_ket_l
   (pow_inv_sqrt_2 (h_range h)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 0))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h x y1) (h_width h - 1)))
        (h_width h - 1))
   (pow_inv_sqrt_2 (h_range h)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 1))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h x y1) (h_width h - 1)))
        (h_width h - 1))
   (h_width h - 1))">
      <goal name="VC pps_apply_basis_anc.2.0.0.0.0" expl="assertion" proved="true">
      <transf name="apply" proved="true" arg1="H">
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_anc.2.0.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_apply_basis_bv">
       <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0" expl="equality hypothesis" proved="true">
       <transf name="instantiate" proved="true" arg1="ket_sum_partition_filter" arg2="(n_bvs (h_range (pps_anc h))),(fun (y1:bitvec) -&gt;
         ang_exp (h_angle_bv (pps_anc h) (hpart x (h_width h - 1)) y1)
         *.. bv_to_ket
             (h_basis_ket_bv (pps_anc h) (hpart x (h_width h - 1)) y1)),(fun (x1:bitvec) -&gt;
            (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 0),(fun (x1:bitvec) -&gt;
            (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 1),(h_width (pps_anc h))">
        <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0" expl="equality hypothesis" proved="true">
        <transf name="rewrite" proved="true" arg1="Hinst">
         <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="add_ket_l_scal">
          <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0" expl="equality hypothesis" proved="true">
          <transf name="apply" proved="true" arg1="scalar_eq_gen">
           <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width (pps_anc h))" arg2="(h_width h-1)">
            <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="add_ket_l_eq">
             <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.32" steps="224"/></proof>
             </goal>
             <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="ket_sum_eq">
              <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
              </goal>
              <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(h_range (pps_anc h))" arg2="(h_range h)">
               <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
               <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="2.19" steps="228"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="scalar_eq_gen">
                 <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_anc_">
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                  </transf>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.35" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.4" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.32" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.5" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(h_range (pps_anc h))" arg2="(h_range h)" arg3="in" arg4="H">
                   <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.5.0" expl="rewrite premises" proved="true">
                   <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                    <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.5.0.0" expl="asserted formula" proved="true">
                    <proof prover="2"><result status="valid" time="2.35" steps="230"/></proof>
                    </goal>
                    <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.5.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.25" steps="232"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.0.5.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="valid" time="2.33" steps="230"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="h_angle_bv_anc_">
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.48" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.47" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.3" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.31" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.4" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.5" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(h_range (pps_anc h))" arg2="(h_range h)" arg3="in" arg4="H">
                   <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.5.0" expl="rewrite premises" proved="true">
                   <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                    <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.5.0.0" expl="asserted formula" proved="true">
                    <proof prover="2"><result status="valid" time="2.42" steps="230"/></proof>
                    </goal>
                    <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.5.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.47" steps="232"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.1.2.0.0.1.5.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="valid" time="2.37" steps="230"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="ket_sum_eq">
              <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="0.31" steps="224"/></proof>
              </goal>
              <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.1" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(h_range (pps_anc h))" arg2="(h_range h)">
               <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.1.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
               </transf>
               </goal>
               <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.1.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="2.19" steps="228"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2" expl="apply premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="scalar_eq_gen">
                 <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="h_basis_ket_bv_anc_">
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                  </transf>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.30" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.34" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.3" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.4" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.34" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.5" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(h_range (pps_anc h))" arg2="(h_range h)" arg3="in" arg4="H">
                   <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.5.0" expl="rewrite premises" proved="true">
                   <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                    <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.5.0.0" expl="asserted formula" proved="true">
                    <proof prover="2"><result status="valid" time="2.14" steps="230"/></proof>
                    </goal>
                    <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.5.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.17" steps="232"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.0.5.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="valid" time="2.45" steps="230"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="h_angle_bv_anc_">
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.0" expl="apply premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.48" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.32" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.34" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.3" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.4" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.33" steps="226"/></proof>
                  </goal>
                  <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.5" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(h_range (pps_anc h))" arg2="(h_range h)" arg3="in" arg4="H">
                   <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.5.0" expl="rewrite premises" proved="true">
                   <transf name="assert" proved="true" arg1="(mem a (n_bvs (h_range h)))">
                    <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.5.0.0" expl="asserted formula" proved="true">
                    <proof prover="2"><result status="valid" time="2.14" steps="230"/></proof>
                    </goal>
                    <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.5.0.1" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.28" steps="232"/></proof>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.0.2.2.0.0.1.5.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="valid" time="2.50" steps="230"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="2.46" steps="228"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="0.87"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="2.30" steps="228"/></proof>
          </goal>
          <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="2.31" steps="228"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.31" steps="227"/></proof>
         </goal>
         <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.2" expl="rewrite premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.2.0.0" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="0.47" steps="228"/></proof>
           </goal>
           <goal name="VC pps_apply_basis_anc.2.0.0.0.1.0.0.2.0.1" expl="rewrite premises" proved="true">
           <proof prover="0"><result status="valid" time="1.06"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_basis_anc.2.0.0.0.1.1" expl="rewrite premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC pps_apply_basis_anc.2.0.0.0.1.1.0" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="hpart_spec4">
         <goal name="VC pps_apply_basis_anc.2.0.0.0.1.1.0.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.34" steps="227"/></proof>
         </goal>
         <goal name="VC pps_apply_basis_anc.2.0.0.0.1.1.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.47" steps="224"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_basis_anc.2.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.46" steps="224"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc.2.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.39" steps="227"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc.2.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.60" steps="227"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc.2.0.0.4" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.41" steps="226"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_basis_anc.2.1" expl="equality hypothesis" proved="true">
   <transf name="instantiate" proved="true" arg1="kronecker_add_null" arg2="y,(pow_inv_sqrt_2 (h_range h)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 0))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h x y1) (h_width h - 1)))
        (h_width h - 1)),(pow_inv_sqrt_2 (h_range h)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h x x1) @ (h_width h - 1)) = 1))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h x y1) (h_width h - 1)))
        (h_width h - 1)),(ket 1 0),(ket 1 1),(h_width h-1),1">
    <goal name="VC pps_apply_basis_anc.2.1.0" expl="equality hypothesis" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_apply_basis_anc.2.1.0.0" expl="equality hypothesis" proved="true">
     <transf name="assert" proved="true" arg1="(forall m n. is_a_ket_l m (h_width h) -&gt; is_a_ket_l n (h_width h) -&gt; null_mat m -&gt; null_mat n -&gt; m = n)">
      <goal name="VC pps_apply_basis_anc.2.1.0.0.0" expl="asserted formula" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_equal_ket">
        <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.28" steps="237"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.34" steps="237"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.92"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.3" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.3.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(get_ket m i)" arg2="c_zero">
          <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.3.0.0" expl="apply premises" proved="true">
          <transf name="assert" proved="true" arg1="(ket_valid_index n i)">
           <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.3.0.0.0" expl="asserted formula" proved="true">
           <proof prover="0"><result status="valid" time="1.13"/></proof>
           </goal>
           <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="1.14"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.3.0.1" expl="equality hypothesis" proved="true">
          <transf name="assert" proved="true" arg1="(ket_valid_index m i)">
           <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.3.0.1.0" expl="asserted formula" proved="true">
           <proof prover="2"><result status="valid" time="2.75" steps="241"/></proof>
           </goal>
           <goal name="VC pps_apply_basis_anc.2.1.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
           <proof prover="0"><result status="valid" time="1.00"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_anc.2.1.0.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="h">
       <goal name="VC pps_apply_basis_anc.2.1.0.0.1.0" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.17"/></proof>
       </goal>
       <goal name="VC pps_apply_basis_anc.2.1.0.0.1.1" expl="apply premises" proved="true">
       <proof prover="0"><result status="valid" time="1.31"/></proof>
       </goal>
       <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.35" steps="224"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.53" steps="229"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.26" steps="229"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.29" steps="226"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.25" steps="226"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.96" steps="226"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.31"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.55"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.8" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(kronecker y (ket 1 0))" arg2="(add_ket_l
  (kronecker
   (pow_inv_sqrt_2 (h_range h1)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h1))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h1 x x1) @ (h_width h1 - 1)) = 0))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h1 x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h1 x y1) (h_width h1 - 1)))
        (h_width h1 - 1))
   (ket 1 0))
  (kronecker
   (pow_inv_sqrt_2 (h_range h1)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h1))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h1 x x1) @ (h_width h1 - 1)) = 1))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h1 x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h1 x y1) (h_width h1 - 1)))
        (h_width h1 - 1))
   (ket 1 1))
  (h_width h1))">
         <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.8.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="((h_width h1 - 1) + 1)" arg2="((h_width h1) )">
          <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.8.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.8.0.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.31" steps="224"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.8.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="H">
          <goal name="VC pps_apply_basis_anc.2.1.0.0.1.2.8.1.0" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.36" steps="224"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.46" steps="229"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.43" steps="229"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.02" steps="226"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.04" steps="226"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.15" steps="226"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.6" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.45"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.7" expl="apply premises" proved="true">
        <proof prover="1"><result status="valid" time="1.58"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.8" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(kronecker y (ket 1 0))" arg2="(add_ket_l
  (kronecker
   (pow_inv_sqrt_2 (h_range h1)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h1))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h1 x x1) @ (h_width h1 - 1)) = 0))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h1 x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h1 x y1) (h_width h1 - 1)))
        (h_width h1 - 1))
   (ket 1 0))
  (kronecker
   (pow_inv_sqrt_2 (h_range h1)
    *.. ket_sum_l
        (my_filter (n_bvs (h_range h1))
         (fun (x1:bitvec) -&gt;
           (getbv (h_basis_ket_bv h1 x x1) @ (h_width h1 - 1)) = 1))
        (fun (y1:bitvec) -&gt;
          ang_exp (h_angle_bv h1 x y1)
          *.. bv_to_ket (hpart (h_basis_ket_bv h1 x y1) (h_width h1 - 1)))
        (h_width h1 - 1))
   (ket 1 1))
  (h_width h1))">
         <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.8.0" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="((h_width h1 - 1) + 1)" arg2="((h_width h1) )">
          <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.8.0.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
          </transf>
          </goal>
          <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.8.0.1" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.31" steps="224"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.8.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="H">
          <goal name="VC pps_apply_basis_anc.2.1.0.0.1.3.8.1.0" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_basis_anc.3" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="kronecker_injec_eq_left" arg2="(pps_apply_basis (pps_anc h) (hpart x (h_width h - 1))),y,(ket 1 0)">
   <goal name="VC pps_apply_basis_anc.3.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="Hinst">
    <goal name="VC pps_apply_basis_anc.3.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.30" steps="226"/></proof>
    </goal>
    <goal name="VC pps_apply_basis_anc.3.0.1" expl="apply premises" proved="true">
    <transf name="assert" proved="true" arg1="(get (ket 1 0) 0 0 = c_one)">
     <goal name="VC pps_apply_basis_anc.3.0.1.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.83"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc.3.0.1.1" expl="apply premises" proved="true">
     <transf name="case" proved="true" arg1="( null_mat (ket 1 0))">
      <goal name="VC pps_apply_basis_anc.3.0.1.1.0" expl="true case (apply premises)" proved="true">
      <transf name="assert" proved="true" arg1="(get (ket 1 0) 0 0 = c_zero)">
       <goal name="VC pps_apply_basis_anc.3.0.1.1.0.0" expl="asserted formula" proved="true">
       <transf name="assert" proved="true" arg1="(valid_index (ket 1 0) 0 0)">
        <goal name="VC pps_apply_basis_anc.3.0.1.1.0.0.0" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="1.00"/></proof>
        </goal>
        <goal name="VC pps_apply_basis_anc.3.0.1.1.0.0.1" expl="asserted formula" proved="true">
        <proof prover="0"><result status="valid" time="0.92"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_basis_anc.3.0.1.1.0.1" expl="true case (apply premises)" proved="true">
       <proof prover="2"><result status="valid" time="0.31" steps="230"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_anc.3.0.1.1.1" expl="false case (apply premises)" proved="true">
      <proof prover="2"><result status="valid" time="0.32" steps="232"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_basis_anc_" expl="VC for pps_apply_basis_anc_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_basis_anc_.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.86"/></proof>
  </goal>
  <goal name="VC pps_apply_basis_anc_.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30" steps="218"/></proof>
  </goal>
  <goal name="VC pps_apply_basis_anc_.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31" steps="222"/></proof>
  </goal>
  <goal name="VC pps_apply_basis_anc_.3" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="concat_length">
   <goal name="VC pps_apply_basis_anc_.3.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="make_bv_length">
    <goal name="VC pps_apply_basis_anc_.3.0.0" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.30" steps="222"/></proof>
    </goal>
    <goal name="VC pps_apply_basis_anc_.3.0.1" expl="rewrite premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC pps_apply_basis_anc_.3.0.1.0" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="0.94"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc_.3.0.1.1" expl="rewrite premises" proved="true">
     <proof prover="0"><result status="valid" time="1.08"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_basis_anc_.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.30" steps="222"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_basis_anc_.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="concat_value">
   <goal name="VC pps_apply_basis_anc_.4.0" expl="precondition" proved="true">
   <transf name="eliminate_if" proved="true" >
    <goal name="VC pps_apply_basis_anc_.4.0.0" expl="VC for pps_apply_basis_anc_" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC pps_apply_basis_anc_.4.0.0.0" expl="precondition" proved="true">
     <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
      <goal name="VC pps_apply_basis_anc_.4.0.0.0.0" expl="precondition" proved="true">
      <proof prover="2"><result status="valid" time="2.18" steps="229"/></proof>
      </goal>
      <goal name="VC pps_apply_basis_anc_.4.0.0.0.1" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
      </transf>
      </goal>
      <goal name="VC pps_apply_basis_anc_.4.0.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.34" steps="227"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_basis_anc_.4.0.0.1" expl="precondition" proved="true">
     <proof prover="2"><result status="valid" time="0.32" steps="227"/></proof>
     </goal>
     <goal name="VC pps_apply_basis_anc_.4.0.0.2" expl="precondition" proved="true">
     <proof prover="2"><result status="valid" time="0.31" steps="227"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_apply_basis_anc_.5" expl="precondition" proved="true">
  <transf name="apply" proved="true" arg1="H11">
  </transf>
  </goal>
  <goal name="VC pps_apply_basis_anc_.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31" steps="228"/></proof>
  </goal>
  <goal name="VC pps_apply_basis_anc_.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.84"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_anc" expl="VC for pps_apply_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_anc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(kronecker  (pps_apply (pps_anc h) x) (ket 1 0) = pps_apply h (kronecker x (ket 1 0)))">
   <goal name="VC pps_apply_anc.0.0" expl="asserted formula" proved="true">
   <transf name="rewrite" proved="true" arg1="get_pps_apply">
    <goal name="VC pps_apply_anc.0.0.0" expl="asserted formula" proved="true">
    <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
     <goal name="VC pps_apply_anc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x,(h_width h1 - 1)">
      <goal name="VC pps_apply_anc.0.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="replace" proved="true" arg1="(kronecker x (ket 1 0))" arg2="(kronecker (ket_sum_l (n_bvs (h_width h1 - 1))
    (fun (bvx:bitvec) -&gt; get_ket x (bv_to_int bvx) *.. bv_to_ket bvx)
    (h_width h1 - 1)) (ket 1 0))">
       <goal name="VC pps_apply_anc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <transf name="rewrite" proved="true" arg1="kronecker_ket_sum_distr_l_rew">
        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
        <transf name="rewrite" proved="true" arg1="pps_apply_sum">
         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
         <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.20"/></proof>
          </goal>
          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="0.74"/></proof>
          </goal>
          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.13" steps="217"/></proof>
          </goal>
          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="kronecker_scalar_distr">
              <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="pps_apply_scal">
               <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="scalar_eq_gen">
                <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="instantiate" proved="true" arg1="pps_apply_basis_anc_" arg2="h,a,(path_sem_target (bv_to_ket a))">
                 <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="Hinst">
                  <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="rewrite" proved="true" arg1="H2">
                   <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
                   </goal>
                   <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                   <transf name="replace" proved="true" arg1="(h_width h - 1)" arg2="(length a)">
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="1.79" steps="220"/></proof>
                    </goal>
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                    <transf name="replace" proved="true" arg1="(h_width h - 1)" arg2="(h_width (pps_anc h))">
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.1.1.0" expl="equality hypothesis" proved="true">
                     <proof prover="2"><result status="valid" time="2.04" steps="220"/></proof>
                     </goal>
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.0.1.1.1" expl="equality hypothesis" proved="true">
                     <proof prover="2"><result status="valid" time="2.04" steps="220"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="0.46" steps="216"/></proof>
                  </goal>
                  <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(h_width h - 1)" arg2="(h_width (pps_anc h))">
                   <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                   <proof prover="2"><result status="valid" time="1.90" steps="220"/></proof>
                   </goal>
                   <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
                   <proof prover="2"><result status="valid" time="1.91" steps="220"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                  <transf name="replace" proved="true" arg1="(pps_apply_basis h (concat a (make_bv (fun (_:int) -&gt; 0) 1)))" arg2="(pps_apply h (bv_to_ket (concat a (make_bv (fun (_:int) -&gt; 0) 1))))">
                   <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
                   <transf name="rewrite" proved="true" arg1="ket_to_bv_concat">
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
                    <transf name="replace" proved="true" arg1="(bv_to_ket (make_bv (fun (_:int) -&gt; 0) 1))" arg2="(ket 1 0)">
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0" expl="rewrite premises" proved="true">
                     <transf name="apply" proved="true" arg1="H2">
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="replace" proved="true" arg1="(h_width h - 1)" arg2="(h_width (pps_anc h))">
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.03" steps="220"/></proof>
                       </goal>
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="equality hypothesis" proved="true">
                       <proof prover="2"><result status="valid" time="1.99" steps="220"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1" expl="equality hypothesis" proved="true">
                     <transf name="eliminate_definition" proved="true" >
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0" expl="equality hypothesis" proved="true">
                      <transf name="rewrite" proved="true" arg1="bv_to_ket_def">
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0" expl="equality hypothesis" proved="true">
                       <transf name="apply" proved="true" arg1="ket_eq">
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.0" expl="apply premises" proved="true">
                        <proof prover="0"><result status="valid" time="3.61"/></proof>
                        </goal>
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.1" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="make_bv_length">
                         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.1.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.43" steps="232"/></proof>
                         </goal>
                         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                         <proof prover="1"><result status="valid" time="1.62"/></proof>
                         </goal>
                         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.1.2" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.40" steps="232"/></proof>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2" expl="apply premises" proved="true">
                        <transf name="rewrite" proved="true" arg1="bv_to_int_sum">
                         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0" expl="apply premises" proved="true">
                         <transf name="rewrite" proved="true" arg1="ind_isum_one">
                          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.0" expl="apply premises" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.0.0" expl="apply premises" proved="true">
                           <transf name="rewrite" proved="true" arg1="assert_make_bv_b">
                            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                            <transf name="compute_specified" proved="true" >
                            </transf>
                            </goal>
                            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
                            <proof prover="1"><result status="valid" time="1.38"/></proof>
                            </goal>
                            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.40" steps="232"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.1" expl="rewrite premises" proved="true">
                          <transf name="rewrite" proved="true" arg1="make_bv_length">
                           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.1.0" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.41" steps="232"/></proof>
                           </goal>
                           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.1.1" expl="rewrite premises" proved="true">
                           <proof prover="0"><result status="valid" time="3.69"/></proof>
                           </goal>
                           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.0.0.1.0.0.2.0.1.2" expl="rewrite premises" proved="true">
                           <proof prover="2"><result status="valid" time="0.40" steps="232"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1" expl="equality hypothesis" proved="true">
                   <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.0" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="bv_to_ket_to_bv">
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.0.0" expl="equality hypothesis" proved="true">
                     <transf name="compute_specified" proved="true" >
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.1" expl="rewrite premises" proved="true">
                    <transf name="apply" proved="true" arg1="is_a_ket_l_bv_to_ket">
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.1.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="concat_length">
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.1.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="make_bv_length">
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.1.0.0.0" expl="apply premises" proved="true">
                       <transf name="replace" proved="true" arg1="(length a)" arg2="(h_width (pps_anc h))">
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.1.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.88" steps="220"/></proof>
                        </goal>
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
                        <proof prover="2"><result status="valid" time="1.92" steps="220"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.1.0.0.1" expl="rewrite premises" proved="true">
                       <proof prover="0"><result status="valid" time="0.93"/></proof>
                       </goal>
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.1.0.0.2" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.35" steps="216"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.3.1.2" expl="rewrite premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.21" steps="220"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4" expl="rewrite premises" proved="true">
                  <transf name="assert" proved="true" arg1="(is_a_ket_l (kronecker (path_sem_target @ bv_to_ket a) (ket 1 0))
  (h_width h))">
                   <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0" expl="asserted formula" proved="true">
                   <transf name="replace" proved="true" arg1="(kronecker (path_sem_target @ bv_to_ket a) (ket 1 0))" arg2="(pps_apply h1  (kronecker (bv_to_ket a) (ket 1 0)))">
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0" expl="asserted formula" proved="true">
                    <transf name="apply" proved="true" arg1="pps_apply_spec">
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(h_width h)" arg2="(h_width h -1 +1)">
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="kronecker_ket_l">
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.32" steps="216"/></proof>
                       </goal>
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0.0.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
                       </goal>
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0.0.2" expl="apply premises" proved="true">
                       <transf name="replace" proved="true" arg1="(h_width h - 1)" arg2="(h_width (pps_anc h))">
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0.0.2.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="1.93" steps="220"/></proof>
                        </goal>
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
                        <proof prover="2"><result status="valid" time="2.14" steps="220"/></proof>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0.0.3" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.06" steps="220"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.0.0.1" expl="equality hypothesis" proved="true">
                      <proof prover="2"><result status="valid" time="0.33" steps="216"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.1" expl="equality hypothesis" proved="true">
                    <transf name="rewrite" proved="true" arg1="H2">
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.1.0" expl="equality hypothesis" proved="true">
                     <transf name="compute_specified" proved="true" >
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.1.1" expl="rewrite premises" proved="true">
                     <transf name="replace" proved="true" arg1="(h_width h - 1)" arg2="(h_width (pps_anc h))">
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.1.1.0" expl="rewrite premises" proved="true">
                      <proof prover="1"><result status="valid" time="1.12"/></proof>
                      </goal>
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.0.1.1.1" expl="equality hypothesis" proved="true">
                      <proof prover="2"><result status="valid" time="2.19" steps="220"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1" expl="rewrite premises" proved="true">
                   <transf name="assert" proved="true" arg1="(rows (kronecker (path_sem_target @ bv_to_ket a) (ket 1 0))  = power_ 2 (h_width h1 - 1) *2 )">
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.0" expl="asserted formula" proved="true">
                    <transf name="replace" proved="true" arg1="(power_ 2 (h_width h2 - 1) * 2)" arg2="(power_ 2 (h_width h2 ) )">
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.0.0" expl="asserted formula" proved="true">
                     <transf name="rewrite" proved="true" arg1="power_no_">
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.0.0.0" expl="asserted formula" proved="true">
                      <transf name="apply" proved="true" arg1="ket_l_rows">
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="0.40" steps="218"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.0.0.1" expl="rewrite premises" proved="true">
                      <proof prover="2"><result status="valid" time="0.33" steps="218"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.0.1" expl="equality hypothesis" proved="true">
                     <proof prover="2"><result status="valid" time="1.98" steps="222"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1" expl="rewrite premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="kronecker_rows" arg2="in" arg3="h">
                     <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0" expl="rewrite premises" proved="true">
                     <transf name="eliminate_definition" proved="true" >
                      <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0" expl="rewrite premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="is_a_ket_l_def">
                       <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.0" proved="true">
                        <proof prover="2"><result status="valid" time="0.53" steps="236"/></proof>
                        </goal>
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1" proved="true">
                        <transf name="assert" proved="true" arg1="(columns (kronecker (path_sem_target @ bv_to_ket a) (ket 1 0)) = 1)">
                         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1.0" expl="asserted formula" proved="true">
                         <proof prover="0"><result status="valid" time="4.33"/></proof>
                         </goal>
                         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1.1" proved="true">
                         <transf name="rewrite" proved="true" arg1="kronecker_columns" arg2="in" arg3="h">
                          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1.1.0" proved="true">
                          <transf name="assert" proved="true" arg1="(forall a . a*1 = 1 -&gt; a = 1)">
                           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1.1.0.0" expl="asserted formula" proved="true">
                           <proof prover="2"><result status="valid" time="0.45" steps="240"/></proof>
                           </goal>
                           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1.1.0.1" proved="true">
                           <transf name="apply" proved="true" arg1="h">
                            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1.1.0.1.0" expl="apply premises" proved="true">
                            <transf name="replace" proved="true" arg1="(columns (ket 1 0))" arg2="1" arg3="in" arg4="h1">
                             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1.1.0.1.0.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.59" steps="238"/></proof>
                             </goal>
                             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.1.1.0.1.0.1" expl="equality hypothesis" proved="true">
                             <proof prover="0"><result status="valid" time="3.92"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2" proved="true">
                        <transf name="rewrite" proved="true" arg1="power_to_">
                         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.0" proved="true">
                         <transf name="assert" proved="true" arg1="(forall a b. a*2 = b*2 -&gt; a = b)">
                          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.0.0" expl="asserted formula" proved="true">
                          <proof prover="2"><result status="valid" time="0.49" steps="238"/></proof>
                          </goal>
                          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.0.1" proved="true">
                          <transf name="apply" proved="true" arg1="h">
                           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.0.1.0" expl="apply premises" proved="true">
                           <transf name="replace" proved="true" arg1="(rows (ket 1 0))" arg2="2" arg3="in" arg4="h1">
                            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.0.1.0.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="0.51" steps="236"/></proof>
                            </goal>
                            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.0.1.0.1" expl="equality hypothesis" proved="true">
                            <transf name="replace" proved="true" arg1="2" arg2="(power_ 2 1)">
                             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.0.1.0.1.0" expl="equality hypothesis" proved="true">
                             <proof prover="1"><result status="valid" time="1.26"/></proof>
                             </goal>
                             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.0.1.0.1.1" expl="equality hypothesis" proved="true">
                             <proof prover="1"><result status="valid" time="1.18"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0.0.4.1.1.0.0.0.2.1" expl="rewrite premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.45" steps="236"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.0.1" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.1" expl="rewrite premises" proved="true">
               <transf name="replace" proved="true" arg1="(h_width h)" arg2="((h_width (pps_anc h))+1)">
                <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                <transf name="apply" proved="true" arg1="kronecker_ket_l">
                 <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.25" steps="219"/></proof>
                 </goal>
                 <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.1" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.36" steps="216"/></proof>
                 </goal>
                 <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.2" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.19" steps="219"/></proof>
                 </goal>
                 <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.1.0.3" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.08" steps="219"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.0.3.0.0.0.0.1.1" expl="equality hypothesis" proved="true">
                <proof prover="2"><result status="valid" time="1.92" steps="219"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.11" steps="217"/></proof>
         </goal>
         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
           <transf name="replace" proved="true" arg1="(h_width h)" arg2="((h_width (pps_anc h))+1)">
            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="kronecker_ket_l">
             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="2.06" steps="219"/></proof>
             </goal>
             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="0.45" steps="216"/></proof>
             </goal>
             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.0.2" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="scalar_ket_l">
              <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.0.2.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(h_width (pps_anc h))" arg2="(h_width h - 1)">
               <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.0.2.0.0" expl="apply premises" proved="true">
               <proof prover="2"><result status="valid" time="1.84" steps="219"/></proof>
               </goal>
               <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.0.2.0.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="1.83" steps="219"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.0.3" expl="apply premises" proved="true">
             <proof prover="2"><result status="valid" time="1.99" steps="219"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.2.0.0.1" expl="equality hypothesis" proved="true">
            <proof prover="2"><result status="valid" time="1.93" steps="219"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_anc.0.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.94" steps="217"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_anc.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_apply_anc.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_apply_anc.0.0.0.0.0.0.1.0.0" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="2.19" steps="219"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_anc.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="1.84" steps="217"/></proof>
        </goal>
        <goal name="VC pps_apply_anc.0.0.0.0.0.0.3" expl="rewrite premises" proved="true">
        <transf name="rewrite" proved="true" arg1="n_bvs_card">
         <goal name="VC pps_apply_anc.0.0.0.0.0.0.3.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="1.86" steps="217"/></proof>
         </goal>
         <goal name="VC pps_apply_anc.0.0.0.0.0.0.3.1" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.39" steps="214"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_anc.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="kronecker_eq">
        <goal name="VC pps_apply_anc.0.0.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="Hinst">
         <goal name="VC pps_apply_anc.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.38" steps="214"/></proof>
         </goal>
         <goal name="VC pps_apply_anc.0.0.0.0.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.82" steps="216"/></proof>
         </goal>
         <goal name="VC pps_apply_anc.0.0.0.0.0.1.0.2" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.82" steps="216"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_anc.0.0.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.41" steps="214"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_anc.0.0.0.1" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_apply_anc.0.0.0.1.0" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_apply_anc.0.0.0.1.0.0" expl="rewrite premises" proved="true">
       <transf name="apply" proved="true" arg1="scalar_ket_l">
        <goal name="VC pps_apply_anc.0.0.0.1.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.14" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_anc.0.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.84" steps="216"/></proof>
     </goal>
     <goal name="VC pps_apply_anc.0.0.0.3" expl="rewrite premises" proved="true">
     <transf name="rewrite" proved="true" arg1="n_bvs_card">
      <goal name="VC pps_apply_anc.0.0.0.3.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.90" steps="216"/></proof>
      </goal>
      <goal name="VC pps_apply_anc.0.0.0.3.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.81" steps="216"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_anc.0.0.1" expl="rewrite premises" proved="true">
    <proof prover="0"><result status="valid" time="0.86"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_anc.0.1" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="kronecker_injec_eq_left" arg2="(pps_apply (pps_anc h1) x),(path_sem_target @ x),(ket 1 0)
">
    <goal name="VC pps_apply_anc.0.1.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="Hinst">
     <goal name="VC pps_apply_anc.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="h">
      <goal name="VC pps_apply_anc.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="H1">
       <goal name="VC pps_apply_anc.0.1.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.34" steps="216"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_anc.0.1.0.1" expl="apply premises" proved="true">
     <transf name="assert" proved="true" arg1="(get (ket 1 0) 0 0 = c_one)">
      <goal name="VC pps_apply_anc.0.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.88"/></proof>
      </goal>
      <goal name="VC pps_apply_anc.0.1.0.1.1" expl="apply premises" proved="true">
      <transf name="assert" proved="true" arg1="(valid_index (ket 1 0) 0 0 )">
       <goal name="VC pps_apply_anc.0.1.0.1.1.0" expl="asserted formula" proved="true">
       <transf name="apply" proved="true" arg1="set_valid_index">
        <goal name="VC pps_apply_anc.0.1.0.1.1.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.16" steps="221"/></proof>
        </goal>
        <goal name="VC pps_apply_anc.0.1.0.1.1.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.28" steps="221"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_anc.0.1.0.1.1.1" expl="apply premises" proved="true">
       <proof prover="1"><result status="valid" time="1.06"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_equiv_seq" expl="VC for pps_apply_equiv_seq" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_equiv_seq.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_pps_apply_equiv">
   <goal name="VC pps_apply_equiv_seq.0.0" expl="apply premises" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_apply_equiv_seq.0.0.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_seq_spec3">
     <goal name="VC pps_apply_equiv_seq.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_seq_spec3">
      <goal name="VC pps_apply_equiv_seq.0.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.08" steps="218"/></proof>
      </goal>
      <goal name="VC pps_apply_equiv_seq.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.82"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_equiv_seq.0.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_apply_equiv_seq.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_apply_equiv_seq.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_apply_basis_seq">
     <goal name="VC pps_apply_equiv_seq.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_basis_seq">
      <goal name="VC pps_apply_equiv_seq.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="replace" proved="true" arg1="(pps_apply_basis h1 x)" arg2="(pps_apply_basis h1&#39; x)">
       <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="get_pps_apply_equiv">
        <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.26" steps="220"/></proof>
        </goal>
        <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.41" steps="218"/></proof>
        </goal>
        <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="pps_apply_basis_ket_l">
         <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.0.2.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.11" steps="220"/></proof>
         </goal>
         <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.0.2.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.01" steps="220"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.1" expl="equality hypothesis" proved="true">
       <transf name="apply" proved="true" arg1="get_pps_apply_basis_equiv">
        <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.1.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.98" steps="220"/></proof>
        </goal>
        <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.1.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.34" steps="218"/></proof>
        </goal>
        <goal name="VC pps_apply_equiv_seq.0.1.0.0.0.1.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="3.04" steps="220"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_equiv_seq.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.24"/></proof>
      </goal>
      <goal name="VC pps_apply_equiv_seq.0.1.0.0.2" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="1.19"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_equiv_seq.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.43" steps="220"/></proof>
     </goal>
     <goal name="VC pps_apply_equiv_seq.0.1.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.38" steps="218"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_equiv_par" expl="VC for pps_apply_equiv_par" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_equiv_par.0" expl="postcondition" proved="true">
  <transf name="apply" proved="true" arg1="set_pps_apply_equiv">
   <goal name="VC pps_apply_equiv_par.0.0" expl="apply premises" proved="true">
   <proof prover="0"><result status="valid" time="0.98"/></proof>
   </goal>
   <goal name="VC pps_apply_equiv_par.0.1" expl="apply premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_apply_equiv_par.0.1.0" expl="apply premises" proved="true">
    <transf name="rewrite" proved="true" arg1="pps_apply_basis_par">
     <goal name="VC pps_apply_equiv_par.0.1.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_apply_basis_par">
      <goal name="VC pps_apply_equiv_par.0.1.0.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="kronecker_eq">
       <goal name="VC pps_apply_equiv_par.0.1.0.0.0.0" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(h_width h1&#39;)" arg2="(h_width h1)">
        <goal name="VC pps_apply_equiv_par.0.1.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="get_pps_apply_basis_equiv">
         <goal name="VC pps_apply_equiv_par.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.07" steps="218"/></proof>
         </goal>
         <goal name="VC pps_apply_equiv_par.0.1.0.0.0.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.34" steps="216"/></proof>
         </goal>
         <goal name="VC pps_apply_equiv_par.0.1.0.0.0.0.0.2" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.89" steps="218"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_equiv_par.0.1.0.0.0.0.1" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="1.88" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_equiv_par.0.1.0.0.0.1" expl="apply premises" proved="true">
       <transf name="replace" proved="true" arg1="(h_width h1&#39;)" arg2="(h_width h1)">
        <goal name="VC pps_apply_equiv_par.0.1.0.0.0.1.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="get_pps_apply_basis_equiv">
         <goal name="VC pps_apply_equiv_par.0.1.0.0.0.1.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="1.89" steps="218"/></proof>
         </goal>
         <goal name="VC pps_apply_equiv_par.0.1.0.0.0.1.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.33" steps="216"/></proof>
         </goal>
         <goal name="VC pps_apply_equiv_par.0.1.0.0.0.1.0.2" expl="apply premises" proved="true">
         <proof prover="1"><result status="valid" time="1.07"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_equiv_par.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
        <proof prover="2"><result status="valid" time="1.93" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_equiv_par.0.1.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="0"><result status="valid" time="0.83"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_apply_equiv_par.0.1.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="1.91" steps="218"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_apply_equiv_anc" expl="VC for pps_apply_equiv_anc" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_apply_equiv_anc.0" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H">
   <goal name="VC pps_apply_equiv_anc.0.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="set_pps_apply_equiv">
    <goal name="VC pps_apply_equiv_anc.0.0.0" expl="apply premises" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_apply_equiv_anc.0.0.0.0" expl="apply premises" proved="true">
     <transf name="rewrite" proved="true" arg1="pps_anc_spec3">
      <goal name="VC pps_apply_equiv_anc.0.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_anc_spec3">
       <goal name="VC pps_apply_equiv_anc.0.0.0.0.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="2.17" steps="216"/></proof>
       </goal>
       <goal name="VC pps_apply_equiv_anc.0.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="0.94"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_equiv_anc.0.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.34" steps="214"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_apply_equiv_anc.0.0.1" expl="apply premises" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="VC pps_apply_equiv_anc.0.0.1.0" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="( pps_apply_basis (pps_anc h) x )" arg2="(path_sem_target x)">
      <goal name="VC pps_apply_equiv_anc.0.0.1.0.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="goal_comm">
       <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="pps_apply_basis_anc_">
        <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="0"><result status="valid" time="0.91"/></proof>
        </goal>
        <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.1" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(h_width h&#39;)" arg2="(h_width h)">
         <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.1.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.13" steps="218"/></proof>
         </goal>
         <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.1.1" expl="equality hypothesis" proved="true">
         <proof prover="2"><result status="valid" time="2.19" steps="218"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(pps_apply_basis h&#39; (concat x (make_bv (fun (_:int) -&gt; 0) 1)))" arg2="(pps_apply_basis h (concat x (make_bv (fun (_:int) -&gt; 0) 1)))">
         <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H1">
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.82" steps="218"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.1" expl="equality hypothesis" proved="true">
         <transf name="apply" proved="true" arg1="get_pps_apply_basis_equiv">
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.1.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.06" steps="218"/></proof>
          </goal>
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.1.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.08" steps="218"/></proof>
          </goal>
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.1.2" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="concat_length">
           <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.1.2.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.1.2.0.0" expl="apply premises" proved="true">
            <proof prover="0"><result status="valid" time="0.76"/></proof>
            </goal>
            <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.1.2.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="0.92"/></proof>
            </goal>
            <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.2.1.2.0.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.31" steps="216"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="kron_to_ket_l">
         <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="0.87"/></proof>
         </goal>
         <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1" expl="apply premises" proved="true">
         <transf name="replace" proved="true" arg1="(kronecker (path_sem_target @ x) (ket 1 0))" arg2="(pps_apply_basis h (concat x (make_bv (fun (_:int) -&gt; 0) 1)))">
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="pps_apply_basis_ket_l">
           <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="concat_length">
            <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.0.0.0" expl="apply premises" proved="true">
            <transf name="rewrite" proved="true" arg1="make_bv_length">
             <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.0.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="0.96"/></proof>
             </goal>
             <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="0.98"/></proof>
             </goal>
             <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="2"><result status="valid" time="0.33" steps="216"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.0.1" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="1.88" steps="218"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.1" expl="equality hypothesis" proved="true">
          <transf name="rewrite" proved="true" arg1="H1">
           <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.1.0" expl="equality hypothesis" proved="true">
           <proof prover="2"><result status="valid" time="0.30" steps="216"/></proof>
           </goal>
           <goal name="VC pps_apply_equiv_anc.0.0.1.0.0.0.3.1.1.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="1.84" steps="218"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_apply_equiv_anc.0.0.1.0.1" expl="equality hypothesis" proved="true">
      <transf name="apply" proved="true" arg1="pps_apply_basis_anc_">
       <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.43" steps="216"/></proof>
       </goal>
       <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="1.91" steps="218"/></proof>
       </goal>
       <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.2" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="H1">
        <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.2.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="1.95" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="kron_to_ket_l">
        <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.44" steps="216"/></proof>
        </goal>
        <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1" expl="apply premises" proved="true">
        <transf name="replace" proved="true" arg1="(kronecker (path_sem_target @ x) (ket 1 0))" arg2="(pps_apply_basis h (concat x (make_bv (fun (_:int) -&gt; 0) 1)))">
         <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="pps_apply_basis_ket_l">
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="concat_length">
           <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="make_bv_length">
            <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.0.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="1.89" steps="218"/></proof>
            </goal>
            <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.0.0.0.1" expl="rewrite premises" proved="true">
            <proof prover="0"><result status="valid" time="0.91"/></proof>
            </goal>
            <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.0.0.0.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.35" steps="216"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.36" steps="216"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.1" expl="equality hypothesis" proved="true">
         <transf name="rewrite" proved="true" arg1="H1">
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.1.0" expl="equality hypothesis" proved="true">
          <proof prover="2"><result status="valid" time="0.41" steps="216"/></proof>
          </goal>
          <goal name="VC pps_apply_equiv_anc.0.0.1.0.1.3.1.1.1" expl="rewrite premises" proved="true">
          <proof prover="2"><result status="valid" time="1.88" steps="218"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_anc_pred" expl="VC for pps_anc_pred" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_anc_pred.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="216"/></proof>
  </goal>
  <goal name="VC pps_anc_pred.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="220"/></proof>
  </goal>
  <goal name="VC pps_anc_pred.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.30" steps="221"/></proof>
  </goal>
  <goal name="VC pps_anc_pred.3" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H7">
   <goal name="VC pps_anc_pred.3.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H11">
    <goal name="VC pps_anc_pred.3.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC pps_anc_pred.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.95" steps="231"/></proof>
    </goal>
    <goal name="VC pps_anc_pred.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="2.04" steps="231"/></proof>
    </goal>
    <goal name="VC pps_anc_pred.3.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.31" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_anc_pred.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC pps_anc_pred.4.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H9">
    <goal name="VC pps_anc_pred.4.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC pps_anc_pred.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.81" steps="227"/></proof>
    </goal>
    <goal name="VC pps_anc_pred.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.80" steps="227"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_anc_pred.5" expl="postcondition" proved="true">
  <transf name="replace" proved="true" arg1="(pps_apply_basis h2 x )" arg2="(pps_apply_basis (pps_anc h1) x )">
   <goal name="VC pps_anc_pred.5.0" expl="postcondition" proved="true">
   <transf name="apply" proved="true" arg1="pps_apply_basis_anc_">
    <goal name="VC pps_anc_pred.5.0.0" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.29" steps="224"/></proof>
    </goal>
    <goal name="VC pps_anc_pred.5.0.1" expl="apply premises" proved="true">
    <proof prover="2"><result status="valid" time="0.32" steps="224"/></proof>
    </goal>
    <goal name="VC pps_anc_pred.5.0.2" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="H10">
     <goal name="VC pps_anc_pred.5.0.2.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_anc_pred.5.0.3" expl="apply premises" proved="true">
    <transf name="apply" proved="true" arg1="kron_to_ket_l">
     <goal name="VC pps_anc_pred.5.0.3.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.35" steps="224"/></proof>
     </goal>
     <goal name="VC pps_anc_pred.5.0.3.1" expl="apply premises" proved="true">
     <transf name="replace" proved="true" arg1="(kronecker (path_sem_target @ x) (ket 1 0))" arg2="(pps_apply_basis h1 (concat x (make_bv (fun (_:int) -&gt; 0) 1)))">
      <goal name="VC pps_anc_pred.5.0.3.1.0" expl="apply premises" proved="true">
      <transf name="apply" proved="true" arg1="pps_apply_basis_ket_l">
       <goal name="VC pps_anc_pred.5.0.3.1.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="concat_length">
        <goal name="VC pps_anc_pred.5.0.3.1.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="make_bv_length">
         <goal name="VC pps_anc_pred.5.0.3.1.0.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="0.45" steps="224"/></proof>
         </goal>
         <goal name="VC pps_anc_pred.5.0.3.1.0.0.0.1" expl="rewrite premises" proved="true">
         <proof prover="0"><result status="valid" time="0.91"/></proof>
         </goal>
         <goal name="VC pps_anc_pred.5.0.3.1.0.0.0.2" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="0.40" steps="224"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_anc_pred.5.0.3.1.0.1" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="0.33" steps="224"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_anc_pred.5.0.3.1.1" expl="equality hypothesis" proved="true">
      <transf name="rewrite" proved="true" arg1="H10">
       <goal name="VC pps_anc_pred.5.0.3.1.1.0" expl="equality hypothesis" proved="true">
       <transf name="compute_specified" proved="true" >
       </transf>
       </goal>
       <goal name="VC pps_anc_pred.5.0.3.1.1.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.35" steps="224"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_anc_pred.5.1" expl="equality hypothesis" proved="true">
   <proof prover="2"><result status="valid" time="2.00" steps="226"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_anc_pred_" expl="VC for pps_anc_pred_" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_anc_pred_.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="220"/></proof>
  </goal>
  <goal name="VC pps_anc_pred_.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.46" steps="224"/></proof>
  </goal>
  <goal name="VC pps_anc_pred_.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.33" steps="225"/></proof>
  </goal>
  <goal name="VC pps_anc_pred_.3" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H7">
   <goal name="VC pps_anc_pred_.3.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H11">
    <goal name="VC pps_anc_pred_.3.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC pps_anc_pred_.3.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.84" steps="235"/></proof>
    </goal>
    <goal name="VC pps_anc_pred_.3.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="1.89" steps="235"/></proof>
    </goal>
    <goal name="VC pps_anc_pred_.3.0.3" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.35" steps="230"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_anc_pred_.4" expl="precondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H5">
   <goal name="VC pps_anc_pred_.4.0" expl="precondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H9">
    <goal name="VC pps_anc_pred_.4.0.0" expl="precondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC pps_anc_pred_.4.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="2.14" steps="231"/></proof>
    </goal>
    <goal name="VC pps_anc_pred_.4.0.2" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="2.27" steps="231"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_anc_pred_.5" expl="postcondition" proved="true">
  <transf name="destruct" proved="true" arg1="H10">
   <goal name="VC pps_anc_pred_.5.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H10">
    <goal name="VC pps_anc_pred_.5.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="kronecker_eq">
     <goal name="VC pps_anc_pred_.5.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="goal_comm">
      <goal name="VC pps_anc_pred_.5.0.0.0.0" expl="apply premises" proved="true">
      <transf name="instantiate" proved="true" arg1="pps_anc_pred" arg2="h1,h2,path_sem_target">
       <goal name="VC pps_anc_pred_.5.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="Hinst">
        <goal name="VC pps_anc_pred_.5.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.47" steps="224"/></proof>
        </goal>
        <goal name="VC pps_anc_pred_.5.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_anc_pred_.5.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H11">
          <goal name="VC pps_anc_pred_.5.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.41" steps="226"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_anc_pred_.5.0.0.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.35" steps="224"/></proof>
        </goal>
        <goal name="VC pps_anc_pred_.5.0.0.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.47" steps="224"/></proof>
        </goal>
        <goal name="VC pps_anc_pred_.5.0.0.0.0.0.4" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_anc_pred_.5.0.0.0.0.0.4.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H11">
          <goal name="VC pps_anc_pred_.5.0.0.0.0.0.4.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.12" steps="234"/></proof>
          </goal>
          <goal name="VC pps_anc_pred_.5.0.0.0.0.0.4.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.14" steps="234"/></proof>
          </goal>
          <goal name="VC pps_anc_pred_.5.0.0.0.0.0.4.0.2" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.43" steps="228"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_anc_pred_.5.0.0.0.0.0.5" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_anc_pred_.5.0.0.0.0.0.5.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="H8">
          <goal name="VC pps_anc_pred_.5.0.0.0.0.0.5.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="1.96" steps="230"/></proof>
          </goal>
          <goal name="VC pps_anc_pred_.5.0.0.0.0.0.5.0.1" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="2.17" steps="230"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_anc_pred_.5.0.0.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.37" steps="224"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_anc_pred_.5.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.35" steps="224"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_anc_pred_.5.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.37" steps="224"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC pps_to_mat" expl="VC for pps_to_mat" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC pps_to_mat.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="214"/></proof>
  </goal>
  <goal name="VC pps_to_mat.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="214"/></proof>
  </goal>
  <goal name="VC pps_to_mat.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.35" steps="228"/></proof>
  </goal>
  <goal name="VC pps_to_mat.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.34" steps="228"/></proof>
  </goal>
  <goal name="VC pps_to_mat.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.95"/></proof>
  </goal>
  <goal name="VC pps_to_mat.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.38" steps="216"/></proof>
  </goal>
  <goal name="VC pps_to_mat.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.93"/></proof>
  </goal>
  <goal name="VC pps_to_mat.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.31" steps="212"/></proof>
  </goal>
  <goal name="VC pps_to_mat.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.91"/></proof>
  </goal>
  <goal name="VC pps_to_mat.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.82"/></proof>
  </goal>
  <goal name="VC pps_to_mat.10" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.42" steps="214"/></proof>
  </goal>
  <goal name="VC pps_to_mat.11" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_to_mat.11.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="2.11" steps="221"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.12" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_to_mat.12.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="2.18" steps="221"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.13" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.12" steps="212"/></proof>
  </goal>
  <goal name="VC pps_to_mat.14" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="1.86" steps="215"/></proof>
  </goal>
  <goal name="VC pps_to_mat.15" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.32" steps="214"/></proof>
  </goal>
  <goal name="VC pps_to_mat.16" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_to_mat.16.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_to_mat.16.0.0" expl="precondition" proved="true">
    <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec1">
     <goal name="VC pps_to_mat.16.0.0.0" expl="precondition" proved="true">
     <proof prover="2"><result status="valid" time="0.32" steps="216"/></proof>
     </goal>
     <goal name="VC pps_to_mat.16.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.35" steps="216"/></proof>
     </goal>
     <goal name="VC pps_to_mat.16.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="0.36" steps="216"/></proof>
     </goal>
     <goal name="VC pps_to_mat.16.0.0.3" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_to_mat.16.0.0.3.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.95" steps="221"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_to_mat.16.0.0.4" expl="rewrite premises" proved="true">
     <transf name="compute_specified" proved="true" >
      <goal name="VC pps_to_mat.16.0.0.4.0" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="1.97" steps="221"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.17" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
   <goal name="VC pps_to_mat.17.0" expl="precondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC pps_to_mat.17.0.0" expl="precondition" proved="true">
    <transf name="apply" proved="true" arg1="mat_sum_dim_spec">
     <goal name="VC pps_to_mat.17.0.0.0" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.35" steps="216"/></proof>
     </goal>
     <goal name="VC pps_to_mat.17.0.0.1" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="0.34" steps="216"/></proof>
     </goal>
     <goal name="VC pps_to_mat.17.0.0.2" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_to_mat.17.0.0.2.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.17.0.0.2.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="2.24" steps="223"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_to_mat.17.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_to_mat.17.0.0.3.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.17.0.0.3.0.0" expl="apply premises" proved="true">
       <proof prover="2"><result status="valid" time="2.22" steps="223"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.18" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="2.22" steps="222"/></proof>
  </goal>
  <goal name="VC pps_to_mat.19" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC pps_to_mat.19.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="result_def">
    <goal name="VC pps_to_mat.19.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="scalar_eq">
     <goal name="VC pps_to_mat.19.0.0.0" expl="apply premises" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_dim_eq">
      <goal name="VC pps_to_mat.19.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.21"/></proof>
      </goal>
      <goal name="VC pps_to_mat.19.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="1"><result status="valid" time="1.25"/></proof>
      </goal>
      <goal name="VC pps_to_mat.19.0.0.0.2" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.19.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_to_mat.19.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec1">
          <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.53" steps="246"/></proof>
          </goal>
          <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="3.89"/></proof>
          </goal>
          <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="3.95"/></proof>
          </goal>
          <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.3" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.3.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.3.0.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.65"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.4" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.4.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_to_mat.19.0.0.0.2.0.0.0.4.0.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.60"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_to_mat.19.0.0.0.3" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_to_mat.19.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="split_all_full" proved="true" >
        <goal name="VC pps_to_mat.19.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec">
          <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="2"><result status="valid" time="0.53" steps="246"/></proof>
          </goal>
          <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.1" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="4.44"/></proof>
          </goal>
          <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.2" expl="rewrite premises" proved="true">
          <proof prover="0"><result status="valid" time="4.48"/></proof>
          </goal>
          <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.3" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.3.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.3.0.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.51"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.4" expl="rewrite premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.4.0" expl="rewrite premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_to_mat.19.0.0.0.3.0.0.0.4.0.0" expl="rewrite premises" proved="true">
            <proof prover="1"><result status="valid" time="1.42"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_to_mat.19.0.0.0.4" expl="apply premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_to_mat.19.0.0.0.4.0" expl="apply premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_to_mat.19.0.0.0.4.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_dim_eq">
         <goal name="VC pps_to_mat.19.0.0.0.4.0.0.0" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="4.02"/></proof>
         </goal>
         <goal name="VC pps_to_mat.19.0.0.0.4.0.0.1" expl="apply premises" proved="true">
         <proof prover="0"><result status="valid" time="3.91"/></proof>
         </goal>
         <goal name="VC pps_to_mat.19.0.0.0.4.0.0.2" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_to_mat.19.0.0.0.4.0.0.2.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.54"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_to_mat.19.0.0.0.4.0.0.3" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_to_mat.19.0.0.0.4.0.0.3.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.56"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0" expl="apply premises" proved="true">
           <transf name="eliminate_if" proved="true" >
            <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0" proved="true">
            <transf name="split_vc" proved="true" >
             <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0" expl="apply premises" proved="true">
             <transf name="eliminate_epsilon" proved="true" >
              <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="apply" proved="true" arg1="set_equal_mat">
               <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.0" expl="apply premises" proved="true">
               <proof prover="1"><result status="valid" time="1.34"/></proof>
               </goal>
               <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.1" expl="apply premises" proved="true">
               <proof prover="1"><result status="valid" time="1.37"/></proof>
               </goal>
               <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.2" expl="apply premises" proved="true">
               <transf name="split_vc" proved="true" >
                <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.2.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="assert_make">
                 <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="assert_make">
                  <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                  <proof prover="0"><result status="valid" time="3.98"/></proof>
                  </goal>
                  <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
                  <proof prover="1"><result status="valid" time="1.26"/></proof>
                  </goal>
                  <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="1"><result status="valid" time="1.08"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.2.0.1" expl="rewrite premises" proved="true">
                 <proof prover="1"><result status="valid" time="1.10"/></proof>
                 </goal>
                 <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.0.0.2.0.2" expl="rewrite premises" proved="true">
                 <proof prover="1"><result status="valid" time="1.31"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_to_mat.19.0.0.0.4.0.0.4.0.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="3.73"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.20" expl="postcondition" proved="true">
  <transf name="eliminate_definition" proved="true" >
   <goal name="VC pps_to_mat.20.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="H">
    <goal name="VC pps_to_mat.20.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="scalar_eq">
     <goal name="VC pps_to_mat.20.0.0.0" expl="apply premises" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="VC pps_to_mat.20.0.0.0.0" expl="apply premises" proved="true">
      <transf name="rewrite" proved="true" arg1="mat_sum_dim_def">
       <goal name="VC pps_to_mat.20.0.0.0.0.0" expl="apply premises" proved="true">
       <transf name="apply" proved="true" arg1="mat_sum_eq">
        <goal name="VC pps_to_mat.20.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.56" steps="246"/></proof>
        </goal>
        <goal name="VC pps_to_mat.20.0.0.0.0.0.1" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="set_constant_size_exists">
         <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0" expl="apply premises" proved="true">
         <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
          <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec1">
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.0" proved="true">
             <proof prover="2"><result status="valid" time="0.45" steps="248"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="1.40"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="1.22"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.3" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.3.0" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="assert_make_r">
                <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="4.78"/></proof>
                </goal>
                <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="3.97"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.4" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.4.0" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.4.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="assert_make_c">
                <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.4.0.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="4.78"/></proof>
                </goal>
                <goal name="VC pps_to_mat.20.0.0.0.0.0.1.0.0.0.0.4.0.0.1" expl="apply premises" proved="true">
                <proof prover="1"><result status="valid" time="1.47"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0" expl="apply premises" proved="true">
          <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
           <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0" proved="true">
            <transf name="rewrite" proved="true" arg1="mat_sum_dim_spec">
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.0" proved="true">
             <proof prover="2"><result status="valid" time="0.52" steps="248"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
             <proof prover="0"><result status="valid" time="3.98"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="1.37"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.3" expl="rewrite premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.3.0" expl="rewrite premises" proved="true">
              <transf name="compute_specified" proved="true" >
               <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.3.0.0" expl="rewrite premises" proved="true">
               <proof prover="1"><result status="valid" time="1.41"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.4" expl="rewrite premises" proved="true">
             <transf name="compute_specified" proved="true" >
              <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.4.0" expl="rewrite premises" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.4.0.0" expl="rewrite premises" proved="true">
               <transf name="apply" proved="true" arg1="assert_make_c">
                <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.4.0.0.0" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="4.38"/></proof>
                </goal>
                <goal name="VC pps_to_mat.20.0.0.0.0.0.1.1.0.0.0.4.0.0.1" expl="apply premises" proved="true">
                <proof prover="0"><result status="valid" time="4.46"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC pps_to_mat.20.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="compute_specified" proved="true" >
          <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="mat_sum_dim_def">
           <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="4.76"/></proof>
           </goal>
           <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
           <proof prover="0"><result status="valid" time="4.00"/></proof>
           </goal>
           <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.2" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.2.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.2.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="assert_make_r">
              <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.2.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="4.39"/></proof>
              </goal>
              <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.2.0.0.1" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="4.40"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.3" expl="apply premises" proved="true">
           <transf name="split_vc" proved="true" >
            <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.3.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.3.0.0" expl="apply premises" proved="true">
             <transf name="apply" proved="true" arg1="assert_make_c">
              <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.3.0.0.0" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="4.05"/></proof>
              </goal>
              <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.3.0.0.1" expl="apply premises" proved="true">
              <proof prover="0"><result status="valid" time="4.61"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_to_mat.20.0.0.0.0.0.2.0.0.4" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="1.30"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_to_mat.20.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="4.66"/></proof>
       </goal>
       <goal name="VC pps_to_mat.20.0.0.0.0.2" expl="rewrite premises" proved="true">
       <proof prover="0"><result status="valid" time="4.63"/></proof>
       </goal>
       <goal name="VC pps_to_mat.20.0.0.0.0.3" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_to_mat.20.0.0.0.0.3.0" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="mat_sum_dim_spec1">
          <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.0" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.19"/></proof>
          </goal>
          <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.1" expl="apply premises" proved="true">
          <proof prover="1"><result status="valid" time="1.21"/></proof>
          </goal>
          <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="assert_make_r">
             <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.2.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="4.81"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.2.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="4.46"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.3.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.3.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="assert_make_c">
             <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.3.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="4.66"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.3.0.0.3.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="4.68"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_to_mat.20.0.0.0.0.4" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_to_mat.20.0.0.0.0.4.0" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0" expl="rewrite premises" proved="true">
         <transf name="apply" proved="true" arg1="mat_sum_dim_spec">
          <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="4.67"/></proof>
          </goal>
          <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.1" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="4.29"/></proof>
          </goal>
          <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.2" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.2.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.2.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="assert_make_r">
             <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.2.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="4.56"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.2.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="4.95"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.3" expl="apply premises" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.3.0" expl="apply premises" proved="true">
           <transf name="compute_specified" proved="true" >
            <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.3.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="assert_make_c">
             <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.3.0.0.0" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="3.95"/></proof>
             </goal>
             <goal name="VC pps_to_mat.20.0.0.0.0.4.0.0.3.0.0.1" expl="apply premises" proved="true">
             <proof prover="0"><result status="valid" time="3.92"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_to_mat.20.0.0.0.0.5" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.48" steps="246"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.21" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H1">
   <goal name="VC pps_to_mat.21.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_rows">
    <goal name="VC pps_to_mat.21.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_to_mat.21.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_dim_spec1">
      <goal name="VC pps_to_mat.21.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.30" steps="234"/></proof>
      </goal>
      <goal name="VC pps_to_mat.21.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.31" steps="234"/></proof>
      </goal>
      <goal name="VC pps_to_mat.21.0.0.0.2" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.21.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_to_mat.21.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_dim_spec1">
         <goal name="VC pps_to_mat.21.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.54" steps="236"/></proof>
         </goal>
         <goal name="VC pps_to_mat.21.0.0.0.2.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.53" steps="236"/></proof>
         </goal>
         <goal name="VC pps_to_mat.21.0.0.0.2.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.21.0.0.0.2.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.21.0.0.0.2.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="assert_make_r">
            <goal name="VC pps_to_mat.21.0.0.0.2.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.34" steps="238"/></proof>
            </goal>
            <goal name="VC pps_to_mat.21.0.0.0.2.0.0.2.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.36" steps="238"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_to_mat.21.0.0.0.2.0.0.3" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.21.0.0.0.2.0.0.3.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.21.0.0.0.2.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="assert_make_c">
            <goal name="VC pps_to_mat.21.0.0.0.2.0.0.3.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.24" steps="238"/></proof>
            </goal>
            <goal name="VC pps_to_mat.21.0.0.0.2.0.0.3.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.23" steps="238"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_to_mat.21.0.0.0.3" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.21.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_to_mat.21.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_dim_spec">
         <goal name="VC pps_to_mat.21.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.62" steps="236"/></proof>
         </goal>
         <goal name="VC pps_to_mat.21.0.0.0.3.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.52" steps="236"/></proof>
         </goal>
         <goal name="VC pps_to_mat.21.0.0.0.3.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.21.0.0.0.3.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.21.0.0.0.3.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="assert_make_r">
            <goal name="VC pps_to_mat.21.0.0.0.3.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.55" steps="238"/></proof>
            </goal>
            <goal name="VC pps_to_mat.21.0.0.0.3.0.0.2.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.43" steps="238"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_to_mat.21.0.0.0.3.0.0.3" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.21.0.0.0.3.0.0.3.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.21.0.0.0.3.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="assert_make_c">
            <goal name="VC pps_to_mat.21.0.0.0.3.0.0.3.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.55" steps="238"/></proof>
            </goal>
            <goal name="VC pps_to_mat.21.0.0.0.3.0.0.3.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.54" steps="238"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.22" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="H2">
   <goal name="VC pps_to_mat.22.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="scalar_columns">
    <goal name="VC pps_to_mat.22.0.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC pps_to_mat.22.0.0.0" expl="postcondition" proved="true">
     <transf name="apply" proved="true" arg1="mat_sum_dim_spec">
      <goal name="VC pps_to_mat.22.0.0.0.0" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.57" steps="236"/></proof>
      </goal>
      <goal name="VC pps_to_mat.22.0.0.0.1" expl="apply premises" proved="true">
      <proof prover="2"><result status="valid" time="2.51" steps="236"/></proof>
      </goal>
      <goal name="VC pps_to_mat.22.0.0.0.2" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.22.0.0.0.2.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_to_mat.22.0.0.0.2.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_dim_spec1">
         <goal name="VC pps_to_mat.22.0.0.0.2.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.21" steps="238"/></proof>
         </goal>
         <goal name="VC pps_to_mat.22.0.0.0.2.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.22" steps="238"/></proof>
         </goal>
         <goal name="VC pps_to_mat.22.0.0.0.2.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.22.0.0.0.2.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.22.0.0.0.2.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="assert_make_r">
            <goal name="VC pps_to_mat.22.0.0.0.2.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.36" steps="240"/></proof>
            </goal>
            <goal name="VC pps_to_mat.22.0.0.0.2.0.0.2.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.49" steps="240"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_to_mat.22.0.0.0.2.0.0.3" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.22.0.0.0.2.0.0.3.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.22.0.0.0.2.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="assert_make_c">
            <goal name="VC pps_to_mat.22.0.0.0.2.0.0.3.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.41" steps="240"/></proof>
            </goal>
            <goal name="VC pps_to_mat.22.0.0.0.2.0.0.3.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.36" steps="240"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_to_mat.22.0.0.0.3" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.22.0.0.0.3.0" expl="apply premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_to_mat.22.0.0.0.3.0.0" expl="apply premises" proved="true">
        <transf name="apply" proved="true" arg1="mat_sum_dim_spec">
         <goal name="VC pps_to_mat.22.0.0.0.3.0.0.0" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.41" steps="238"/></proof>
         </goal>
         <goal name="VC pps_to_mat.22.0.0.0.3.0.0.1" expl="apply premises" proved="true">
         <proof prover="2"><result status="valid" time="2.36" steps="238"/></proof>
         </goal>
         <goal name="VC pps_to_mat.22.0.0.0.3.0.0.2" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.22.0.0.0.3.0.0.2.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.22.0.0.0.3.0.0.2.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="assert_make_r">
            <goal name="VC pps_to_mat.22.0.0.0.3.0.0.2.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.43" steps="240"/></proof>
            </goal>
            <goal name="VC pps_to_mat.22.0.0.0.3.0.0.2.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.44" steps="240"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC pps_to_mat.22.0.0.0.3.0.0.3" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.22.0.0.0.3.0.0.3.0" expl="apply premises" proved="true">
          <transf name="compute_specified" proved="true" >
           <goal name="VC pps_to_mat.22.0.0.0.3.0.0.3.0.0" expl="apply premises" proved="true">
           <transf name="apply" proved="true" arg1="assert_make_c">
            <goal name="VC pps_to_mat.22.0.0.0.3.0.0.3.0.0.0" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.39" steps="240"/></proof>
            </goal>
            <goal name="VC pps_to_mat.22.0.0.0.3.0.0.3.0.0.1" expl="apply premises" proved="true">
            <proof prover="2"><result status="valid" time="2.41" steps="240"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.23" expl="postcondition" proved="true">
  <transf name="rewrite" proved="true" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC pps_to_mat.23.0" expl="postcondition" proved="true">
   <transf name="rewrite" proved="true" arg1="pps_apply_basis_decomp">
    <goal name="VC pps_to_mat.23.0.0" expl="postcondition" proved="true">
    <transf name="apply" proved="true" arg1="ket_sum_eq_gen">
     <goal name="VC pps_to_mat.23.0.0.0" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.19"/></proof>
     </goal>
     <goal name="VC pps_to_mat.23.0.0.1" expl="apply premises" proved="true">
     <proof prover="0"><result status="valid" time="1.23"/></proof>
     </goal>
     <goal name="VC pps_to_mat.23.0.0.2" expl="apply premises" proved="true">
     <proof prover="2"><result status="valid" time="2.49" steps="240"/></proof>
     </goal>
     <goal name="VC pps_to_mat.23.0.0.3" expl="apply premises" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC pps_to_mat.23.0.0.3.0" expl="apply premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.23.0.0.3.0.0" expl="apply premises" proved="true">
       <transf name="rewrite" proved="true" arg1="H4">
        <goal name="VC pps_to_mat.23.0.0.3.0.0.0" expl="apply premises" proved="true">
        <transf name="rewrite" proved="true" arg1="scalar_values">
         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0" expl="apply premises" proved="true">
         <transf name="apply" proved="true" arg1="scalar_eq_gen">
          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.0" expl="apply premises" proved="true">
          <proof prover="0"><result status="valid" time="1.08"/></proof>
          </goal>
          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1" expl="apply premises" proved="true">
          <transf name="apply" proved="true" arg1="mult_eq_t">
           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.0" expl="apply premises" proved="true">
           <proof prover="2"><result status="valid" time="0.44" steps="238"/></proof>
           </goal>
           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mat_sum_value">
            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0" expl="apply premises" proved="true">
            <transf name="compute_specified" proved="true" >
             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <transf name="instantiate" proved="true" arg1="sum_null_but_maybe_one_elt" arg2="(fun (e1:bitvec) -&gt;
    get
    (mat_sum (n_bvs (h_range h))
     (fun (y:bitvec) -&gt;
       make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
       (fun (i:int) (j:int) -&gt;
         if i = bv_to_int (h_basis_ket_bv h e1 y) &amp;&amp; j = bv_to_int e1
         then ang_exp (h_angle_bv h e1 y) else c_zero)))
    (bv_to_int a) (ket_to_int (bv_to_ket x))),(n_bvs (h_width h)),x">
              <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0" expl="apply premises" proved="true">
              <transf name="rewrite" proved="true" arg1="Hinst">
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                <transf name="rewrite" proved="true" arg1="mat_sum_value">
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="sum_eq">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="rewrite" proved="true" arg1="assert_make">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="rewrite" proved="true" arg1="get_indic">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="eliminate_if" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <proof prover="0"><result status="valid" time="1.40"/></proof>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                         <transf name="assert" proved="true" arg1="(h_basis_ket_bv h x1 x = a)">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="asserted formula" proved="true">
                          <transf name="replace" proved="true" arg1="(h_basis_ket_bv h1 x1 x)" arg2="(int_to_bv (bv_to_int (h_basis_ket_bv h1 x1 x))  (h_width h1))">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0" expl="asserted formula" proved="true">
                           <transf name="replace" proved="true" arg1="a" arg2="(int_to_bv (bv_to_int a)  (h_width h1))">
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula" proved="true">
                            <proof prover="2"><result status="valid" time="0.36" steps="246"/></proof>
                            </goal>
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis" proved="true">
                            <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_">
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.0" expl="equality hypothesis" proved="true">
                             <proof prover="2"><result status="valid" time="0.39" steps="246"/></proof>
                             </goal>
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.1" expl="rewrite premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.54" steps="251"/></proof>
                             </goal>
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.1.2" expl="rewrite premises" proved="true">
                             <proof prover="0"><result status="valid" time="1.08"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.1" expl="equality hypothesis" proved="true">
                           <proof prover="2"><result status="valid" time="2.59" steps="251"/></proof>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.43" steps="246"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.51" steps="249"/></proof>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.3" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.52" steps="248"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                     <proof prover="1"><result status="valid" time="1.25"/></proof>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                     <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x1))" arg2="(bv_to_int x1)">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                      <proof prover="1"><result status="valid" time="1.53"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
                      <proof prover="2"><result status="valid" time="2.59" steps="245"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_constant_size_exists">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.0" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0" proved="true">
                     <transf name="apply" proved="true" arg1="assert_make_r">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.39" steps="245"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.45" steps="245"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.1" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.1.0" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.1.0.0" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.1.0.0.0" proved="true">
                     <transf name="apply" proved="true" arg1="assert_make_c">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.62" steps="245"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.55" steps="245"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.66" steps="243"/></proof>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3" expl="rewrite premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_valid_index">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.0" proved="true">
                   <proof prover="2"><result status="valid" time="2.65" steps="243"/></proof>
                   </goal>
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1" proved="true">
                   <transf name="replace" proved="true" arg1="(rows
    (mat_sum (n_bvs (h_range h))
     (fun (y:bitvec) -&gt;
       make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
       (fun (i:int) (j:int) -&gt;
         if i = bv_to_int (h_basis_ket_bv h x y) &amp;&amp; j = bv_to_int x
         then ang_exp (h_angle_bv h x y) else c_zero))))" arg2="(power_ 2 (h_width h))">
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.0" proved="true">
                    <proof prover="1"><result status="valid" time="1.20"/></proof>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
                    <transf name="apply" proved="true" arg1="rows_mat_sum">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.46" steps="243"/></proof>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="set_constant_size_exists">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
                      <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.0.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.0.0.0" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.0.0.0.0" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_r">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.36" steps="245"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.38" steps="245"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
                      <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.1.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.1.0.0" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.1.0.0.0" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_c">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.41" steps="245"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.43" steps="245"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.2" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.2.0" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.2.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="assert_make_r">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.2.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.49" steps="245"/></proof>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.0.1.1.2.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.44" steps="245"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.0" proved="true">
                   <proof prover="2"><result status="valid" time="2.49" steps="243"/></proof>
                   </goal>
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1" proved="true">
                   <transf name="replace" proved="true" arg1="(columns
    (mat_sum (n_bvs (h_range h))
     (fun (y:bitvec) -&gt;
       make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
       (fun (i:int) (j:int) -&gt;
         if i = bv_to_int (h_basis_ket_bv h x y) &amp;&amp; j = bv_to_int x
         then ang_exp (h_angle_bv h x y) else c_zero))))" arg2="(power_ 2 (h_width h))">
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.0" proved="true">
                    <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.0.0" proved="true">
                     <proof prover="1"><result status="valid" time="1.19"/></proof>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.0.1" expl="equality hypothesis" proved="true">
                     <proof prover="2"><result status="valid" time="2.37" steps="243"/></proof>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1" expl="equality hypothesis" proved="true">
                    <transf name="apply" proved="true" arg1="columns_mat_sum">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.59" steps="243"/></proof>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="set_constant_size_exists">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.0" expl="apply premises" proved="true">
                      <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.0.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.0.0.0" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.0.0.0.0" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_r">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.58" steps="245"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.52" steps="245"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.1" expl="apply premises" proved="true">
                      <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.1.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.1.0.0" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.1.0.0.0" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_c">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.32" steps="245"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.32" steps="245"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.2" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.2.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.2.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="assert_make_c">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.2.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.66" steps="245"/></proof>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.0.0.3.1.1.1.2.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.62" steps="245"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.1" expl="rewrite premises" proved="true">
               <proof prover="2"><result status="valid" time="2.39" steps="242"/></proof>
               </goal>
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2" expl="rewrite premises" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0" expl="rewrite premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0" expl="rewrite premises" proved="true">
                 <transf name="rewrite" proved="true" arg1="mat_sum_value">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="sum_null_">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
                     <transf name="rewrite" proved="true" arg1="assert_make">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                       <transf name="eliminate_if" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                         <transf name="assert" proved="true" arg1="(k = x)">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                          <transf name="replace" proved="true" arg1="k" arg2="(int_to_bv (bv_to_int k) (h_width h1))">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                           <transf name="replace" proved="true" arg1="x" arg2="(int_to_bv (bv_to_int x) (h_width h1))">
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.0" expl="asserted formula" proved="true">
                            <proof prover="0"><result status="valid" time="0.95"/></proof>
                            </goal>
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                            <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_">
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                             <proof prover="2"><result status="valid" time="0.41" steps="248"/></proof>
                             </goal>
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.51" steps="253"/></proof>
                             </goal>
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                             <proof prover="2"><result status="valid" time="0.48" steps="248"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
                           <transf name="rewrite" proved="true" arg1="int_to_bv_to_int_">
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis" proved="true">
                            <proof prover="2"><result status="valid" time="0.44" steps="248"/></proof>
                            </goal>
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.44" steps="253"/></proof>
                            </goal>
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.47" steps="253"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="0.47" steps="248"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.0.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="0.48" steps="244"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.1" expl="rewrite premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.1.0" expl="rewrite premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.39" steps="249"/></proof>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.1.1" expl="rewrite premises" proved="true">
                       <proof prover="1"><result status="valid" time="1.37"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.2" expl="rewrite premises" proved="true">
                      <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x) )" arg2="(bv_to_int x)">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.2.0" expl="rewrite premises" proved="true">
                       <proof prover="1"><result status="valid" time="1.66"/></proof>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.0.0.0.0.2.1" expl="equality hypothesis" proved="true">
                       <proof prover="2"><result status="valid" time="2.68" steps="249"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="set_constant_size_exists">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.0" expl="apply premises" proved="true">
                   <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.0.0" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.0.0.0" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.0.0.0.0" proved="true">
                      <transf name="apply" proved="true" arg1="assert_make_r">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.28" steps="249"/></proof>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.33" steps="249"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.1" expl="apply premises" proved="true">
                   <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.1.0" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.1.0.0" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.1.0.0.0" proved="true">
                      <transf name="apply" proved="true" arg1="assert_make_c">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.44" steps="249"/></proof>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.69" steps="249"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.2" expl="rewrite premises" proved="true">
                  <proof prover="2"><result status="valid" time="2.48" steps="247"/></proof>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3" expl="rewrite premises" proved="true">
                  <transf name="apply" proved="true" arg1="set_valid_index">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.44" steps="247"/></proof>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1" expl="apply premises" proved="true">
                    <transf name="replace" proved="true" arg1="(rows
    (mat_sum (n_bvs (h_range h))
     (fun (y:bitvec) -&gt;
       make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
       (fun (i:int) (j:int) -&gt;
         if i = bv_to_int (h_basis_ket_bv h x y) &amp;&amp; j = bv_to_int x
         then ang_exp (h_angle_bv h x y) else c_zero))))" arg2="(power_ 2 (h_width h))">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(rows
    (mat_sum (n_bvs (h_range h))
     (fun (y:bitvec) -&gt;
       make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
       (fun (i:int) (j:int) -&gt;
         if i = bv_to_int (h_basis_ket_bv h k y) &amp;&amp; j = bv_to_int k
         then ang_exp (h_angle_bv h k y) else c_zero))))" arg2="(power_ 2 (h_width h))">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.0" expl="apply premises" proved="true">
                      <proof prover="1"><result status="valid" time="1.26"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1" expl="equality hypothesis" proved="true">
                      <transf name="apply" proved="true" arg1="rows_mat_sum">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.52" steps="247"/></proof>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="set_constant_size_exists">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.0" expl="apply premises" proved="true">
                        <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.0.0" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.0.0.0" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.0.0.0.0" proved="true">
                           <transf name="apply" proved="true" arg1="assert_make_r">
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.71" steps="249"/></proof>
                            </goal>
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.78" steps="249"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.1" expl="apply premises" proved="true">
                        <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.1.0" proved="true">
                         <transf name="split_vc" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.1.0.0" proved="true">
                          <transf name="compute_specified" proved="true" >
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.1.0.0.0" proved="true">
                           <transf name="apply" proved="true" arg1="assert_make_c">
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.46" steps="249"/></proof>
                            </goal>
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                            <proof prover="2"><result status="valid" time="2.34" steps="249"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.2" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.2.0" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.2.0.0" expl="apply premises" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_r">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.2.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.36" steps="249"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.0.1.2.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.43" steps="249"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1" expl="equality hypothesis" proved="true">
                     <transf name="apply" proved="true" arg1="rows_mat_sum">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.58" steps="247"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="set_constant_size_exists">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.0" expl="apply premises" proved="true">
                       <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.0.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.0.0.0" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.0.0.0.0" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_r">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.50" steps="249"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.43" steps="249"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.1" expl="apply premises" proved="true">
                       <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.1.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.1.0.0" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.1.0.0.0" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_c">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.48" steps="249"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.49" steps="249"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.2" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.2.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.2.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="assert_make_r">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.2.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.45" steps="249"/></proof>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.0.1.1.2.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.47" steps="249"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1" expl="apply premises" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.41" steps="247"/></proof>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1" expl="apply premises" proved="true">
                    <transf name="replace" proved="true" arg1="(columns
    (mat_sum (n_bvs (h_range h))
     (fun (y:bitvec) -&gt;
       make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
       (fun (i:int) (j:int) -&gt;
         if i = bv_to_int (h_basis_ket_bv h x y) &amp;&amp; j = bv_to_int x
         then ang_exp (h_angle_bv h x y) else c_zero))))" arg2="(power_ 2 (h_width h))">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0" expl="apply premises" proved="true">
                     <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0" expl="apply premises" proved="true">
                      <transf name="replace" proved="true" arg1="(columns
    (mat_sum (n_bvs (h_range h))
     (fun (y:bitvec) -&gt;
       make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
       (fun (i:int) (j:int) -&gt;
         if i = bv_to_int (h_basis_ket_bv h k y) &amp;&amp; j = bv_to_int k
         then ang_exp (h_angle_bv h k y) else c_zero))))" arg2="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.0" expl="apply premises" proved="true">
                       <proof prover="1"><result status="valid" time="1.29"/></proof>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1" expl="equality hypothesis" proved="true">
                       <transf name="apply" proved="true" arg1="columns_mat_sum">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.45" steps="247"/></proof>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="set_constant_size_exists">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.0" expl="apply premises" proved="true">
                         <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.0.0" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.0.0.0" proved="true">
                           <transf name="compute_specified" proved="true" >
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.0.0.0.0" proved="true">
                            <transf name="apply" proved="true" arg1="assert_make_r">
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.39" steps="249"/></proof>
                             </goal>
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.37" steps="249"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.1" expl="apply premises" proved="true">
                         <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.1.0" proved="true">
                          <transf name="split_vc" proved="true" >
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.1.0.0" proved="true">
                           <transf name="compute_specified" proved="true" >
                            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.1.0.0.0" proved="true">
                            <transf name="apply" proved="true" arg1="assert_make_c">
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.67" steps="249"/></proof>
                             </goal>
                             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                             <proof prover="2"><result status="valid" time="2.72" steps="249"/></proof>
                             </goal>
                            </transf>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.2" expl="apply premises" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.2.0" expl="apply premises" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.2.0.0" expl="apply premises" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_c">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.2.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.46" steps="249"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.0.1.2.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.65" steps="249"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.0.1" expl="equality hypothesis" proved="true">
                      <proof prover="2"><result status="valid" time="2.53" steps="247"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1" expl="equality hypothesis" proved="true">
                     <transf name="apply" proved="true" arg1="columns_mat_sum">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.42" steps="247"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="set_constant_size_exists">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.0" expl="apply premises" proved="true">
                       <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.0.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.0.0.0" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.0.0.0.0" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_r">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.34" steps="249"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.33" steps="249"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.1" expl="apply premises" proved="true">
                       <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.1.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.1.0.0" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.1.0.0.0" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_c">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.60" steps="249"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.39" steps="249"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.2" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.2.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.2.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="assert_make_c">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.2.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.49" steps="249"/></proof>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.0.0.0.2.0.0.3.1.1.1.2.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.51" steps="249"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="set_constant_size_exists">
             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0" expl="apply premises" proved="true">
             <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
              <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0" proved="true">
                <transf name="apply" proved="true" arg1="rows_mat_sum">
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.58" steps="244"/></proof>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_constant_size_exists">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.0.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.0.0.0" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.0.0.0.0" proved="true">
                     <transf name="apply" proved="true" arg1="assert_make_r">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.54" steps="246"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.62" steps="246"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.1" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.1.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.1.0.0" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.1.0.0.0" proved="true">
                     <transf name="apply" proved="true" arg1="assert_make_c">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.41" steps="246"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.44" steps="246"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.2" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.2.0" expl="apply premises" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="assert_make_r">
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.44" steps="246"/></proof>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.37" steps="246"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1" expl="apply premises" proved="true">
             <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
              <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0" proved="true">
              <transf name="split_vc" proved="true" >
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0" proved="true">
               <transf name="compute_specified" proved="true" >
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0" proved="true">
                <transf name="apply" proved="true" arg1="columns_mat_sum">
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="2.63" steps="244"/></proof>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_constant_size_exists">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.0" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.0.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.0.0.0" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.0.0.0.0" proved="true">
                     <transf name="apply" proved="true" arg1="assert_make_r">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.44" steps="246"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.60" steps="246"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.1" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.1.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.1.0.0" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.1.0.0.0" proved="true">
                     <transf name="apply" proved="true" arg1="assert_make_c">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.46" steps="246"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.43" steps="246"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.2" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.2.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.2.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="assert_make_c">
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.36" steps="246"/></proof>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.1.1.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.50" steps="246"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.2" expl="rewrite premises" proved="true">
            <proof prover="2"><result status="valid" time="0.41" steps="238"/></proof>
            </goal>
            <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3" expl="rewrite premises" proved="true">
            <transf name="apply" proved="true" arg1="set_valid_index">
             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="2.42" steps="242"/></proof>
              </goal>
              <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(rows
    (mat_sum (n_bvs (h_width h))
     (fun (x1:bitvec) -&gt;
       mat_sum (n_bvs (h_range h))
       (fun (y:bitvec) -&gt;
         make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
         (fun (i:int) (j:int) -&gt;
           if i = bv_to_int (h_basis_ket_bv h x1 y) &amp;&amp; j = bv_to_int x1
           then ang_exp (h_angle_bv h x1 y) else c_zero)))))" arg2="(power_ 2 (h_width h))">
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.0" expl="apply premises" proved="true">
               <proof prover="1"><result status="valid" time="1.14"/></proof>
               </goal>
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="rows_mat_sum">
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="0.49" steps="238"/></proof>
                </goal>
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="set_constant_size_exists">
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0" expl="apply premises" proved="true">
                 <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="rows_mat_sum">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.43" steps="244"/></proof>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="set_constant_size_exists">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                      <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.0.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.0.0.0" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.0.0.0.0" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_r">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.63" steps="246"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.53" steps="246"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.1" expl="apply premises" proved="true">
                      <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.1.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.1.0.0" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.1.0.0.0" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_c">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.58" steps="246"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.73" steps="246"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.2" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.2.0" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="assert_make_r">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.39" steps="246"/></proof>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.42" steps="246"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1" expl="apply premises" proved="true">
                 <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="columns_mat_sum">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.46" steps="244"/></proof>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="set_constant_size_exists">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.0" expl="apply premises" proved="true">
                      <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.0.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.0.0.0" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.0.0.0.0" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_r">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.63" steps="246"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.61" steps="246"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.1" expl="apply premises" proved="true">
                      <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.1.0" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.1.0.0" proved="true">
                        <transf name="compute_specified" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.1.0.0.0" proved="true">
                         <transf name="apply" proved="true" arg1="assert_make_c">
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.44" steps="246"/></proof>
                          </goal>
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                          <proof prover="2"><result status="valid" time="2.79" steps="246"/></proof>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.2" expl="apply premises" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.2.0" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.2.0.0" expl="apply premises" proved="true">
                       <transf name="apply" proved="true" arg1="assert_make_c">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.57" steps="246"/></proof>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.1.1.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.61" steps="246"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2" expl="apply premises" proved="true">
                <transf name="compute_specified" proved="true" >
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="rows_mat_sum">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="2.77" steps="244"/></proof>
                   </goal>
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="set_constant_size_exists">
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.0" expl="apply premises" proved="true">
                    <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.0.0" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.0.0.0" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.0.0.0.0" proved="true">
                       <transf name="apply" proved="true" arg1="assert_make_r">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.37" steps="246"/></proof>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.65" steps="246"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.1" expl="apply premises" proved="true">
                    <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.1.0" proved="true">
                     <transf name="split_vc" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.1.0.0" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.1.0.0.0" proved="true">
                       <transf name="apply" proved="true" arg1="assert_make_c">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.66" steps="246"/></proof>
                        </goal>
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                        <proof prover="2"><result status="valid" time="2.67" steps="246"/></proof>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.2" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.2.0" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.2.0.0" expl="apply premises" proved="true">
                     <transf name="apply" proved="true" arg1="assert_make_r">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.2.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.34" steps="246"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.0.1.1.2.0.0.2.0.0.1" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.36" steps="246"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1" expl="apply premises" proved="true">
             <transf name="split_vc" proved="true" >
              <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.0" expl="apply premises" proved="true">
              <proof prover="2"><result status="valid" time="2.39" steps="242"/></proof>
              </goal>
              <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(columns
    (mat_sum (n_bvs (h_range h))
     (fun (y:bitvec) -&gt;
       make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
       (fun (i:int) (j:int) -&gt;
         if i = bv_to_int (h_basis_ket_bv h x y) &amp;&amp; j = bv_to_int x
         then ang_exp (h_angle_bv h x y) else c_zero))))" arg2="(power_ 2 (h_width h))">
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0" expl="apply premises" proved="true">
               <transf name="replace" proved="true" arg1="(columns
    (mat_sum (n_bvs (h_width h))
     (fun (x1:bitvec) -&gt;
       mat_sum (n_bvs (h_range h))
       (fun (y:bitvec) -&gt;
         make_f (power_ 2 (h_width h)) (power_ 2 (h_width h))
         (fun (i:int) (j:int) -&gt;
           if i = bv_to_int (h_basis_ket_bv h x1 y) &amp;&amp; j = bv_to_int x1
           then ang_exp (h_angle_bv h x1 y) else c_zero)))))" arg2="(power_ 2 (h_width h))">
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.0" expl="apply premises" proved="true">
                <transf name="replace" proved="true" arg1="(ket_length (bv_to_ket x))" arg2="(h_width h)" arg3="in" arg4="H">
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.0.0" expl="apply premises" proved="true">
                 <transf name="replace" proved="true" arg1="(ket_to_int (bv_to_ket x) )" arg2="(bv_to_int x)">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.0.0.0" expl="apply premises" proved="true">
                  <proof prover="1"><result status="valid" time="1.38"/></proof>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.0.0.1" expl="equality hypothesis" proved="true">
                  <proof prover="2"><result status="valid" time="2.62" steps="242"/></proof>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.0.1" expl="equality hypothesis" proved="true">
                 <proof prover="2"><result status="valid" time="2.67" steps="242"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1" expl="equality hypothesis" proved="true">
                <transf name="apply" proved="true" arg1="columns_mat_sum">
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.0" expl="apply premises" proved="true">
                 <proof prover="2"><result status="valid" time="0.47" steps="238"/></proof>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1" expl="apply premises" proved="true">
                 <transf name="apply" proved="true" arg1="set_constant_size_exists">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0" proved="true">
                     <transf name="apply" proved="true" arg1="rows_mat_sum">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.44" steps="244"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="set_constant_size_exists">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.0" expl="apply premises" proved="true">
                       <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.0.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.0.0.0" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.0.0.0.0" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_r">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.76" steps="246"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.41" steps="246"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.1" expl="apply premises" proved="true">
                       <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.1.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.1.0.0" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.1.0.0.0" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_c">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.39" steps="246"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.72" steps="246"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.2" expl="apply premises" proved="true">
                      <transf name="compute_specified" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.2.0" expl="apply premises" proved="true">
                       <transf name="split_vc" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.2.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="assert_make_r">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.39" steps="246"/></proof>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.0.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.57" steps="246"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1" expl="apply premises" proved="true">
                  <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0" proved="true">
                   <transf name="split_vc" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0" proved="true">
                    <transf name="compute_specified" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0" proved="true">
                     <transf name="apply" proved="true" arg1="columns_mat_sum">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                      <proof prover="2"><result status="valid" time="2.46" steps="244"/></proof>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="set_constant_size_exists">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.0" expl="apply premises" proved="true">
                       <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.0.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.0.0.0" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.0.0.0.0" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_r">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.42" steps="246"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.72" steps="246"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.1" expl="apply premises" proved="true">
                       <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.1.0" proved="true">
                        <transf name="split_vc" proved="true" >
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.1.0.0" proved="true">
                         <transf name="compute_specified" proved="true" >
                          <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.1.0.0.0" proved="true">
                          <transf name="apply" proved="true" arg1="assert_make_c">
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.39" steps="246"/></proof>
                           </goal>
                           <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                           <proof prover="2"><result status="valid" time="2.42" steps="246"/></proof>
                           </goal>
                          </transf>
                          </goal>
                         </transf>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.2" expl="apply premises" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.2.0" expl="apply premises" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.2.0.0" expl="apply premises" proved="true">
                        <transf name="apply" proved="true" arg1="assert_make_c">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.2.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.54" steps="246"/></proof>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.1.1.0.0.0.2.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.40" steps="246"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2" expl="apply premises" proved="true">
                 <transf name="split_vc" proved="true" >
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0" expl="apply premises" proved="true">
                  <transf name="compute_specified" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0" expl="apply premises" proved="true">
                   <transf name="apply" proved="true" arg1="columns_mat_sum">
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.0" expl="apply premises" proved="true">
                    <proof prover="2"><result status="valid" time="2.39" steps="244"/></proof>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1" expl="apply premises" proved="true">
                    <transf name="apply" proved="true" arg1="set_constant_size_exists">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.0" expl="apply premises" proved="true">
                     <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.0.0" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.0.0.0" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.0.0.0.0" proved="true">
                        <transf name="apply" proved="true" arg1="assert_make_r">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.0.0.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.66" steps="246"/></proof>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.0.0.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.52" steps="246"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.1" expl="apply premises" proved="true">
                     <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.1.0" proved="true">
                      <transf name="split_vc" proved="true" >
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.1.0.0" proved="true">
                       <transf name="compute_specified" proved="true" >
                        <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.1.0.0.0" proved="true">
                        <transf name="apply" proved="true" arg1="assert_make_c">
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.1.0.0.0.0" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.45" steps="246"/></proof>
                         </goal>
                         <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.1.1.0.0.0.1" expl="apply premises" proved="true">
                         <proof prover="2"><result status="valid" time="2.46" steps="246"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.2" expl="apply premises" proved="true">
                    <transf name="split_vc" proved="true" >
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.2.0" expl="apply premises" proved="true">
                     <transf name="compute_specified" proved="true" >
                      <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.2.0.0" expl="apply premises" proved="true">
                      <transf name="apply" proved="true" arg1="assert_make_c">
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.2.0.0.0" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.66" steps="246"/></proof>
                       </goal>
                       <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.0.1.2.0.0.2.0.0.1" expl="apply premises" proved="true">
                       <proof prover="2"><result status="valid" time="2.58" steps="246"/></proof>
                       </goal>
                      </transf>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1" expl="equality hypothesis" proved="true">
               <transf name="apply" proved="true" arg1="columns_mat_sum">
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="2.62" steps="242"/></proof>
                </goal>
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1" expl="apply premises" proved="true">
                <transf name="apply" proved="true" arg1="set_constant_size_exists">
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.0" expl="apply premises" proved="true">
                 <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.0.0" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.0.0.0" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.0.0.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="assert_make_r">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.0.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.68" steps="244"/></proof>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.0.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.53" steps="244"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.1" expl="apply premises" proved="true">
                 <transf name="exists" proved="true" arg1="(power_ 2 (h_width h))">
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.1.0" proved="true">
                  <transf name="split_vc" proved="true" >
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.1.0.0" proved="true">
                   <transf name="compute_specified" proved="true" >
                    <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.1.0.0.0" proved="true">
                    <transf name="apply" proved="true" arg1="assert_make_c">
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.1.0.0.0.0" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.66" steps="244"/></proof>
                     </goal>
                     <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.1.1.0.0.0.1" expl="apply premises" proved="true">
                     <proof prover="2"><result status="valid" time="2.33" steps="244"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.2" expl="apply premises" proved="true">
                <transf name="split_vc" proved="true" >
                 <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.2.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                  <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.2.0.0" expl="apply premises" proved="true">
                  <transf name="apply" proved="true" arg1="assert_make_c">
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.2.0.0.0" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="2.67" steps="244"/></proof>
                   </goal>
                   <goal name="VC pps_to_mat.23.0.0.3.0.0.0.0.1.1.3.1.1.1.2.0.0.1" expl="apply premises" proved="true">
                   <proof prover="2"><result status="valid" time="2.65" steps="244"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_to_mat.23.0.1" expl="rewrite premises" proved="true">
    <proof prover="2"><result status="valid" time="0.47" steps="236"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC pps_to_mat.23.1" expl="rewrite premises" proved="true">
   <proof prover="2"><result status="valid" time="2.60" steps="240"/></proof>
   </goal>
   <goal name="VC pps_to_mat.23.2" expl="rewrite premises" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC pps_to_mat.23.2.0" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC pps_to_mat.23.2.0.0" expl="rewrite premises" proved="true">
     <transf name="apply" proved="true" arg1="H1">
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC pps_to_mat.23.2.1" expl="rewrite premises" proved="true">
    <transf name="rewrite" proved="true" arg1="H2">
     <goal name="VC pps_to_mat.23.2.1.0" expl="rewrite premises" proved="true">
     <proof prover="1"><result status="valid" time="1.33"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC pps_to_mat.24" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="ket_decomp_" arg2="x">
   <goal name="VC pps_to_mat.24.0" expl="postcondition" proved="true">
   <transf name="instantiate" proved="true" arg1="Hinst" arg2="(h_width h)">
    <goal name="VC pps_to_mat.24.0.0" expl="postcondition" proved="true">
    <transf name="rewrite" proved="true" arg1="Hinst">
     <goal name="VC pps_to_mat.24.0.0.0" expl="postcondition" proved="true">
     <transf name="rewrite" proved="true" arg1="mat_mult_ket_sum_l">
      <goal name="VC pps_to_mat.24.0.0.0.0" expl="postcondition" proved="true">
      <transf name="rewrite" proved="true" arg1="pps_apply_sum">
       <goal name="VC pps_to_mat.24.0.0.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="ket_sum_eq">
        <goal name="VC pps_to_mat.24.0.0.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="2.59" steps="241"/></proof>
        </goal>
        <goal name="VC pps_to_mat.24.0.0.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.39" steps="236"/></proof>
        </goal>
        <goal name="VC pps_to_mat.24.0.0.0.0.0.2" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
         <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0" expl="apply premises" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0" expl="apply premises" proved="true">
          <transf name="rewrite" proved="true" arg1="pps_apply_scal">
           <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0" expl="apply premises" proved="true">
           <transf name="rewrite" proved="true" arg1="mat_mut_scal">
            <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.0" expl="apply premises" proved="true">
            <transf name="apply" proved="true" arg1="scalar_eq">
             <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.0.0" expl="apply premises" proved="true">
             <transf name="rewrite" proved="true" arg1="rewrite_pps_apply_basis">
              <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.0.0.0" expl="apply premises" proved="true">
              <transf name="replace" proved="true" arg1="(ket_to_bv (bv_to_ket a))" arg2="a">
               <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.0.0.0.0" expl="apply premises" proved="true">
               <transf name="apply" proved="true" arg1="H2">
                <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.0.0.0.0.0" expl="apply premises" proved="true">
                <proof prover="2"><result status="valid" time="2.38" steps="243"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.0.0.0.1" expl="equality hypothesis" proved="true">
               <proof prover="2"><result status="valid" time="2.38" steps="243"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.0.0.1" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="2.71" steps="243"/></proof>
              </goal>
              <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.0.0.2" expl="rewrite premises" proved="true">
              <proof prover="2"><result status="valid" time="2.73" steps="243"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.1" expl="rewrite premises" proved="true">
            <transf name="rewrite" proved="true" arg1="H3">
             <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.0.1.0" expl="rewrite premises" proved="true">
             <proof prover="1"><result status="valid" time="1.13"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC pps_to_mat.24.0.0.0.0.0.2.0.0.1" expl="rewrite premises" proved="true">
           <proof prover="2"><result status="valid" time="2.62" steps="243"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_to_mat.24.0.0.0.0.1" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.38" steps="236"/></proof>
       </goal>
       <goal name="VC pps_to_mat.24.0.0.0.0.2" expl="rewrite premises" proved="true">
       <transf name="compute_specified" proved="true" >
        <goal name="VC pps_to_mat.24.0.0.0.0.2.0" expl="rewrite premises" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="VC pps_to_mat.24.0.0.0.0.2.0.0" expl="rewrite premises" proved="true">
         <proof prover="2"><result status="valid" time="2.70" steps="243"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_to_mat.24.0.0.0.0.3" expl="rewrite premises" proved="true">
       <proof prover="2"><result status="valid" time="0.38" steps="236"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_to_mat.24.0.0.0.1" expl="rewrite premises" proved="true">
      <proof prover="2"><result status="valid" time="0.39" steps="236"/></proof>
      </goal>
      <goal name="VC pps_to_mat.24.0.0.0.2" expl="rewrite premises" proved="true">
      <transf name="compute_specified" proved="true" >
       <goal name="VC pps_to_mat.24.0.0.0.2.0" expl="rewrite premises" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="VC pps_to_mat.24.0.0.0.2.0.0" expl="rewrite premises" proved="true">
        <proof prover="2"><result status="valid" time="2.53" steps="243"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC pps_to_mat.24.0.0.0.3" expl="rewrite premises" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="VC pps_to_mat.24.0.0.0.3.0" proved="true">
       <transf name="rewrite" proved="true" arg1="H3">
        <goal name="VC pps_to_mat.24.0.0.0.3.0.0" proved="true">
        <transf name="apply" proved="true" arg1="H2">
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC pps_to_mat.24.0.0.0.3.1" proved="true">
       <transf name="rewrite" proved="true" arg1="H3">
        <goal name="VC pps_to_mat.24.0.0.0.3.1.0" proved="true">
        <proof prover="2"><result status="valid" time="0.51" steps="236"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC pps_to_mat.24.0.0.1" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.62" steps="241"/></proof>
     </goal>
     <goal name="VC pps_to_mat.24.0.0.2" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.73" steps="240"/></proof>
     </goal>
     <goal name="VC pps_to_mat.24.0.0.3" expl="rewrite premises" proved="true">
     <proof prover="2"><result status="valid" time="2.48" steps="241"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Mats_for_sem">
 <goal name="VC sem_id_mat" expl="VC for sem_id_mat">
 <transf name="split_vc" >
  <goal name="VC sem_id_mat.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="210"/></proof>
  </goal>
  <goal name="VC sem_id_mat.1" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="210"/></proof>
  </goal>
  <goal name="VC sem_id_mat.2" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="1.99" steps="218"/></proof>
  </goal>
  <goal name="VC sem_id_mat.3" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="218"/></proof>
  </goal>
  <goal name="VC sem_id_mat.4" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_id_mat.4.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_id_mat.4.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_id_mat.4.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC sem_id_mat.4.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="bv_to_int_to_bv">
       <goal name="VC sem_id_mat.4.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="bv_to_int_to_bv">
        <goal name="VC sem_id_mat.4.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x )">
         <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="case" arg1="(bv_to_int x = 0)">
          <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0" expl="true case (postcondition)">
          <transf name="rewrite" arg1="add_ket_l_null">
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0" expl="true case (postcondition)">
           <transf name="rewrite" arg1="scalar_c_one_gen">
            <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0.0" expl="true case (postcondition)">
            <proof prover="2" obsolete="true"><result status="valid" time="2.15" steps="225"/></proof>
            </goal>
            <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
            <transf name="rewrite" arg1="H3">
             <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
             <transf name="compute_specified" >
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="2.09" steps="225"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
           <proof prover="2" obsolete="true"><result status="valid" time="2.12" steps="225"/></proof>
           </goal>
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.2" expl="rewrite premises">
           <proof prover="1" obsolete="true"><result status="valid" time="1.30"/></proof>
           </goal>
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3" expl="rewrite premises">
           <transf name="apply" arg1="set_null_mat">
            <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0" expl="apply premises">
            <transf name="split_vc" >
             <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0" expl="apply premises">
             <transf name="rewrite" arg1="H4">
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0.0" expl="apply premises">
              <transf name="compute_specified" >
               <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0.0.0" expl="apply premises">
               <transf name="rewrite" arg1="scalar_values">
                <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0.0.0.0" expl="apply premises">
                <transf name="apply" arg1="zero_mult_t">
                 <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.0.3.0.0.0.0.0.0" expl="apply premises">
                 <proof prover="2" obsolete="true"><result status="valid" time="2.18" steps="227"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1" expl="false case (postcondition)">
          <transf name="rewrite" arg1="H3">
           <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0" expl="false case (postcondition)">
           <transf name="rewrite" arg1="H3">
            <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0" expl="false case (postcondition)">
            <transf name="compute_specified" >
             <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0" expl="false case (postcondition)">
             <transf name="rewrite" arg1="null_add_ket_l">
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.0" expl="false case (postcondition)">
              <transf name="rewrite" arg1="scalar_c_one_gen">
               <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="false case (postcondition)">
               <proof prover="0" obsolete="true"><result status="valid" time="0.94"/></proof>
               </goal>
               <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.19"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="2.24" steps="225"/></proof>
              </goal>
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises">
              <proof prover="1" obsolete="true"><result status="valid" time="1.24"/></proof>
              </goal>
              <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3" expl="rewrite premises">
              <transf name="apply" arg1="set_null_mat">
               <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3.0" expl="apply premises">
               <transf name="split_vc" >
                <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3.0.0" expl="apply premises">
                <transf name="rewrite" arg1="scalar_values">
                 <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3.0.0.0" expl="apply premises">
                 <transf name="apply" arg1="zero_mult_t">
                  <goal name="VC sem_id_mat.4.0.0.0.0.0.0.0.1.0.0.0.3.0.0.0.0" expl="apply premises">
                  <proof prover="2" obsolete="true"><result status="valid" time="1.95" steps="227"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_id_mat.4.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="2" obsolete="true"><result status="valid" time="1.91" steps="223"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_id_mat.4.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.41" steps="221"/></proof>
        </goal>
        <goal name="VC sem_id_mat.4.0.0.0.0.0.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="1.96" steps="223"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_id_mat.4.0.0.0.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="221"/></proof>
       </goal>
       <goal name="VC sem_id_mat.4.0.0.0.0.2" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="1.97" steps="223"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_id_mat.4.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="221"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_id_mat.4.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.10" steps="223"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_id_mat.4.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.11" steps="223"/></proof>
   </goal>
   <goal name="VC sem_id_mat.4.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.14"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_id_mat.5" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.79"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_rz_mat" expl="VC for sem_rz_mat">
 <transf name="split_vc" >
  <goal name="VC sem_rz_mat.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="216"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.1" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="216"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.2" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="210"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.3" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="210"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.4" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="2.08" steps="218"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.5" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.48" steps="218"/></proof>
  </goal>
  <goal name="VC sem_rz_mat.6" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_rz_mat.6.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_rz_mat.6.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_rz_mat.6.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC sem_rz_mat.6.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="bv_to_int_to_bv">
       <goal name="VC sem_rz_mat.6.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="bv_to_int_to_bv">
        <goal name="VC sem_rz_mat.6.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
         <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="H4">
          <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="H4">
           <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="compute_specified" >
            <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="eliminate_if" >
             <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0" expl="VC for sem_rz_mat">
             <transf name="split_vc" >
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.2" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.3" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.4" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.46" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.5" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6" expl="postcondition">
              <transf name="rewrite" arg1="add_ket_l_null">
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="postcondition">
               <proof prover="1" obsolete="true"><result status="valid" time="1.14"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.16" steps="228"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.23"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.39" steps="228"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.7" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="226"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.8" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.9" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.10" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.11" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.12" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.13" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.14" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.15" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.16" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.17" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.18" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.19" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.20" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.21" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.22" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.23" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.31" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.24" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.25" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.26" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="228"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27" expl="postcondition">
              <transf name="rewrite" arg1="null_add_ket_l">
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27.0" expl="postcondition">
               <proof prover="0" obsolete="true"><result status="valid" time="1.07"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.07" steps="230"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.39"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.27.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.38" steps="230"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.28" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="228"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.29" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="228"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.30" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.0.0.0.0.0.31" expl="postcondition">
              <proof prover="0" obsolete="true"><result status="valid" time="1.08"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_rz_mat.6.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="2" obsolete="true"><result status="valid" time="2.01" steps="225"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_rz_mat.6.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="223"/></proof>
        </goal>
        <goal name="VC sem_rz_mat.6.0.0.0.0.0.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="2.20" steps="225"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_rz_mat.6.0.0.0.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="223"/></proof>
       </goal>
       <goal name="VC sem_rz_mat.6.0.0.0.0.2" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="2.10" steps="225"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_rz_mat.6.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="223"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_rz_mat.6.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.01" steps="225"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_rz_mat.6.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.10" steps="225"/></proof>
   </goal>
   <goal name="VC sem_rz_mat.6.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_rz_mat.7" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_rz_mat.7.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_rz_mat.7.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_rz_mat.7.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC sem_rz_mat.7.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="bv_to_int_to_bv">
       <goal name="VC sem_rz_mat.7.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="bv_to_int_to_bv">
        <goal name="VC sem_rz_mat.7.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
         <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="H5">
          <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="H5">
           <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="compute_specified" >
            <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="eliminate_if" >
             <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0" expl="VC for sem_rz_mat">
             <transf name="split_vc" >
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.44" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.2" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.3" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.4" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.5" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6" expl="postcondition">
              <transf name="rewrite" arg1="add_ket_l_null">
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="postcondition">
               <proof prover="1" obsolete="true"><result status="valid" time="1.24"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.08" steps="229"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.19"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.01" steps="229"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.7" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="226"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.8" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.9" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.10" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.31" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.11" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.12" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.13" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.14" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.15" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.16" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.17" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.18" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.41" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.19" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.20" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.21" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.22" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.23" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="225"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.24" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.25" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.44" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.26" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="234"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27" expl="postcondition">
              <transf name="rewrite" arg1="null_add_ket_l">
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27.0" expl="postcondition">
               <proof prover="5" obsolete="true"><result status="valid" time="7.63"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.34" steps="236"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.23"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.27.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.27" steps="236"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.28" expl="postcondition">
              <transf name="rewrite" arg1="null_add_ket_l">
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.28.0" expl="postcondition">
               <proof prover="2" obsolete="true"><result status="valid" time="0.45" steps="230"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.28.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.46" steps="230"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.28.2" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="230"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.28.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="230"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29" expl="postcondition">
              <transf name="rewrite" arg1="null_add_ket_l">
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29.0" expl="postcondition">
               <proof prover="0" obsolete="true"><result status="valid" time="0.92"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="1.97" steps="232"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.00"/></proof>
               </goal>
               <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.29.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.03" steps="232"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.30" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.45" steps="227"/></proof>
              </goal>
              <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.0.0.0.0.0.31" expl="postcondition">
              <proof prover="0" obsolete="true"><result status="valid" time="1.11"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_rz_mat.7.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="2" obsolete="true"><result status="valid" time="2.26" steps="226"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_rz_mat.7.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="223"/></proof>
        </goal>
        <goal name="VC sem_rz_mat.7.0.0.0.0.0.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="1.95" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_rz_mat.7.0.0.0.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="223"/></proof>
       </goal>
       <goal name="VC sem_rz_mat.7.0.0.0.0.2" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="1.77" steps="226"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_rz_mat.7.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.31" steps="223"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_rz_mat.7.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="1.82" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_rz_mat.7.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="1.92" steps="226"/></proof>
   </goal>
   <goal name="VC sem_rz_mat.7.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.24"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_rz_mat.8" expl="postcondition">
  <transf name="rewrite" arg1="pps_rz_apply_basis">
   <goal name="VC sem_rz_mat.8.0" expl="postcondition">
   <transf name="eliminate_if" >
    <goal name="VC sem_rz_mat.8.0.0" expl="VC for sem_rz_mat">
    <transf name="split_vc" >
     <goal name="VC sem_rz_mat.8.0.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="0.86"/></proof>
     </goal>
     <goal name="VC sem_rz_mat.8.0.0.1" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="1.12"/></proof>
     </goal>
     <goal name="VC sem_rz_mat.8.0.0.2" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="0.95"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_rz_mat.8.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="221"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_phase_mat" expl="VC for sem_phase_mat">
 <transf name="split_vc" >
  <goal name="VC sem_phase_mat.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="214"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.1" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="214"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.2" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.48" steps="210"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.3" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="210"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.4" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="2.11" steps="218"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.5" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.45" steps="218"/></proof>
  </goal>
  <goal name="VC sem_phase_mat.6" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_phase_mat.6.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_phase_mat.6.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_phase_mat.6.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC sem_phase_mat.6.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="bv_to_int_to_bv">
       <goal name="VC sem_phase_mat.6.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="bv_to_int_to_bv">
        <goal name="VC sem_phase_mat.6.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
         <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="H4">
          <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="H4">
           <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="compute_specified" >
            <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="eliminate_if" >
             <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0" expl="VC for sem_phase_mat">
             <transf name="split_vc" >
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2" expl="postcondition">
              <transf name="rewrite" arg1="add_ket_l_null">
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="postcondition">
               <proof prover="0" obsolete="true"><result status="valid" time="0.91"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.25" steps="228"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.19"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.2.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.03" steps="228"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.3" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.45" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.4" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.5" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="225"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6" expl="postcondition">
              <transf name="rewrite" arg1="null_add_ket_l">
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="postcondition">
               <proof prover="0" obsolete="true"><result status="valid" time="0.82"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.09" steps="229"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.19"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.6.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.11" steps="229"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.7" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="227"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.0.0.0.0.0.8" expl="postcondition">
              <proof prover="0" obsolete="true"><result status="valid" time="0.90"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_phase_mat.6.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="2" obsolete="true"><result status="valid" time="2.12" steps="225"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_phase_mat.6.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.44" steps="223"/></proof>
        </goal>
        <goal name="VC sem_phase_mat.6.0.0.0.0.0.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="2.32" steps="225"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_phase_mat.6.0.0.0.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="223"/></proof>
       </goal>
       <goal name="VC sem_phase_mat.6.0.0.0.0.2" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="2.38" steps="225"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_phase_mat.6.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="223"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_phase_mat.6.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.09" steps="225"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_phase_mat.6.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="1.85" steps="225"/></proof>
   </goal>
   <goal name="VC sem_phase_mat.6.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="0.99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_phase_mat.7" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_phase_mat.7.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (bv_to_ket x))" arg2="1">
    <goal name="VC sem_phase_mat.7.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_phase_mat.7.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC sem_phase_mat.7.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="bv_to_int_to_bv">
       <goal name="VC sem_phase_mat.7.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="bv_to_int_to_bv">
        <goal name="VC sem_phase_mat.7.0.0.0.0.0.0" expl="postcondition">
        <transf name="replace" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
         <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="H5">
          <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="rewrite" arg1="H5">
           <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="compute_specified" >
            <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="eliminate_if" >
             <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0" expl="VC for sem_phase_mat">
             <transf name="split_vc" >
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="229"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.1" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="229"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2" expl="postcondition">
              <transf name="rewrite" arg1="add_ket_l_null">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.0" expl="postcondition">
               <transf name="replace" arg1="k" arg2="0">
                <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.0.0" expl="postcondition">
                <proof prover="1" obsolete="true"><result status="valid" time="1.07"/></proof>
                </goal>
                <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.0.1" expl="equality hypothesis">
                <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="230"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.40" steps="232"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.24"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.2.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.07" steps="232"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.3" expl="postcondition">
              <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="227"/></proof>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.4" expl="postcondition">
              <transf name="rewrite" arg1="add_ket_l_null">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.4.0" expl="postcondition">
               <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="227"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.4.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="227"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.4.2" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="227"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.4.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="227"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5" expl="postcondition">
              <transf name="rewrite" arg1="add_ket_l_null">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5.0" expl="postcondition">
               <proof prover="0" obsolete="true"><result status="valid" time="1.02"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.16" steps="230"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.15"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.5.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.15" steps="230"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6" expl="postcondition">
              <transf name="rewrite" arg1="null_add_ket_l">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.0" expl="postcondition">
               <transf name="replace" arg1="k" arg2="0">
                <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.0.0" expl="postcondition">
                <proof prover="1" obsolete="true"><result status="valid" time="1.17"/></proof>
                </goal>
                <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.0.1" expl="equality hypothesis">
                <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="231"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.15" steps="233"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.15"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.6.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="1.98" steps="233"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7" expl="postcondition">
              <transf name="rewrite" arg1="null_add_ket_l">
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7.0" expl="postcondition">
               <proof prover="0" obsolete="true"><result status="valid" time="0.84"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="1.93" steps="231"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.33"/></proof>
               </goal>
               <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.7.3" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.36" steps="231"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.0.0.0.0.0.8" expl="postcondition">
              <proof prover="0" obsolete="true"><result status="valid" time="1.06"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_phase_mat.7.0.0.0.0.0.0.1" expl="equality hypothesis">
         <proof prover="2" obsolete="true"><result status="valid" time="2.13" steps="226"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_phase_mat.7.0.0.0.0.0.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="223"/></proof>
        </goal>
        <goal name="VC sem_phase_mat.7.0.0.0.0.0.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="2.07" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_phase_mat.7.0.0.0.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="223"/></proof>
       </goal>
       <goal name="VC sem_phase_mat.7.0.0.0.0.2" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="2.01" steps="226"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_phase_mat.7.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="223"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_phase_mat.7.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.04" steps="226"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_phase_mat.7.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.35" steps="226"/></proof>
   </goal>
   <goal name="VC sem_phase_mat.7.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_phase_mat.8" expl="postcondition">
  <transf name="rewrite" arg1="pps_phase_apply_basis">
   <goal name="VC sem_phase_mat.8.0" expl="postcondition">
   <transf name="eliminate_if" >
    <goal name="VC sem_phase_mat.8.0.0" expl="VC for sem_phase_mat">
    <transf name="split_vc" >
     <goal name="VC sem_phase_mat.8.0.0.0" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="0.83"/></proof>
     </goal>
     <goal name="VC sem_phase_mat.8.0.0.1" expl="postcondition">
     <proof prover="0" obsolete="true"><result status="valid" time="0.87"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_phase_mat.8.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="221"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_hadamard_mat" expl="VC for sem_hadamard_mat">
 <transf name="split_vc" >
  <goal name="VC sem_hadamard_mat.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="210"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.1" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="210"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.2" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="210"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.3" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="1.35"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.4" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="218"/></proof>
  </goal>
  <goal name="VC sem_hadamard_mat.5" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_hadamard_mat.5.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (ket 1 0))" arg2="1">
    <goal name="VC sem_hadamard_mat.5.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_hadamard_mat.5.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC sem_hadamard_mat.5.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="add_ket_l_scal_rev">
       <goal name="VC sem_hadamard_mat.5.0.0.0.0.0" expl="postcondition">
       <transf name="apply" arg1="add_ket_l_eq">
        <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.0" expl="apply premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="219"/></proof>
        </goal>
        <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1" expl="apply premises">
        <transf name="apply" arg1="scalar_eq_gen">
         <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.0" expl="apply premises">
         <proof prover="2" obsolete="true"><result status="valid" time="2.10" steps="221"/></proof>
         </goal>
         <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1" expl="apply premises">
         <transf name="rewrite" arg1="H2">
          <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0" expl="apply premises">
           <transf name="rewrite" arg1="one_mult_t">
            <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0.0" expl="apply premises">
            <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="219"/></proof>
            </goal>
            <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises">
            <transf name="rewrite" arg1="zero_mult_int">
             <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0.1.0" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="2.12" steps="221"/></proof>
             </goal>
             <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.1.1.0.0.1.1" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="2.10" steps="221"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2" expl="apply premises">
        <transf name="apply" arg1="scalar_eq_gen">
         <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.0" expl="apply premises">
         <proof prover="2" obsolete="true"><result status="valid" time="2.06" steps="221"/></proof>
         </goal>
         <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1" expl="apply premises">
         <transf name="rewrite" arg1="H2">
          <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0" expl="apply premises">
           <transf name="rewrite" arg1="one_mult_int">
            <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0.0" expl="apply premises">
            <transf name="rewrite" arg1="one_mult_t">
             <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0.0.0" expl="apply premises">
             <proof prover="2" obsolete="true"><result status="valid" time="0.31" steps="219"/></proof>
             </goal>
             <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0.0.1" expl="rewrite premises">
             <proof prover="0" obsolete="true"><result status="valid" time="1.03"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC sem_hadamard_mat.5.0.0.0.0.0.2.1.0.0.1" expl="rewrite premises">
            <proof prover="0" obsolete="true"><result status="valid" time="0.87"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_hadamard_mat.5.0.0.0.0.1" expl="rewrite premises">
       <proof prover="0" obsolete="true"><result status="valid" time="1.10"/></proof>
       </goal>
       <goal name="VC sem_hadamard_mat.5.0.0.0.0.2" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="1.89" steps="221"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_hadamard_mat.5.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="219"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_hadamard_mat.5.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.03" steps="221"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_hadamard_mat.5.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.08" steps="221"/></proof>
   </goal>
   <goal name="VC sem_hadamard_mat.5.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_hadamard_mat.6" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_hadamard_mat.6.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (ket 1 1))" arg2="1">
    <goal name="VC sem_hadamard_mat.6.0.0" expl="postcondition">
    <transf name="rewrite" arg1="ket_sum_bitvec_one">
     <goal name="VC sem_hadamard_mat.6.0.0.0" expl="postcondition">
     <transf name="compute_specified" >
      <goal name="VC sem_hadamard_mat.6.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="add_ket_l_scal_rev">
       <goal name="VC sem_hadamard_mat.6.0.0.0.0.0" expl="postcondition">
       <transf name="apply" arg1="add_ket_l_eq">
        <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.0" expl="apply premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="221"/></proof>
        </goal>
        <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1" expl="apply premises">
        <transf name="apply" arg1="scalar_eq_gen">
         <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.0" expl="apply premises">
         <proof prover="2" obsolete="true"><result status="valid" time="2.14" steps="223"/></proof>
         </goal>
         <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1" expl="apply premises">
         <transf name="rewrite" arg1="H3">
          <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0" expl="apply premises">
          <transf name="compute_specified" >
           <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0" expl="apply premises">
           <transf name="rewrite" arg1="one_mult_t">
            <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0.0" expl="apply premises">
            <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="221"/></proof>
            </goal>
            <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0.1" expl="rewrite premises">
            <transf name="rewrite" arg1="zero_mult_int">
             <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0.1.0" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="2.16" steps="223"/></proof>
             </goal>
             <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.1.1.0.0.1.1" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="2.12" steps="223"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2" expl="apply premises">
        <transf name="rewrite" arg1="H3">
         <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0" expl="apply premises">
         <transf name="compute_specified" >
          <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0" expl="apply premises">
          <transf name="rewrite" arg1="scalar_assoc">
           <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0" expl="apply premises">
           <transf name="apply" arg1="scalar_eq_gen">
            <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.0" expl="apply premises">
            <proof prover="2" obsolete="true"><result status="valid" time="2.11" steps="223"/></proof>
            </goal>
            <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1" expl="apply premises">
            <transf name="rewrite" arg1="one_mult_int">
             <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1.0" expl="apply premises">
             <transf name="apply" arg1="mult_eq_t_rev">
              <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1.0.0" expl="apply premises">
              <proof prover="1" obsolete="true"><result status="valid" time="1.32"/></proof>
              </goal>
              <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1.0.1" expl="apply premises">
              <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="221"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC sem_hadamard_mat.6.0.0.0.0.0.2.0.0.0.1.1" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="2.04" steps="223"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_hadamard_mat.6.0.0.0.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="2.00" steps="223"/></proof>
       </goal>
       <goal name="VC sem_hadamard_mat.6.0.0.0.0.2" expl="rewrite premises">
       <proof prover="1" obsolete="true"><result status="valid" time="1.33"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_hadamard_mat.6.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="221"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_hadamard_mat.6.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="1.91" steps="223"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_hadamard_mat.6.1" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.08"/></proof>
   </goal>
   <goal name="VC sem_hadamard_mat.6.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_hadamard_mat.7" expl="postcondition">
  <transf name="rewrite" arg1="pps_hadamard_apply_basis">
   <goal name="VC sem_hadamard_mat.7.0" expl="postcondition">
   <transf name="eliminate_if" >
    <goal name="VC sem_hadamard_mat.7.0.0" expl="VC for sem_hadamard_mat">
    <transf name="split_vc" >
     <goal name="VC sem_hadamard_mat.7.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(bv_to_ket x)" arg2="(ket 1 0)">
      <goal name="VC sem_hadamard_mat.7.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="H3">
       <goal name="VC sem_hadamard_mat.7.0.0.0.0.0" expl="postcondition">
       <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="227"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_hadamard_mat.7.0.0.0.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="1.00"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC sem_hadamard_mat.7.0.0.1" expl="postcondition">
     <transf name="replace" arg1="(bv_to_ket x)" arg2="(ket 1 1)">
      <goal name="VC sem_hadamard_mat.7.0.0.1.0" expl="postcondition" proved="true">
      <transf name="apply" proved="true" arg1="H2">
      </transf>
      </goal>
      <goal name="VC sem_hadamard_mat.7.0.0.1.1" expl="equality hypothesis">
      <proof prover="0" obsolete="true"><result status="valid" time="0.92"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_hadamard_mat.7.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="225"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cnot_func" expl="VC for cnot_func">
 <transf name="split_vc" >
  <goal name="VC cnot_func.0" expl="assertion">
  <proof prover="2" obsolete="true"><result status="valid" time="2.08" steps="214"/></proof>
  </goal>
  <goal name="VC cnot_func.1" expl="assertion">
  <proof prover="2" obsolete="true"><result status="valid" time="2.16" steps="216"/></proof>
  </goal>
  <goal name="VC cnot_func.2" expl="precondition">
  <transf name="compute_specified" >
   <goal name="VC cnot_func.2.0" expl="precondition">
   <proof prover="2" obsolete="true"><result status="valid" time="2.30" steps="227"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func.3" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="224"/></proof>
  </goal>
  <goal name="VC cnot_func.4" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="220"/></proof>
  </goal>
  <goal name="VC cnot_func.5" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="1.27"/></proof>
  </goal>
  <goal name="VC cnot_func.6" expl="postcondition">
  <proof prover="1" obsolete="true"><result status="valid" time="1.16"/></proof>
  </goal>
  <goal name="VC cnot_func.7" expl="postcondition">
  <transf name="destruct" arg1="H4">
   <goal name="VC cnot_func.7.0" expl="postcondition">
   <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="223"/></proof>
   </goal>
   <goal name="VC cnot_func.7.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC cnot_func.7.1.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC cnot_func.7.1.0.0" expl="postcondition">
     <transf name="rewrite" arg1="H7">
      <goal name="VC cnot_func.7.1.0.0.0" expl="postcondition">
      <transf name="apply" arg1="set_equal_bv">
       <goal name="VC cnot_func.7.1.0.0.0.0" expl="apply premises">
       <transf name="rewrite" arg1="make_bv_length">
        <goal name="VC cnot_func.7.1.0.0.0.0.0" expl="apply premises">
        <proof prover="2" obsolete="true"><result status="valid" time="2.34" steps="234"/></proof>
        </goal>
        <goal name="VC cnot_func.7.1.0.0.0.0.1" expl="rewrite premises">
        <proof prover="1" obsolete="true"><result status="valid" time="1.61"/></proof>
        </goal>
        <goal name="VC cnot_func.7.1.0.0.0.0.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="230"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC cnot_func.7.1.0.0.0.1" expl="apply premises">
       <transf name="split_vc" >
        <goal name="VC cnot_func.7.1.0.0.0.1.0" expl="apply premises">
        <transf name="rewrite" arg1="int_to_bv_value">
         <goal name="VC cnot_func.7.1.0.0.0.1.0.0" expl="apply premises">
         <transf name="case" arg1="(i = 0)">
          <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0" expl="true case (apply premises)">
          <transf name="rewrite" arg1="assert_make_bv_b">
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0" expl="true case (apply premises)">
           <transf name="compute_specified" >
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0" expl="true case (apply premises)">
            <transf name="replace" arg1="(div 3 (power 2 ((2 - i) - 1)))" arg2="1">
             <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0.0" expl="true case (apply premises)">
             <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="238"/></proof>
             </goal>
             <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis">
             <transf name="replace" arg1="(power 2 ((2 - i) - 1))" arg2="2">
              <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0.1.0" expl="equality hypothesis">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="238"/></proof>
              </goal>
              <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.0.0.1.1" expl="equality hypothesis">
              <proof prover="2" obsolete="true"><result status="valid" time="2.55" steps="242"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.1" expl="rewrite premises">
           <transf name="compute_specified" >
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.1.0" expl="rewrite premises">
            <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="243"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.0.2" expl="rewrite premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="238"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1" expl="false case (apply premises)">
          <transf name="replace" arg1="i" arg2="1">
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0" expl="false case (apply premises)">
           <transf name="rewrite" arg1="assert_make_bv_b">
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0" expl="false case (apply premises)">
            <transf name="compute_specified" >
             <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0" expl="false case (apply premises)">
             <transf name="assert" arg1="(forall a. a= 3 -&gt; mod a 2 = 1)">
              <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.0" expl="asserted formula">
              <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="240"/></proof>
              </goal>
              <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1" expl="false case (apply premises)">
              <transf name="rewrite" arg1="h">
               <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.0" expl="false case (apply premises)">
               <transf name="replace" arg1="(getbv x @ 1)" arg2="0">
                <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.0.0" expl="false case (apply premises)">
                <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="239"/></proof>
                </goal>
                <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.0.1" expl="equality hypothesis">
                <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="239"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.1" expl="rewrite premises">
               <transf name="assert" arg1="(forall a. a = 1 -&gt; div 3 a = 3)">
                <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.1.0" expl="asserted formula">
                <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="241"/></proof>
                </goal>
                <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.0.0.1.1.1" expl="rewrite premises">
                <proof prover="1" obsolete="true"><result status="valid" time="1.51"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.1" expl="rewrite premises">
            <transf name="compute_specified" >
             <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.1.0" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="243"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.0.2" expl="rewrite premises">
            <proof prover="2" obsolete="true"><result status="valid" time="0.51" steps="238"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.1" expl="equality hypothesis">
           <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.1.0" expl="equality hypothesis">
            <proof prover="2" obsolete="true"><result status="valid" time="0.46" steps="236"/></proof>
            </goal>
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.1.1" expl="rewrite premises">
            <proof prover="1" obsolete="true"><result status="valid" time="1.60"/></proof>
            </goal>
            <goal name="VC cnot_func.7.1.0.0.0.1.0.0.1.1.2" expl="rewrite premises">
            <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="238"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC cnot_func.7.1.0.0.0.1.0.1" expl="rewrite premises">
         <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="236"/></proof>
         </goal>
         <goal name="VC cnot_func.7.1.0.0.0.1.0.2" expl="rewrite premises">
         <proof prover="1" obsolete="true"><result status="valid" time="1.61"/></proof>
         </goal>
         <goal name="VC cnot_func.7.1.0.0.0.1.0.3" expl="rewrite premises">
         <transf name="rewrite" arg1="make_bv_length" arg2="in" arg3="H">
          <goal name="VC cnot_func.7.1.0.0.0.1.0.3.0" expl="rewrite premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.51" steps="234"/></proof>
          </goal>
          <goal name="VC cnot_func.7.1.0.0.0.1.0.3.1" expl="rewrite premises">
          <proof prover="1" obsolete="true"><result status="valid" time="1.82"/></proof>
          </goal>
          <goal name="VC cnot_func.7.1.0.0.0.1.0.3.2" expl="rewrite premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="236"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func.8" expl="postcondition">
  <transf name="destruct" arg1="H5">
   <goal name="VC cnot_func.8.0" expl="postcondition">
   <proof prover="2" obsolete="true"><result status="valid" time="0.41" steps="223"/></proof>
   </goal>
   <goal name="VC cnot_func.8.1" expl="postcondition">
   <transf name="eliminate_let" >
    <goal name="VC cnot_func.8.1.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="VC cnot_func.8.1.0.0" expl="postcondition">
     <transf name="apply" arg1="set_equal_bv">
      <goal name="VC cnot_func.8.1.0.0.0" expl="apply premises">
      <proof prover="2" obsolete="true"><result status="valid" time="2.50" steps="235"/></proof>
      </goal>
      <goal name="VC cnot_func.8.1.0.0.1" expl="apply premises">
      <transf name="split_vc" >
       <goal name="VC cnot_func.8.1.0.0.1.0" expl="apply premises">
       <transf name="rewrite" arg1="H8">
        <goal name="VC cnot_func.8.1.0.0.1.0.0" expl="apply premises">
        <transf name="compute_specified" >
         <goal name="VC cnot_func.8.1.0.0.1.0.0.0" expl="apply premises">
         <transf name="eliminate_if" >
          <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0">
          <transf name="split_vc" >
           <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0" expl="apply premises">
           <transf name="replace" arg1="(getbv x @ i)" arg2="1">
            <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0" expl="apply premises">
            <transf name="rewrite" arg1="int_to_bv_value">
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.0" expl="apply premises">
             <transf name="replace" arg1="(power 2 ((2 - i) - 1))" arg2="2">
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="2" obsolete="true"><result status="valid" time="0.60" steps="236"/></proof>
              </goal>
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.0.1" expl="equality hypothesis">
              <proof prover="2" obsolete="true"><result status="valid" time="2.68" steps="241"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.1" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="236"/></proof>
             </goal>
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.2" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="2.66" steps="241"/></proof>
             </goal>
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.0.3" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="0.55" steps="236"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.0.1" expl="equality hypothesis">
            <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="236"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1" expl="apply premises">
           <transf name="replace" arg1="i" arg2="1">
            <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0" expl="apply premises">
            <transf name="replace" arg1="(1 - (getbv x @ 1))" arg2="0">
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0" expl="apply premises">
             <transf name="rewrite" arg1="int_to_bv_value">
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.0" expl="apply premises">
              <transf name="replace" arg1="(power 2 ((2 - 1) - 1))" arg2="1">
               <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.0.0" expl="apply premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="236"/></proof>
               </goal>
               <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.0.1" expl="equality hypothesis">
               <proof prover="2" obsolete="true"><result status="valid" time="2.52" steps="241"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.1" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="236"/></proof>
              </goal>
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.2" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="2.57" steps="241"/></proof>
              </goal>
              <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.0.3" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="236"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.0.1" expl="equality hypothesis">
             <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="236"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="VC cnot_func.8.1.0.0.1.0.0.0.0.1.1" expl="equality hypothesis">
            <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="236"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC cnot_func.8.1.0.0.1.0.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.50" steps="234"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_cnot_func" expl="VC for invol_cnot_func">
 <transf name="split_vc" >
  <goal name="VC invol_cnot_func.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC invol_cnot_func.0.0" expl="postcondition">
   <transf name="case" arg1="(bv_to_int x = 0)">
    <goal name="VC invol_cnot_func.0.0.0" expl="true case (postcondition)">
    <transf name="rewrite" arg1="cnot_func_spec3">
     <goal name="VC invol_cnot_func.0.0.0.0" expl="true case (postcondition)">
     <proof prover="2" obsolete="true"><result status="valid" time="2.17" steps="216"/></proof>
     </goal>
     <goal name="VC invol_cnot_func.0.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="2.27" steps="216"/></proof>
     </goal>
     <goal name="VC invol_cnot_func.0.0.0.2" expl="rewrite premises">
     <transf name="rewrite" arg1="cnot_func_spec3">
      <goal name="VC invol_cnot_func.0.0.0.2.0" expl="rewrite premises">
      <proof prover="0" obsolete="true"><result status="valid" time="0.99"/></proof>
      </goal>
      <goal name="VC invol_cnot_func.0.0.0.2.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="214"/></proof>
      </goal>
      <goal name="VC invol_cnot_func.0.0.0.2.2" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="214"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC invol_cnot_func.0.0.1" expl="false case (postcondition)">
    <transf name="case" arg1="(bv_to_int x = 1)">
     <goal name="VC invol_cnot_func.0.0.1.0" expl="false case (true case. postcondition)">
     <transf name="rewrite" arg1="cnot_func_spec2">
      <goal name="VC invol_cnot_func.0.0.1.0.0" expl="false case (true case. postcondition)">
      <proof prover="2" obsolete="true"><result status="valid" time="2.17" steps="218"/></proof>
      </goal>
      <goal name="VC invol_cnot_func.0.0.1.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="2.02" steps="218"/></proof>
      </goal>
      <goal name="VC invol_cnot_func.0.0.1.0.2" expl="rewrite premises">
      <transf name="rewrite" arg1="cnot_func_spec2">
       <goal name="VC invol_cnot_func.0.0.1.0.2.0" expl="rewrite premises">
       <proof prover="0" obsolete="true"><result status="valid" time="0.98"/></proof>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.0.2.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="216"/></proof>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.0.2.2" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="216"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC invol_cnot_func.0.0.1.1" expl="false case (postcondition)">
     <transf name="case" arg1="(bv_to_int x = 2)">
      <goal name="VC invol_cnot_func.0.0.1.1.0" expl="false case (true case. postcondition)">
      <transf name="rewrite" arg1="cnot_func_spec">
       <goal name="VC invol_cnot_func.0.0.1.1.0.0" expl="false case (true case. postcondition)">
       <proof prover="2" obsolete="true"><result status="valid" time="2.25" steps="220"/></proof>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.1.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="2.08" steps="220"/></proof>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.1.0.2" expl="rewrite premises">
       <transf name="rewrite" arg1="cnot_func_spec1">
        <goal name="VC invol_cnot_func.0.0.1.1.0.2.0" expl="rewrite premises">
        <transf name="apply" arg1="bv_to_int_to_bv_">
         <goal name="VC invol_cnot_func.0.0.1.1.0.2.0.0" expl="apply premises">
         <proof prover="2" obsolete="true"><result status="valid" time="0.41" steps="218"/></proof>
         </goal>
         <goal name="VC invol_cnot_func.0.0.1.1.0.2.0.1" expl="apply premises">
         <proof prover="1" obsolete="true"><result status="valid" time="1.43"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.0.2.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.46" steps="218"/></proof>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.0.2.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="218"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC invol_cnot_func.0.0.1.1.1" expl="false case (postcondition)">
      <transf name="assert" arg1="(bv_to_int x = 3)">
       <goal name="VC invol_cnot_func.0.0.1.1.1.0" expl="asserted formula">
       <transf name="assert" arg1="(0&lt;= bv_to_int x &lt;4)">
        <goal name="VC invol_cnot_func.0.0.1.1.1.0.0" expl="asserted formula">
        <transf name="replace" arg1="4" arg2="(power  2 (length x))">
         <goal name="VC invol_cnot_func.0.0.1.1.1.0.0.0" expl="asserted formula">
         <proof prover="2" obsolete="true"><result status="valid" time="2.10" steps="219"/></proof>
         </goal>
         <goal name="VC invol_cnot_func.0.0.1.1.1.0.0.1" expl="equality hypothesis">
         <proof prover="2" obsolete="true"><result status="valid" time="2.31" steps="220"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.1.0.1" expl="asserted formula">
        <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="222"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC invol_cnot_func.0.0.1.1.1.1" expl="false case (postcondition)">
       <transf name="rewrite" arg1="cnot_func_spec1">
        <goal name="VC invol_cnot_func.0.0.1.1.1.1.0" expl="false case (postcondition)">
        <proof prover="2" obsolete="true"><result status="valid" time="2.22" steps="222"/></proof>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.1.1.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="2.24" steps="222"/></proof>
        </goal>
        <goal name="VC invol_cnot_func.0.0.1.1.1.1.2" expl="rewrite premises">
        <transf name="rewrite" arg1="cnot_func_spec">
         <goal name="VC invol_cnot_func.0.0.1.1.1.1.2.0" expl="rewrite premises">
         <proof prover="1" obsolete="true"><result status="valid" time="1.29"/></proof>
         </goal>
         <goal name="VC invol_cnot_func.0.0.1.1.1.1.2.1" expl="rewrite premises">
         <proof prover="2" obsolete="true"><result status="valid" time="0.48" steps="220"/></proof>
         </goal>
         <goal name="VC invol_cnot_func.0.0.1.1.1.1.2.2" expl="rewrite premises">
         <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="220"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC cnot_func_int" expl="VC for cnot_func_int">
 <transf name="split_vc" >
  <goal name="VC cnot_func_int.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="210"/></proof>
  </goal>
  <goal name="VC cnot_func_int.1" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="214"/></proof>
  </goal>
  <goal name="VC cnot_func_int.2" expl="postcondition">
  <transf name="replace" arg1="4" arg2="(power 2 2)">
   <goal name="VC cnot_func_int.2.0" expl="postcondition">
   <proof prover="2" obsolete="true"><result status="valid" time="2.20" steps="226"/></proof>
   </goal>
   <goal name="VC cnot_func_int.2.1" expl="equality hypothesis">
   <proof prover="2" obsolete="true"><result status="valid" time="2.12" steps="226"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func_int.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="0.82"/></proof>
  </goal>
  <goal name="VC cnot_func_int.4" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC cnot_func_int.4.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC cnot_func_int.4.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H7">
     <goal name="VC cnot_func_int.4.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.4.0.0.0.0" expl="postcondition">
      <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.4.0.0.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.4.0.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.20"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cnot_func_int.4.0.0.1" expl="rewrite premises">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.4.0.0.1.0" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.66" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.4.0.0.1.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.4.0.0.1.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.12"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func_int.5" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC cnot_func_int.5.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC cnot_func_int.5.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H7">
     <goal name="VC cnot_func_int.5.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.5.0.0.0.0" expl="postcondition">
      <proof prover="2" obsolete="true"><result status="valid" time="0.60" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.5.0.0.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.5.0.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.41"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cnot_func_int.5.0.0.1" expl="rewrite premises">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.5.0.0.1.0" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.5.0.0.1.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.53" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.5.0.0.1.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.36"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func_int.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC cnot_func_int.6.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC cnot_func_int.6.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H7">
     <goal name="VC cnot_func_int.6.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.6.0.0.0.0" expl="postcondition">
      <proof prover="2" obsolete="true"><result status="valid" time="0.46" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.6.0.0.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.48" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.6.0.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.13"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC cnot_func_int.6.0.0.1" expl="rewrite premises">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC cnot_func_int.6.0.0.1.0" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.48" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.6.0.0.1.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.54" steps="242"/></proof>
      </goal>
      <goal name="VC cnot_func_int.6.0.0.1.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.37"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC cnot_func_int.7" expl="postcondition">
  <transf name="eliminate_if" >
   <goal name="VC cnot_func_int.7.0" expl="VC for cnot_func_int">
   <transf name="split_vc" >
    <goal name="VC cnot_func_int.7.0.0" expl="postcondition">
    <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="239"/></proof>
    </goal>
    <goal name="VC cnot_func_int.7.0.1" expl="postcondition">
    <transf name="case" arg1="(i = 2)">
     <goal name="VC cnot_func_int.7.0.1.0" expl="true case (postcondition)">
     <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="232"/></proof>
     </goal>
     <goal name="VC cnot_func_int.7.0.1.1" expl="false case (postcondition)">
     <transf name="assert" arg1="(i =3)">
      <goal name="VC cnot_func_int.7.0.1.1.0" expl="asserted formula">
      <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="230"/></proof>
      </goal>
      <goal name="VC cnot_func_int.7.0.1.1.1" expl="false case (postcondition)">
      <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="234"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_cnot_func_int" expl="VC for invol_cnot_func_int">
 <transf name="split_vc" >
  <goal name="VC invol_cnot_func_int.0" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.41" steps="224"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_cnot_mat" expl="VC for sem_cnot_mat">
 <transf name="split_vc" >
  <goal name="VC sem_cnot_mat.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="218"/></proof>
  </goal>
  <goal name="VC sem_cnot_mat.1" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="219"/></proof>
  </goal>
  <goal name="VC sem_cnot_mat.2" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="2.15" steps="226"/></proof>
  </goal>
  <goal name="VC sem_cnot_mat.3" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="226"/></proof>
  </goal>
  <goal name="VC sem_cnot_mat.4" expl="postcondition">
  <transf name="apply" arg1="set_equal_mat">
   <goal name="VC sem_cnot_mat.4.0" expl="apply premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.15" steps="229"/></proof>
   </goal>
   <goal name="VC sem_cnot_mat.4.1" expl="apply premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.09" steps="229"/></proof>
   </goal>
   <goal name="VC sem_cnot_mat.4.2" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC sem_cnot_mat.4.2.0" expl="apply premises">
    <transf name="rewrite" arg1="H3">
     <goal name="VC sem_cnot_mat.4.2.0.0" expl="apply premises">
     <transf name="rewrite" arg1="assert_make">
      <goal name="VC sem_cnot_mat.4.2.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC sem_cnot_mat.4.2.0.0.0.0" expl="apply premises">
       <proof prover="1" obsolete="true"><result status="valid" time="1.44"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_cnot_mat.4.2.0.0.1" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.26"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.4.2.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.21"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.5" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_cnot_mat.5.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (bv_to_ket x))" arg2="2">
    <goal name="VC sem_cnot_mat.5.0.0" expl="postcondition">
    <transf name="instantiate" arg1="ket_sum_l_null_but_maybe_one_elt" arg2="(fun (bvx:bitvec) -&gt;
    get result (bv_to_int bvx) (ket_to_int (bv_to_ket x))
    *.. ket (ket_length (bv_to_ket x)) (bv_to_int bvx)),(n_bvs 2),(cnot_func x),2">
     <goal name="VC sem_cnot_mat.5.0.0.0" expl="postcondition">
     <transf name="replace" arg1="(ket_length (bv_to_ket x))" arg2="2" arg3="in" arg4="Hinst">
      <goal name="VC sem_cnot_mat.5.0.0.0.0" expl="postcondition">
      <transf name="rewrite" arg1="Hinst">
       <goal name="VC sem_cnot_mat.5.0.0.0.0.0" expl="postcondition">
       <transf name="compute_specified" >
        <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0" expl="postcondition">
        <transf name="rewrite" arg1="scalar_c_one_gen">
         <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="replace" arg1="(make_ket 2 (fun (y1:int) -&gt; get_ket (ket 2 (bv_to_int (cnot_func x))) y1))" arg2="(ket 2 (bv_to_int (cnot_func x)))">
          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="replace" arg1="(bv_to_int (cnot_func x))" arg2="(cnot_func_int (bv_to_int x))">
           <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0" expl="postcondition">
           <transf name="eliminate_definition" >
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
            <transf name="rewrite" arg1="bv_to_ket_def">
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0" expl="postcondition">
             <transf name="apply" arg1="ket_eq">
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.0" expl="apply premises">
              <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="247"/></proof>
              </goal>
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.1" expl="apply premises">
              <proof prover="5" obsolete="true"><result status="valid" time="0.28"/></proof>
              </goal>
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2" expl="apply premises">
              <transf name="eliminate_if" >
               <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0">
               <transf name="split_vc" >
                <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.0" expl="apply premises">
                <proof prover="0" obsolete="true"><result status="valid" time="4.25"/></proof>
                </goal>
                <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.1" expl="apply premises">
                <proof prover="1" obsolete="true"><result status="valid" time="1.24"/></proof>
                </goal>
                <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2" expl="apply premises">
                <transf name="assert" arg1="(bv_to_int x = 3)">
                 <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0" expl="asserted formula">
                 <transf name="rewrite" arg1="bv_to_int_sum">
                  <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0" expl="asserted formula">
                  <transf name="rewrite" arg1="ind_isum_plus_one">
                   <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0" expl="asserted formula">
                   <transf name="replace" arg1="((fun (k:int) -&gt; (getbv x @ k) * power 2 ((length x - 1) - k)) @ 0)" arg2="2">
                    <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0" expl="asserted formula">
                    <transf name="compute_specified" >
                     <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0" expl="asserted formula">
                     <transf name="rewrite" arg1="ind_isum_one">
                      <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0" expl="asserted formula">
                      <transf name="compute_specified" >
                       <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0" expl="asserted formula">
                       <transf name="rewrite" arg1="one_mult">
                        <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.0" expl="asserted formula">
                        <proof prover="1" obsolete="true"><result status="valid" time="1.06"/></proof>
                        </goal>
                        <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1" expl="rewrite premises">
                        <transf name="case" arg1="(getbv x @ 1 = 0)">
                         <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0" expl="true case (rewrite premises)">
                         <transf name="assert" arg1="(bv_to_int x = 2)">
                          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0" expl="asserted formula">
                          <transf name="rewrite" arg1="bv_to_int_sum">
                           <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0" expl="asserted formula">
                           <transf name="rewrite" arg1="ind_isum_plus_one">
                            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula">
                            <transf name="compute_specified" >
                             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula">
                             <transf name="rewrite" arg1="ind_isum_one">
                              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula">
                              <transf name="compute_specified" >
                               <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0" expl="asserted formula">
                               <transf name="rewrite" arg1="add_zero">
                                <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0" expl="asserted formula">
                                <transf name="rewrite" arg1="one_mult">
                                 <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.0" expl="asserted formula">
                                 <proof prover="1" obsolete="true"><result status="valid" time="1.27"/></proof>
                                 </goal>
                                 <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                                 <proof prover="0" obsolete="true"><result status="valid" time="4.35"/></proof>
                                 </goal>
                                </transf>
                                </goal>
                                <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0.0.0.0.1" expl="rewrite premises">
                                <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="253"/></proof>
                                </goal>
                               </transf>
                               </goal>
                              </transf>
                              </goal>
                              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises">
                              <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="253"/></proof>
                              </goal>
                             </transf>
                             </goal>
                            </transf>
                            </goal>
                            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
                            <proof prover="2" obsolete="true"><result status="valid" time="0.59" steps="253"/></proof>
                            </goal>
                           </transf>
                           </goal>
                          </transf>
                          </goal>
                          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.0.1" expl="true case (rewrite premises)">
                          <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="253"/></proof>
                          </goal>
                         </transf>
                         </goal>
                         <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.0.0.1.1" expl="false case (rewrite premises)">
                         <proof prover="1" obsolete="true"><result status="valid" time="1.36"/></proof>
                         </goal>
                        </transf>
                        </goal>
                       </transf>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.0.0.1" expl="rewrite premises">
                      <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="251"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                    <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.1" expl="equality hypothesis">
                    <transf name="compute_specified" >
                     <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.1.0" expl="equality hypothesis">
                     <transf name="rewrite" arg1="one_mult">
                      <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.1.0.0" expl="equality hypothesis">
                      <proof prover="1" obsolete="true"><result status="valid" time="1.34"/></proof>
                      </goal>
                      <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.0.1.0.1" expl="rewrite premises">
                      <proof prover="1" obsolete="true"><result status="valid" time="1.48"/></proof>
                      </goal>
                     </transf>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.0.0.1" expl="rewrite premises">
                   <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="251"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.0.0.0.2.0.2.1" expl="apply premises">
                 <proof prover="1" obsolete="true"><result status="valid" time="1.39"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.1" expl="equality hypothesis">
           <transf name="eliminate_definition" >
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.1.0" expl="equality hypothesis">
            <transf name="rewrite" arg1="cnot_func_int_def">
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.0.1.0.0" expl="equality hypothesis">
             <proof prover="0" obsolete="true"><result status="valid" time="4.85"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1" expl="equality hypothesis">
          <transf name="apply" arg1="set_equal_ket_l">
           <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1.0" expl="apply premises">
           <transf name="exists" arg1="2">
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1.0.0">
            <transf name="split_vc" >
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1.0.0.0">
             <proof prover="2" obsolete="true"><result status="valid" time="2.15" steps="234"/></proof>
             </goal>
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1.0.0.1">
             <proof prover="2" obsolete="true"><result status="valid" time="2.23" steps="234"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1.1" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1.1.0" expl="apply premises">
            <transf name="rewrite" arg1="assert_make_ket_l">
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1.1.0.0" expl="apply premises" proved="true">
             <transf name="compute_specified" proved="true" >
             </transf>
             </goal>
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.0.1.1.0.1" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="235"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1" expl="rewrite premises">
         <transf name="replace" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0" expl="rewrite premises">
          <transf name="rewrite" arg1="H4">
           <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0" expl="rewrite premises">
           <transf name="compute_specified" >
            <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0" expl="rewrite premises">
            <transf name="assert" arg1="(bv_to_int x = cnot_func_int (bv_to_int (cnot_func x)))">
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0.0" expl="asserted formula">
             <transf name="eliminate_definition" >
              <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula">
              <transf name="rewrite" arg1="cnot_func_int_def">
               <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="asserted formula">
               <proof prover="0" obsolete="true"><result status="valid" time="4.13"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="233"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC sem_cnot_mat.5.0.0.0.0.0.0.1.1" expl="equality hypothesis">
          <proof prover="2" obsolete="true"><result status="valid" time="2.26" steps="234"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="231"/></proof>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.2" expl="rewrite premises">
       <proof prover="1" obsolete="true"><result status="valid" time="1.38"/></proof>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.3" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="2.07" steps="233"/></proof>
       </goal>
       <goal name="VC sem_cnot_mat.5.0.0.0.0.4" expl="rewrite premises">
       <transf name="compute_specified" >
        <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0" expl="rewrite premises">
        <transf name="split_vc" >
         <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0" expl="rewrite premises">
         <transf name="rewrite" arg1="get_ket_scalar">
          <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0" expl="rewrite premises">
          <transf name="rewrite" arg1="H8">
           <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0" expl="rewrite premises">
           <transf name="compute_specified" >
            <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0" expl="rewrite premises">
            <transf name="eliminate_if" >
             <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0">
             <transf name="split_vc" >
              <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0" expl="rewrite premises">
              <transf name="eliminate_definition" >
               <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0.0" expl="rewrite premises">
               <transf name="assert" arg1="(cnot_func_int (ket_to_int (bv_to_ket x)) = cnot_func_int(cnot_func_int (bv_to_int e&#39;)))">
                <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0.0.0" expl="asserted formula">
                <proof prover="2" obsolete="true"><result status="valid" time="0.50" steps="257"/></proof>
                </goal>
                <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0.0.1" expl="rewrite premises">
                <transf name="rewrite" arg1="invol_cnot_func_int" arg2="in" arg3="h">
                 <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
                 <transf name="rewrite" arg1="cnot_func_int_def" arg2="in" arg3="h">
                  <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0.0.1.0.0" expl="rewrite premises">
                  <transf name="replace" arg1="(int_to_bv (ket_to_int (bv_to_ket x)) 2)" arg2="( x)" arg3="in" arg4="h">
                   <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0.0.1.0.0.0" expl="rewrite premises">
                   <proof prover="1" obsolete="true"><result status="valid" time="1.35"/></proof>
                   </goal>
                   <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0.0.1.0.0.1" expl="equality hypothesis">
                   <proof prover="0" obsolete="true"><result status="valid" time="4.55"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
                 <proof prover="1" obsolete="true"><result status="valid" time="1.28"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_cnot_mat.5.0.0.0.0.4.0.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="2.28" steps="244"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_cnot_mat.5.0.0.0.1" expl="equality hypothesis">
      <proof prover="2" obsolete="true"><result status="valid" time="2.10" steps="234"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.5.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.04" steps="233"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.5.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.19" steps="233"/></proof>
   </goal>
   <goal name="VC sem_cnot_mat.5.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.40"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.6" expl="postcondition">
  <transf name="rewrite" arg1="H1">
   <goal name="VC sem_cnot_mat.6.0" expl="postcondition">
   <transf name="replace" arg1="(if (getbv x @ 0) = 0 then x
      else int_to_bv (if bv_to_int x = 2 then 3 else 2) 2)" arg2="(cnot_func x)">
    <goal name="VC sem_cnot_mat.6.0.0" expl="postcondition">
    <transf name="case" arg1="(getbv x 0 = 0)">
     <goal name="VC sem_cnot_mat.6.0.0.0" expl="true case (postcondition)">
     <proof prover="0" obsolete="true"><result status="valid" time="0.96"/></proof>
     </goal>
     <goal name="VC sem_cnot_mat.6.0.0.1" expl="false case (postcondition)">
     <transf name="instantiate" arg1="cnot_func_def" arg2="x">
      <goal name="VC sem_cnot_mat.6.0.0.1.0" expl="false case (postcondition)">
      <transf name="destruct" arg1="Hinst">
       <goal name="VC sem_cnot_mat.6.0.0.1.0.0" expl="destruct premise">
       <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="233"/></proof>
       </goal>
       <goal name="VC sem_cnot_mat.6.0.0.1.0.1" expl="false case (postcondition)">
       <transf name="destruct" arg1="Hinst">
        <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0" expl="false case (postcondition)">
        <transf name="replace" arg1="(make_bv
        (fun (i:int) -&gt; if i = 0 then getbv x @ i else 1 - (getbv x @ i))2 )" arg2="(cnot_func x)">
         <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0.0" expl="false case (postcondition)">
         <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="237"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0.1" expl="equality hypothesis">
         <transf name="rewrite" arg1="Hinst">
          <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0.1.0" expl="equality hypothesis">
          <transf name="compute_specified" >
           <goal name="VC sem_cnot_mat.6.0.0.1.0.1.0.1.0.0" expl="equality hypothesis">
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_cnot_mat.6.0.0.1.0.1.1" expl="false case (postcondition)">
        <transf name="replace" arg1="(make_bv
          (fun (i:int) -&gt; if i = 0 then getbv x @ i else 1 - (getbv x @ i)) 2)" arg2="(cnot_func x)">
         <goal name="VC sem_cnot_mat.6.0.0.1.0.1.1.0" expl="false case (postcondition)">
         <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="233"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.6.0.0.1.0.1.1.1" expl="equality hypothesis">
         <proof prover="1" obsolete="true"><result status="valid" time="0.49"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.6.0.1" expl="equality hypothesis">
    <transf name="eliminate_if" >
     <goal name="VC sem_cnot_mat.6.0.1.0">
     <transf name="split_vc" >
      <goal name="VC sem_cnot_mat.6.0.1.0.0" expl="equality hypothesis">
      <proof prover="2" obsolete="true"><result status="valid" time="2.23" steps="235"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.6.0.1.0.1" expl="equality hypothesis">
      <proof prover="2" obsolete="true"><result status="valid" time="2.19" steps="237"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.6.0.1.0.2" expl="equality hypothesis">
      <transf name="split_all_full" >
       <goal name="VC sem_cnot_mat.6.0.1.0.2.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="cnot_func_spec">
        <goal name="VC sem_cnot_mat.6.0.1.0.2.0.0" expl="equality hypothesis">
        <proof prover="2" obsolete="true"><result status="valid" time="0.51" steps="235"/></proof>
        </goal>
        <goal name="VC sem_cnot_mat.6.0.1.0.2.0.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="235"/></proof>
        </goal>
        <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2" expl="rewrite premises">
        <transf name="assert" arg1="(0 &lt;= bv_to_int x &lt; power 2 (length x))">
         <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2.0" expl="asserted formula">
         <proof prover="2" obsolete="true"><result status="valid" time="2.29" steps="236"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2.1" expl="rewrite premises">
         <transf name="replace" arg1="(power 2 (length x))" arg2="4" arg3="in" arg4="h">
          <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2.1.0" expl="rewrite premises">
          <proof prover="2" obsolete="true"><result status="valid" time="2.21" steps="241"/></proof>
          </goal>
          <goal name="VC sem_cnot_mat.6.0.1.0.2.0.2.1.1" expl="equality hypothesis">
          <proof prover="2" obsolete="true"><result status="valid" time="2.19" steps="241"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.6.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="231"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.7" expl="postcondition">
  <transf name="replace" arg1="(ket 2 i)" arg2="(bv_to_ket (int_to_bv i 2))">
   <goal name="VC sem_cnot_mat.7.0" expl="postcondition">
   <transf name="rewrite" arg1="H3">
    <goal name="VC sem_cnot_mat.7.0.0" expl="postcondition">
    <transf name="eliminate_definition" >
     <goal name="VC sem_cnot_mat.7.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="bv_to_ket_def">
      <goal name="VC sem_cnot_mat.7.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="ket_eq">
       <goal name="VC sem_cnot_mat.7.0.0.0.0.0" expl="apply premises">
       <transf name="eliminate_if" >
        <goal name="VC sem_cnot_mat.7.0.0.0.0.0.0">
        <transf name="split_vc" >
         <goal name="VC sem_cnot_mat.7.0.0.0.0.0.0.0" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="4.47"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.0.0.1" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="4.29"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.0.0.2" expl="apply premises">
         <proof prover="0" obsolete="true"><result status="valid" time="3.75"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_cnot_mat.7.0.0.0.0.1" expl="apply premises">
       <transf name="eliminate_if" >
        <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0">
        <transf name="split_vc" >
         <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.0" expl="apply premises">
         <transf name="split_all_full" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.0.0" expl="apply premises">
          <transf name="rewrite" arg1="int_to_bv_spec1">
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.0.0.0" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.56" steps="251"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.61" steps="251"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.1" expl="apply premises">
         <transf name="split_all_full" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.1.0" expl="apply premises">
          <transf name="rewrite" arg1="int_to_bv_spec1">
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.1.0.0" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.60" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.1.0.1" expl="rewrite premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.59" steps="253"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.2" expl="apply premises">
         <transf name="split_all_full" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.2.0" expl="apply premises">
          <transf name="rewrite" arg1="int_to_bv_spec1">
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.2.0.0" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.1.0.2.0.1" expl="rewrite premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.58" steps="253"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC sem_cnot_mat.7.0.0.0.0.2" expl="apply premises">
       <transf name="replace" arg1="(getbv (int_to_bv i 2) @ 0)" arg2="(div i 2)">
        <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0" expl="apply premises">
        <transf name="rewrite" arg1="bv_to_int_to_bv_">
         <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0" expl="apply premises">
         <transf name="eliminate_if" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0">
          <transf name="split_vc" >
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.0" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="4.84"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.1" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="4.69"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.2" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.3" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.45" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.4" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.51" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.5" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.50" steps="254"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.6" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="4.66"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.7" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="255"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.8" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.44" steps="253"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.9" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.48" steps="254"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.10" expl="apply premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="255"/></proof>
           </goal>
           <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.0.0.11" expl="apply premises">
           <proof prover="0" obsolete="true"><result status="valid" time="4.79"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.1" expl="rewrite premises">
         <proof prover="2" obsolete="true"><result status="valid" time="0.65" steps="249"/></proof>
         </goal>
         <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.2" expl="rewrite premises">
         <transf name="split_vc" >
          <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.2.0" expl="rewrite premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="249"/></proof>
          </goal>
          <goal name="VC sem_cnot_mat.7.0.0.0.0.2.0.2.1" expl="rewrite premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.59" steps="249"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_cnot_mat.7.0.0.0.0.2.1" expl="equality hypothesis">
        <proof prover="0" obsolete="true"><result status="valid" time="4.82"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.7.0.1" expl="rewrite premises">
    <transf name="split_all_full" >
     <goal name="VC sem_cnot_mat.7.0.1.0" expl="rewrite premises">
     <transf name="rewrite" arg1="int_to_bv_spec1">
      <goal name="VC sem_cnot_mat.7.0.1.0.0" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="233"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.7.0.1.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="233"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.7.1" expl="equality hypothesis">
   <proof prover="0" obsolete="true"><result status="valid" time="0.83"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.8" expl="postcondition">
  <transf name="rewrite" arg1="H3">
   <goal name="VC sem_cnot_mat.8.0" expl="postcondition">
   <transf name="replace" arg1="(if (getbv x @ 0) = 0 then x
   else int_to_bv (if bv_to_int x = 2 then 3 else 2) 2)" arg2="(cnot_func x)">
    <goal name="VC sem_cnot_mat.8.0.0" expl="postcondition" proved="true">
    <transf name="compute_specified" proved="true" >
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.8.0.1" expl="equality hypothesis">
    <transf name="eliminate_if" >
     <goal name="VC sem_cnot_mat.8.0.1.0">
     <transf name="split_vc" >
      <goal name="VC sem_cnot_mat.8.0.1.0.0" expl="equality hypothesis">
      <proof prover="2" obsolete="true"><result status="valid" time="2.53" steps="241"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.8.0.1.0.1" expl="equality hypothesis">
      <proof prover="2" obsolete="true"><result status="valid" time="2.60" steps="243"/></proof>
      </goal>
      <goal name="VC sem_cnot_mat.8.0.1.0.2" expl="equality hypothesis">
      <transf name="split_all_full" >
       <goal name="VC sem_cnot_mat.8.0.1.0.2.0" expl="equality hypothesis">
       <transf name="rewrite" arg1="cnot_func_spec">
        <goal name="VC sem_cnot_mat.8.0.1.0.2.0.0" expl="equality hypothesis">
        <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="241"/></proof>
        </goal>
        <goal name="VC sem_cnot_mat.8.0.1.0.2.0.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="241"/></proof>
        </goal>
        <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2" expl="rewrite premises">
        <transf name="rewrite" arg1="bv_to_int_sum">
         <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0" expl="rewrite premises">
         <transf name="rewrite" arg1="ind_isum_plus_one">
          <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0" expl="rewrite premises">
          <transf name="rewrite" arg1="ind_isum_one">
           <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0" expl="rewrite premises">
           <transf name="compute_specified" >
            <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0" expl="rewrite premises">
            <transf name="rewrite" arg1="one_mult_int">
             <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0" expl="rewrite premises">
             <transf name="rewrite" arg1="one_mult_int">
              <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.0" expl="rewrite premises">
              <transf name="replace" arg1="(power 2 (length x - 1) )" arg2="2">
               <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.0.0" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="2.42" steps="243"/></proof>
               </goal>
               <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.0.1" expl="equality hypothesis">
               <proof prover="2" obsolete="true"><result status="valid" time="2.44" steps="243"/></proof>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1" expl="rewrite premises">
              <transf name="case" arg1="(getbv x 1 = 0)">
               <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0" expl="true case (rewrite premises)">
               <transf name="replace" arg1="(bv_to_int x)" arg2="2" arg3="in" arg4="H">
                <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.0" expl="true case (rewrite premises)">
                <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="239"/></proof>
                </goal>
                <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1" expl="equality hypothesis">
                <transf name="rewrite" arg1="bv_to_int_sum">
                 <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0" expl="equality hypothesis">
                 <transf name="rewrite" arg1="ind_isum_plus_one">
                  <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0" expl="equality hypothesis">
                  <transf name="rewrite" arg1="ind_isum_one">
                   <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0" expl="equality hypothesis">
                   <transf name="compute_specified" >
                    <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0" expl="equality hypothesis">
                    <transf name="rewrite" arg1="one_mult_int">
                     <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0" expl="equality hypothesis">
                     <transf name="rewrite" arg1="zero_mult_int">
                      <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0" expl="equality hypothesis">
                      <transf name="replace" arg1="(power 2 (length x - 1) )" arg2="2">
                       <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0.0" expl="equality hypothesis">
                       <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="243"/></proof>
                       </goal>
                       <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.0.1" expl="equality hypothesis">
                       <proof prover="2" obsolete="true"><result status="valid" time="2.37" steps="245"/></proof>
                       </goal>
                      </transf>
                      </goal>
                      <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.0.1" expl="rewrite premises">
                      <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="243"/></proof>
                      </goal>
                     </transf>
                     </goal>
                     <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.0.0.1" expl="rewrite premises">
                     <proof prover="0" obsolete="true"><result status="valid" time="1.13"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.0.1" expl="rewrite premises">
                   <proof prover="2" obsolete="true"><result status="valid" time="0.32" steps="243"/></proof>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.0.1.0.1" expl="rewrite premises">
                  <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="243"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.0.1.1" expl="false case (rewrite premises)">
               <proof prover="1" obsolete="true"><result status="valid" time="1.45"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.0.0.1" expl="rewrite premises">
             <proof prover="0" obsolete="true"><result status="valid" time="1.31"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.0.1" expl="rewrite premises">
           <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="241"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC sem_cnot_mat.8.0.1.0.2.0.2.0.1" expl="rewrite premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="241"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.8.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="237"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_cnot_mat.9" expl="postcondition">
  <transf name="rewrite" arg1="pps_cnot_apply_basis">
   <goal name="VC sem_cnot_mat.9.0" expl="postcondition">
   <transf name="replace" arg1="(bv_to_ket x)" arg2="(ket 2 (bv_to_int x) )">
    <goal name="VC sem_cnot_mat.9.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H2">
     <goal name="VC sem_cnot_mat.9.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC sem_cnot_mat.9.0.0.1" expl="rewrite premises">
     <proof prover="1" obsolete="true"><result status="valid" time="1.16"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_cnot_mat.9.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.24" steps="239"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_cnot_mat.9.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="0.45" steps="237"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC swap_func" expl="VC for swap_func">
 <transf name="split_vc" >
  <goal name="VC swap_func.0" expl="assertion">
  <proof prover="2" obsolete="true"><result status="valid" time="2.19" steps="222"/></proof>
  </goal>
  <goal name="VC swap_func.1" expl="assertion">
  <proof prover="2" obsolete="true"><result status="valid" time="2.32" steps="224"/></proof>
  </goal>
  <goal name="VC swap_func.2" expl="precondition">
  <transf name="compute_specified" >
   <goal name="VC swap_func.2.0" expl="precondition">
   <proof prover="2" obsolete="true"><result status="valid" time="2.27" steps="229"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func.3" expl="precondition" proved="true">
  <transf name="compute_specified" proved="true" >
  </transf>
  </goal>
  <goal name="VC swap_func.4" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.41" steps="228"/></proof>
  </goal>
  <goal name="VC swap_func.5" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC swap_func.5.0" expl="apply premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.25" steps="232"/></proof>
   </goal>
   <goal name="VC swap_func.5.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC swap_func.5.1.0" expl="apply premises">
    <transf name="rewrite" arg1="H5">
     <goal name="VC swap_func.5.1.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC swap_func.5.1.0.0.0" expl="apply premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.34"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func.5.1.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.40" steps="234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func.6" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC swap_func.6.0" expl="apply premises">
   <transf name="split_all_full" >
    <goal name="VC swap_func.6.0.0" expl="apply premises">
    <transf name="rewrite" arg1="int_to_bv_spec1">
     <goal name="VC swap_func.6.0.0.0" expl="apply premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="230"/></proof>
     </goal>
     <goal name="VC swap_func.6.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="230"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC swap_func.6.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC swap_func.6.1.0" expl="apply premises">
    <transf name="rewrite" arg1="H6">
     <goal name="VC swap_func.6.1.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC swap_func.6.1.0.0.0" expl="apply premises">
      <transf name="assert" arg1="(getbv x 0 = 0 &amp;&amp; getbv x 1 = 1)">
       <goal name="VC swap_func.6.1.0.0.0.0" expl="asserted formula">
       <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="234"/></proof>
       </goal>
       <goal name="VC swap_func.6.1.0.0.0.1" expl="apply premises">
       <transf name="rewrite" arg1="int_to_bv_value">
        <goal name="VC swap_func.6.1.0.0.0.1.0" expl="apply premises">
        <transf name="case" arg1="(i = 0)">
         <goal name="VC swap_func.6.1.0.0.0.1.0.0" expl="true case (apply premises)">
         <transf name="replace" arg1="(1 - (getbv x @ i))" arg2="1">
          <goal name="VC swap_func.6.1.0.0.0.1.0.0.0" expl="true case (apply premises)">
          <transf name="replace" arg1="(power 2 ((2 - i) - 1))" arg2="2">
           <goal name="VC swap_func.6.1.0.0.0.1.0.0.0.0" expl="true case (apply premises)">
           <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="238"/></proof>
           </goal>
           <goal name="VC swap_func.6.1.0.0.0.1.0.0.0.1" expl="equality hypothesis">
           <proof prover="2" obsolete="true"><result status="valid" time="2.31" steps="241"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC swap_func.6.1.0.0.0.1.0.0.1" expl="equality hypothesis">
          <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="238"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC swap_func.6.1.0.0.0.1.0.1" expl="false case (apply premises)">
         <transf name="replace" arg1="(1 - (getbv x @ i))" arg2="0">
          <goal name="VC swap_func.6.1.0.0.0.1.0.1.0" expl="false case (apply premises)">
          <transf name="replace" arg1="(power 2 ((2 - i) - 1))" arg2="1">
           <goal name="VC swap_func.6.1.0.0.0.1.0.1.0.0" expl="false case (apply premises)">
           <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="238"/></proof>
           </goal>
           <goal name="VC swap_func.6.1.0.0.0.1.0.1.0.1" expl="equality hypothesis">
           <proof prover="2" obsolete="true"><result status="valid" time="2.41" steps="241"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="VC swap_func.6.1.0.0.0.1.0.1.1" expl="equality hypothesis">
          <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="238"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC swap_func.6.1.0.0.0.1.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="236"/></proof>
        </goal>
        <goal name="VC swap_func.6.1.0.0.0.1.2" expl="rewrite premises">
        <proof prover="1" obsolete="true"><result status="valid" time="1.26"/></proof>
        </goal>
        <goal name="VC swap_func.6.1.0.0.0.1.3" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="236"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func.6.1.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func.7" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC swap_func.7.0" expl="apply premises">
   <transf name="split_all_full" >
    <goal name="VC swap_func.7.0.0" expl="apply premises">
    <transf name="rewrite" arg1="int_to_bv_spec1">
     <goal name="VC swap_func.7.0.0.0" expl="apply premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="230"/></proof>
     </goal>
     <goal name="VC swap_func.7.0.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="230"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC swap_func.7.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC swap_func.7.1.0" expl="apply premises">
    <transf name="rewrite" arg1="H7">
     <goal name="VC swap_func.7.1.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC swap_func.7.1.0.0.0" expl="apply premises">
      <transf name="assert" arg1="(getbv x 0 = 1 &amp;&amp; getbv x 1 = 0)">
       <goal name="VC swap_func.7.1.0.0.0.0" expl="asserted formula">
       <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="234"/></proof>
       </goal>
       <goal name="VC swap_func.7.1.0.0.0.1" expl="apply premises">
       <transf name="rewrite" arg1="int_to_bv_value">
        <goal name="VC swap_func.7.1.0.0.0.1.0" expl="apply premises">
        <transf name="case" arg1="(i = 0)">
         <goal name="VC swap_func.7.1.0.0.0.1.0.0" expl="true case (apply premises)">
         <proof prover="2" obsolete="true"><result status="valid" time="2.75" steps="242"/></proof>
         </goal>
         <goal name="VC swap_func.7.1.0.0.0.1.0.1" expl="false case (apply premises)">
         <proof prover="0" obsolete="true"><result status="valid" time="1.15"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="VC swap_func.7.1.0.0.0.1.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="236"/></proof>
        </goal>
        <goal name="VC swap_func.7.1.0.0.0.1.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="2.49" steps="240"/></proof>
        </goal>
        <goal name="VC swap_func.7.1.0.0.0.1.3" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="236"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func.7.1.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func.8" expl="postcondition">
  <transf name="apply" arg1="set_equal_bv">
   <goal name="VC swap_func.8.0" expl="apply premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.24" steps="235"/></proof>
   </goal>
   <goal name="VC swap_func.8.1" expl="apply premises">
   <transf name="split_vc" >
    <goal name="VC swap_func.8.1.0" expl="apply premises">
    <transf name="rewrite" arg1="H8">
     <goal name="VC swap_func.8.1.0.0" expl="apply premises">
     <transf name="compute_specified" >
      <goal name="VC swap_func.8.1.0.0.0" expl="apply premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.63"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func.8.1.0.1" expl="rewrite premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="234"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_swap_func" expl="VC for invol_swap_func">
 <transf name="split_vc" >
  <goal name="VC invol_swap_func.0" expl="postcondition">
  <transf name="split_all_full" >
   <goal name="VC invol_swap_func.0.0" expl="postcondition">
   <transf name="case" arg1="(bv_to_int x = 0)">
    <goal name="VC invol_swap_func.0.0.0" expl="true case (postcondition)">
    <proof prover="0" obsolete="true"><result status="valid" time="1.10"/></proof>
    </goal>
    <goal name="VC invol_swap_func.0.0.1" expl="false case (postcondition)">
    <transf name="case" arg1="(bv_to_int x = 1)">
     <goal name="VC invol_swap_func.0.0.1.0" expl="false case (true case. postcondition)">
     <transf name="rewrite" arg1="swap_func_spec1">
      <goal name="VC invol_swap_func.0.0.1.0.0" expl="false case (true case. postcondition)">
      <proof prover="2" obsolete="true"><result status="valid" time="2.33" steps="226"/></proof>
      </goal>
      <goal name="VC invol_swap_func.0.0.1.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="2.05" steps="226"/></proof>
      </goal>
      <goal name="VC invol_swap_func.0.0.1.0.2" expl="rewrite premises">
      <transf name="rewrite" arg1="swap_func_spec2">
       <goal name="VC invol_swap_func.0.0.1.0.2.0" expl="rewrite premises">
       <transf name="apply" arg1="bv_to_int_to_bv_">
        <goal name="VC invol_swap_func.0.0.1.0.2.0.0" expl="apply premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="224"/></proof>
        </goal>
        <goal name="VC invol_swap_func.0.0.1.0.2.0.1" expl="apply premises">
        <proof prover="2" obsolete="true"><result status="valid" time="2.00" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.0.2.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="224"/></proof>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.0.2.2" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="224"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="VC invol_swap_func.0.0.1.1" expl="false case (postcondition)">
     <transf name="case" arg1="(bv_to_int x = 2)">
      <goal name="VC invol_swap_func.0.0.1.1.0" expl="false case (true case. postcondition)">
      <transf name="rewrite" arg1="swap_func_spec2">
       <goal name="VC invol_swap_func.0.0.1.1.0.0" expl="false case (true case. postcondition)">
       <proof prover="2" obsolete="true"><result status="valid" time="2.45" steps="228"/></proof>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.1.0.1" expl="rewrite premises">
       <proof prover="2" obsolete="true"><result status="valid" time="2.08" steps="228"/></proof>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.1.0.2" expl="rewrite premises">
       <transf name="rewrite" arg1="swap_func_spec1">
        <goal name="VC invol_swap_func.0.0.1.1.0.2.0" expl="rewrite premises">
        <proof prover="1" obsolete="true"><result status="valid" time="1.42"/></proof>
        </goal>
        <goal name="VC invol_swap_func.0.0.1.1.0.2.1" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="226"/></proof>
        </goal>
        <goal name="VC invol_swap_func.0.0.1.1.0.2.2" expl="rewrite premises">
        <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="226"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC invol_swap_func.0.0.1.1.1" expl="false case (postcondition)">
      <transf name="assert" arg1="(bv_to_int x = 3)">
       <goal name="VC invol_swap_func.0.0.1.1.1.0" expl="asserted formula">
       <transf name="rewrite" arg1="bv_to_int_sum">
        <goal name="VC invol_swap_func.0.0.1.1.1.0.0" expl="asserted formula">
        <transf name="rewrite" arg1="ind_isum_plus_one">
         <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0" expl="asserted formula">
         <transf name="rewrite" arg1="ind_isum_one">
          <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0" expl="asserted formula">
          <transf name="compute_specified" >
           <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0" expl="asserted formula">
           <transf name="rewrite" arg1="one_mult_int">
            <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0" expl="asserted formula">
            <transf name="rewrite" arg1="one_mult_int">
             <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.0" expl="asserted formula">
             <proof prover="1" obsolete="true"><result status="valid" time="1.26"/></proof>
             </goal>
             <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1" expl="rewrite premises">
             <transf name="case" arg1="(getbv x 1 = 0)">
              <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0" expl="true case (rewrite premises)">
              <transf name="assert" arg1="(mod (bv_to_int x) 2 = 0)">
               <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.0" expl="asserted formula">
               <proof prover="2" obsolete="true"><result status="valid" time="2.14" steps="230"/></proof>
               </goal>
               <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1" expl="true case (rewrite premises)">
               <transf name="assert" arg1="(0&lt;= bv_to_int x &lt; 4)">
                <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1.0" expl="asserted formula">
                <transf name="replace" arg1="4" arg2="(power 2 (length x))">
                 <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1.0.0" expl="asserted formula">
                 <proof prover="2" obsolete="true"><result status="valid" time="2.10" steps="231"/></proof>
                 </goal>
                 <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1.0.1" expl="equality hypothesis">
                 <proof prover="2" obsolete="true"><result status="valid" time="2.08" steps="232"/></proof>
                 </goal>
                </transf>
                </goal>
                <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.0.1.1" expl="true case (rewrite premises)">
                <proof prover="2" obsolete="true"><result status="valid" time="0.50" steps="232"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.0.1.1" expl="false case (rewrite premises)">
              <proof prover="1" obsolete="true"><result status="valid" time="1.41"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
            <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1" expl="rewrite premises">
            <transf name="case" arg1="((getbv x @ 0) = 0)">
             <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1.0" expl="true case (rewrite premises)">
             <transf name="assert" arg1="(div (bv_to_int x) 2 = 0)">
              <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1.0.0" expl="asserted formula">
              <proof prover="2" obsolete="true"><result status="valid" time="1.93" steps="230"/></proof>
              </goal>
              <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1.0.1" expl="true case (rewrite premises)">
              <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="228"/></proof>
              </goal>
             </transf>
             </goal>
             <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.0.0.1.1" expl="false case (rewrite premises)">
             <proof prover="0" obsolete="true"><result status="valid" time="1.00"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
          <goal name="VC invol_swap_func.0.0.1.1.1.0.0.0.1" expl="rewrite premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.37" steps="226"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="VC invol_swap_func.0.0.1.1.1.0.0.1" expl="rewrite premises">
         <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="226"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="VC invol_swap_func.0.0.1.1.1.1" expl="false case (postcondition)">
       <proof prover="0" obsolete="true"><result status="valid" time="0.99"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC swap_func_int" expl="VC for swap_func_int">
 <transf name="split_vc" >
  <goal name="VC swap_func_int.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="218"/></proof>
  </goal>
  <goal name="VC swap_func_int.1" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="222"/></proof>
  </goal>
  <goal name="VC swap_func_int.2" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC swap_func_int.2.0" expl="postcondition">
   <transf name="replace" arg1="4" arg2="(power 2 (length (swap_func (int_to_bv i 2))))">
    <goal name="VC swap_func_int.2.0.0" expl="postcondition">
    <proof prover="0" obsolete="true"><result status="valid" time="4.24"/></proof>
    </goal>
    <goal name="VC swap_func_int.2.0.1" expl="equality hypothesis">
    <proof prover="1" obsolete="true"><result status="valid" time="1.40"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func_int.3" expl="postcondition">
  <proof prover="0" obsolete="true"><result status="valid" time="1.10"/></proof>
  </goal>
  <goal name="VC swap_func_int.4" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC swap_func_int.4.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC swap_func_int.4.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H7">
     <goal name="VC swap_func_int.4.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.4.0.0.0.0" expl="postcondition">
      <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.4.0.0.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.4.0.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.19"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func_int.4.0.0.1" expl="rewrite premises">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.4.0.0.1.0" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.4.0.0.1.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.4.0.0.1.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.25"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func_int.5" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC swap_func_int.5.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC swap_func_int.5.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H7">
     <goal name="VC swap_func_int.5.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.5.0.0.0.0" expl="postcondition">
      <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.5.0.0.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.5.0.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.18"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func_int.5.0.0.1" expl="rewrite premises">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.5.0.0.1.0" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.51" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.5.0.0.1.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.50" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.5.0.0.1.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.22"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func_int.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC swap_func_int.6.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC swap_func_int.6.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H7">
     <goal name="VC swap_func_int.6.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.6.0.0.0.0" expl="postcondition">
      <proof prover="2" obsolete="true"><result status="valid" time="0.56" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.6.0.0.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.57" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.6.0.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.21"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC swap_func_int.6.0.0.1" expl="rewrite premises">
     <transf name="rewrite" arg1="bv_to_int_to_bv_">
      <goal name="VC swap_func_int.6.0.0.1.0" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.55" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.6.0.0.1.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.50" steps="250"/></proof>
      </goal>
      <goal name="VC swap_func_int.6.0.0.1.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.23"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC swap_func_int.7" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC swap_func_int.7.0" expl="postcondition">
   <transf name="rewrite" arg1="result_def">
    <goal name="VC swap_func_int.7.0.0" expl="postcondition">
    <transf name="eliminate_if" >
     <goal name="VC swap_func_int.7.0.0.0" expl="VC for swap_func_int">
     <transf name="split_vc" >
      <goal name="VC swap_func_int.7.0.0.0.0" expl="postcondition">
      <proof prover="2" obsolete="true"><result status="valid" time="0.63" steps="259"/></proof>
      </goal>
      <goal name="VC swap_func_int.7.0.0.0.1" expl="postcondition">
      <transf name="case" arg1="(i = 1)">
       <goal name="VC swap_func_int.7.0.0.0.1.0" expl="true case (postcondition)">
       <proof prover="2" obsolete="true"><result status="valid" time="0.63" steps="258"/></proof>
       </goal>
       <goal name="VC swap_func_int.7.0.0.0.1.1" expl="false case (postcondition)">
       <transf name="replace" arg1="i" arg2="2">
        <goal name="VC swap_func_int.7.0.0.0.1.1.0" expl="false case (postcondition)">
        <proof prover="2" obsolete="true"><result status="valid" time="0.55" steps="263"/></proof>
        </goal>
        <goal name="VC swap_func_int.7.0.0.0.1.1.1" expl="equality hypothesis">
        <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="258"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC invol_swap_func_int" expl="VC for invol_swap_func_int">
 <transf name="split_vc" >
  <goal name="VC invol_swap_func_int.0" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="232"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC sem_swap_mat" expl="VC for sem_swap_mat">
 <transf name="split_vc" >
  <goal name="VC sem_swap_mat.0" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="226"/></proof>
  </goal>
  <goal name="VC sem_swap_mat.1" expl="precondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.42" steps="227"/></proof>
  </goal>
  <goal name="VC sem_swap_mat.2" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="2.14" steps="234"/></proof>
  </goal>
  <goal name="VC sem_swap_mat.3" expl="postcondition">
  <proof prover="2" obsolete="true"><result status="valid" time="0.33" steps="234"/></proof>
  </goal>
  <goal name="VC sem_swap_mat.4" expl="postcondition">
  <transf name="apply" arg1="set_equal_mat">
   <goal name="VC sem_swap_mat.4.0" expl="apply premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.36" steps="237"/></proof>
   </goal>
   <goal name="VC sem_swap_mat.4.1" expl="apply premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.15" steps="237"/></proof>
   </goal>
   <goal name="VC sem_swap_mat.4.2" expl="apply premises">
   <transf name="rewrite" arg1="H2">
    <goal name="VC sem_swap_mat.4.2.0" expl="apply premises">
    <transf name="split_vc" >
     <goal name="VC sem_swap_mat.4.2.0.0" expl="apply premises">
     <transf name="rewrite" arg1="assert_make">
      <goal name="VC sem_swap_mat.4.2.0.0.0" expl="apply premises">
      <transf name="compute_specified" >
       <goal name="VC sem_swap_mat.4.2.0.0.0.0" expl="apply premises">
       <transf name="replace" arg1="(if i = 0 then i else if i = 1 then 2 else if i = 2 then 1 else 3)" arg2="(swap_func_int i)">
        <goal name="VC sem_swap_mat.4.2.0.0.0.0.0" expl="apply premises" proved="true">
        <transf name="compute_specified" proved="true" >
        </transf>
        </goal>
        <goal name="VC sem_swap_mat.4.2.0.0.0.0.1" expl="equality hypothesis">
        <transf name="eliminate_if" >
         <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0">
         <transf name="split_vc" >
          <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0.0" expl="equality hypothesis">
          <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="239"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0.1" expl="equality hypothesis">
          <proof prover="2" obsolete="true"><result status="valid" time="0.34" steps="241"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0.2" expl="equality hypothesis">
          <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="243"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.4.2.0.0.0.0.1.0.3" expl="equality hypothesis">
          <proof prover="1" obsolete="true"><result status="valid" time="1.12"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_swap_mat.4.2.0.0.1" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.17"/></proof>
      </goal>
      <goal name="VC sem_swap_mat.4.2.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.17"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_swap_mat.5" expl="postcondition">
  <transf name="rewrite" arg1="mat_mult_ket_basis_bv_gen">
   <goal name="VC sem_swap_mat.5.0" expl="postcondition">
   <transf name="replace" arg1="(ket_length (bv_to_ket x))" arg2="2">
    <goal name="VC sem_swap_mat.5.0.0" expl="postcondition">
    <transf name="instantiate" arg1="ket_sum_l_null_but_maybe_one_elt" arg2="(fun (bvx:bitvec) -&gt;
    get result (bv_to_int bvx) (ket_to_int (bv_to_ket x))
    *.. ket 2 (bv_to_int bvx)),(n_bvs 2),(swap_func x),2">
     <goal name="VC sem_swap_mat.5.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="Hinst">
      <goal name="VC sem_swap_mat.5.0.0.0.0" expl="postcondition">
      <transf name="compute_specified" >
       <goal name="VC sem_swap_mat.5.0.0.0.0.0" expl="postcondition">
       <transf name="rewrite" arg1="scalar_c_one_gen">
        <goal name="VC sem_swap_mat.5.0.0.0.0.0.0" expl="postcondition">
        <transf name="eliminate_definition" >
         <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0" expl="postcondition">
         <transf name="rewrite" arg1="bv_to_ket_def">
          <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0" expl="postcondition">
          <transf name="apply" arg1="set_equal_ket_l">
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0" expl="apply premises">
           <transf name="exists" arg1="2">
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0">
            <transf name="split_vc" >
             <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.0">
             <proof prover="0" obsolete="true"><result status="valid" time="4.17"/></proof>
             </goal>
             <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.1">
             <transf name="rewrite" arg1="make_bv_length">
              <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.1.0">
              <proof prover="1" obsolete="true"><result status="valid" time="1.36"/></proof>
              </goal>
              <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
              <transf name="split_vc" >
               <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises">
               <transf name="compute_specified" >
                <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.1.1.0.0" expl="rewrite premises">
                <proof prover="1" obsolete="true"><result status="valid" time="1.38"/></proof>
                </goal>
               </transf>
               </goal>
               <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.1.1.1" expl="rewrite premises">
               <transf name="compute_specified" >
                <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.1.1.1.0" expl="rewrite premises">
                <proof prover="1" obsolete="true"><result status="valid" time="1.30"/></proof>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
              <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.0.0.1.2" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="255"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1" expl="apply premises">
           <transf name="split_vc" >
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0" expl="apply premises">
            <transf name="rewrite" arg1="assert_make_ket_l">
             <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0" expl="apply premises">
             <transf name="compute_specified" >
              <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0" expl="apply premises">
              <transf name="rewrite" arg1="get__ket_value">
               <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0" expl="apply premises">
               <transf name="rewrite" arg1="get__ket_value">
                <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.0" expl="apply premises">
                <transf name="replace" arg1="(bv_to_int (swap_func x))" arg2="(bv_to_int (make_bv (fun (i1:int) -&gt; getbv x @ (1 - i1)) 2))">
                 <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.0.0" expl="apply premises" proved="true">
                 <transf name="compute_specified" proved="true" >
                 </transf>
                 </goal>
                 <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1" expl="equality hypothesis">
                 <transf name="apply" arg1="bv_to_int_eq">
                  <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0" expl="apply premises">
                  <transf name="rewrite" arg1="swap_func_def">
                   <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.0" expl="apply premises" proved="true">
                   <transf name="compute_specified" proved="true" >
                   </transf>
                   </goal>
                   <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.0.1.0.1" expl="rewrite premises">
                   <proof prover="2" obsolete="true"><result status="valid" time="0.51" steps="259"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.1" expl="rewrite premises">
                <proof prover="1" obsolete="true"><result status="valid" time="1.31"/></proof>
                </goal>
                <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2" expl="rewrite premises">
                <transf name="split_vc" >
                 <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.0" expl="rewrite premises">
                 <proof prover="1" obsolete="true"><result status="valid" time="1.32"/></proof>
                 </goal>
                 <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.1" expl="rewrite premises">
                 <transf name="apply" arg1="bv_to_int_bound">
                  <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.1.0" expl="apply premises">
                  <transf name="rewrite" arg1="make_bv_length">
                   <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.1.0.0" expl="apply premises">
                   <proof prover="2" obsolete="true"><result status="valid" time="0.43" steps="259"/></proof>
                   </goal>
                   <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.1.0.1" expl="rewrite premises">
                   <transf name="compute_specified" >
                    <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.1.0.1.0" expl="rewrite premises">
                    <transf name="split_vc" >
                     <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.1.0.1.0.0" expl="rewrite premises">
                     <proof prover="1" obsolete="true"><result status="valid" time="1.35"/></proof>
                     </goal>
                     <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.1.0.1.0.1" expl="rewrite premises">
                     <proof prover="1" obsolete="true"><result status="valid" time="1.33"/></proof>
                     </goal>
                    </transf>
                    </goal>
                   </transf>
                   </goal>
                   <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.2.1.0.2" expl="rewrite premises">
                   <proof prover="2" obsolete="true"><result status="valid" time="0.53" steps="259"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
                <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.3" expl="rewrite premises">
                <transf name="rewrite" arg1="make_bv_length">
                 <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.3.0" expl="rewrite premises">
                 <proof prover="1" obsolete="true"><result status="valid" time="1.27"/></proof>
                 </goal>
                 <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.3.1" expl="rewrite premises">
                 <transf name="compute_specified" >
                  <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.3.1.0" expl="rewrite premises">
                  <transf name="split_vc" >
                   <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.3.1.0.0" expl="rewrite premises">
                   <proof prover="1" obsolete="true"><result status="valid" time="1.36"/></proof>
                   </goal>
                   <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.3.1.0.1" expl="rewrite premises">
                   <proof prover="1" obsolete="true"><result status="valid" time="1.39"/></proof>
                   </goal>
                  </transf>
                  </goal>
                 </transf>
                 </goal>
                 <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.0.3.2" expl="rewrite premises">
                 <proof prover="2" obsolete="true"><result status="valid" time="0.51" steps="259"/></proof>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
               <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.1" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.55" steps="259"/></proof>
               </goal>
               <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.2" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.30"/></proof>
               </goal>
               <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.0.0.3" expl="rewrite premises">
               <proof prover="1" obsolete="true"><result status="valid" time="1.28"/></proof>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
             <goal name="VC sem_swap_mat.5.0.0.0.0.0.0.0.0.1.0.1" expl="rewrite premises">
             <proof prover="2" obsolete="true"><result status="valid" time="0.44" steps="259"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_swap_mat.5.0.0.0.0.0.1" expl="rewrite premises">
        <transf name="rewrite" arg1="H4">
         <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0" expl="rewrite premises">
         <transf name="compute_specified" >
          <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0" expl="rewrite premises">
          <transf name="replace" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0" expl="rewrite premises">
           <transf name="rewrite" arg1="get_indic">
            <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0.0" expl="rewrite premises">
            <transf name="eliminate_if" >
             <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0.0.0">
             <transf name="split_vc" >
              <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0.0.0.0" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="241"/></proof>
              </goal>
              <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.0.0.0.1" expl="rewrite premises">
              <proof prover="0" obsolete="true"><result status="valid" time="0.85"/></proof>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
           <goal name="VC sem_swap_mat.5.0.0.0.0.0.1.0.0.1" expl="equality hypothesis">
           <proof prover="2" obsolete="true"><result status="valid" time="2.27" steps="242"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.1" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="0.36" steps="239"/></proof>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.2" expl="rewrite premises">
      <proof prover="1" obsolete="true"><result status="valid" time="1.33"/></proof>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.3" expl="rewrite premises">
      <proof prover="2" obsolete="true"><result status="valid" time="2.06" steps="241"/></proof>
      </goal>
      <goal name="VC sem_swap_mat.5.0.0.0.4" expl="rewrite premises">
      <transf name="compute_specified" >
       <goal name="VC sem_swap_mat.5.0.0.0.4.0" expl="rewrite premises">
       <transf name="split_vc" >
        <goal name="VC sem_swap_mat.5.0.0.0.4.0.0" expl="rewrite premises">
        <transf name="rewrite" arg1="get_ket_scalar">
         <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0" expl="rewrite premises">
         <transf name="rewrite" arg1="H8">
          <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0" expl="rewrite premises">
          <transf name="compute_specified" >
           <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0" expl="rewrite premises">
           <transf name="eliminate_if" >
            <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0" expl="rewrite premises">
            <transf name="split_all_full" >
             <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0" expl="rewrite premises">
             <transf name="rewrite" arg1="zero_mult_t">
              <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.0" expl="rewrite premises">
              <proof prover="2" obsolete="true"><result status="valid" time="0.39" steps="247"/></proof>
              </goal>
              <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1" expl="rewrite premises">
              <transf name="rewrite" arg1="indic_spec">
               <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.0" expl="rewrite premises">
               <proof prover="2" obsolete="true"><result status="valid" time="0.38" steps="247"/></proof>
               </goal>
               <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1" expl="rewrite premises">
               <transf name="eliminate_definition" >
                <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1.0" expl="rewrite premises">
                <transf name="rewrite" arg1="swap_func_int_def">
                 <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1.0.0" expl="rewrite premises">
                 <transf name="replace" arg1="(int_to_bv (bv_to_int e&#39;) 2)" arg2="e&#39;">
                  <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1.0.0.0" expl="rewrite premises">
                  <transf name="case" arg1="(x = swap_func e&#39;)">
                   <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1.0.0.0.0" expl="true case (rewrite premises)">
                   <proof prover="0" obsolete="true"><result status="valid" time="3.94"/></proof>
                   </goal>
                   <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1.0.0.0.1" expl="false case (rewrite premises)">
                   <transf name="replace" arg1="(ket_to_int (bv_to_ket x))" arg2="(bv_to_int x)">
                    <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1.0.0.0.1.0" expl="false case (rewrite premises)">
                    <proof prover="1" obsolete="true"><result status="valid" time="1.45"/></proof>
                    </goal>
                    <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1.0.0.0.1.1" expl="equality hypothesis">
                    <proof prover="1" obsolete="true"><result status="valid" time="1.39"/></proof>
                    </goal>
                   </transf>
                   </goal>
                  </transf>
                  </goal>
                  <goal name="VC sem_swap_mat.5.0.0.0.4.0.0.0.0.0.0.0.1.1.0.0.1" expl="equality hypothesis">
                  <proof prover="1" obsolete="true"><result status="valid" time="1.40"/></proof>
                  </goal>
                 </transf>
                 </goal>
                </transf>
                </goal>
               </transf>
               </goal>
              </transf>
              </goal>
             </transf>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_swap_mat.5.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.18" steps="241"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_swap_mat.5.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="2.20" steps="241"/></proof>
   </goal>
   <goal name="VC sem_swap_mat.5.2" expl="rewrite premises">
   <proof prover="1" obsolete="true"><result status="valid" time="1.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_swap_mat.6" expl="postcondition">
  <transf name="eliminate_definition" >
   <goal name="VC sem_swap_mat.6.0" expl="postcondition">
   <transf name="rewrite" arg1="swap_func_def">
    <goal name="VC sem_swap_mat.6.0.0" expl="postcondition">
    <transf name="apply" arg1="H1">
     <goal name="VC sem_swap_mat.6.0.0.0" expl="apply premises">
     <proof prover="2" obsolete="true"><result status="valid" time="0.54" steps="255"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_swap_mat.6.0.1" expl="rewrite premises">
    <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="255"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_swap_mat.7" expl="postcondition">
  <transf name="replace" arg1="(ket 2 i)" arg2="(bv_to_ket (int_to_bv i 2))">
   <goal name="VC sem_swap_mat.7.0" expl="postcondition">
   <transf name="rewrite" arg1="H2">
    <goal name="VC sem_swap_mat.7.0.0" expl="postcondition">
    <transf name="eliminate_definition" >
     <goal name="VC sem_swap_mat.7.0.0.0" expl="postcondition">
     <transf name="rewrite" arg1="bv_to_ket_def">
      <goal name="VC sem_swap_mat.7.0.0.0.0" expl="postcondition">
      <transf name="apply" arg1="ket_eq">
       <goal name="VC sem_swap_mat.7.0.0.0.0.0" expl="apply premises">
       <proof prover="0" obsolete="true"><result status="valid" time="4.65"/></proof>
       </goal>
       <goal name="VC sem_swap_mat.7.0.0.0.0.1" expl="apply premises">
       <proof prover="0" obsolete="true"><result status="valid" time="4.62"/></proof>
       </goal>
       <goal name="VC sem_swap_mat.7.0.0.0.0.2" expl="apply premises">
       <transf name="replace" arg1="(bv_to_int (swap_func (int_to_bv i 2)))" arg2="(swap_func_int i)">
        <goal name="VC sem_swap_mat.7.0.0.0.0.2.0" expl="apply premises">
        <transf name="eliminate_if" >
         <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0">
         <transf name="split_vc" >
          <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0.0" expl="apply premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.52" steps="259"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0.1" expl="apply premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.49" steps="261"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0.2" expl="apply premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.47" steps="263"/></proof>
          </goal>
          <goal name="VC sem_swap_mat.7.0.0.0.0.2.0.0.3" expl="apply premises">
          <proof prover="2" obsolete="true"><result status="valid" time="0.56" steps="263"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="VC sem_swap_mat.7.0.0.0.0.2.1" expl="equality hypothesis">
        <proof prover="0" obsolete="true"><result status="valid" time="4.43"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_swap_mat.7.0.1" expl="rewrite premises">
    <proof prover="2" obsolete="true"><result status="valid" time="2.55" steps="243"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_swap_mat.7.1" expl="equality hypothesis">
   <proof prover="0" obsolete="true"><result status="valid" time="1.02"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC sem_swap_mat.8" expl="postcondition">
  <transf name="rewrite" arg1="pps_swap_apply_basis">
   <goal name="VC sem_swap_mat.8.0" expl="postcondition">
   <transf name="replace" arg1="(bv_to_ket x)" arg2="(ket 2 (bv_to_int x) )">
    <goal name="VC sem_swap_mat.8.0.0" expl="postcondition">
    <transf name="rewrite" arg1="H1">
     <goal name="VC sem_swap_mat.8.0.0.0" expl="postcondition" proved="true">
     <transf name="compute_specified" proved="true" >
     </transf>
     </goal>
     <goal name="VC sem_swap_mat.8.0.0.1" expl="rewrite premises">
     <proof prover="1" obsolete="true"><result status="valid" time="1.21"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC sem_swap_mat.8.0.1" expl="equality hypothesis">
    <proof prover="2" obsolete="true"><result status="valid" time="2.34" steps="247"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC sem_swap_mat.8.1" expl="rewrite premises">
   <proof prover="2" obsolete="true"><result status="valid" time="0.35" steps="245"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
